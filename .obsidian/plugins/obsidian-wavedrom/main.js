/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/wavedrom/skins/default.js
var require_default = __commonJS({
  "node_modules/wavedrom/skins/default.js"(exports2, module2) {
    var WaveSkin = WaveSkin || {};
    WaveSkin.default = ["svg", { id: "svg", xmlns: "http://www.w3.org/2000/svg", "xmlns:xlink": "http://www.w3.org/1999/xlink", height: "0" }, ["style", { type: "text/css" }, "text{font-size:11pt;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:center;fill-opacity:1;font-family:Helvetica}.h1{font-size:33pt;font-weight:bold}.h2{font-size:27pt;font-weight:bold}.h3{font-size:20pt;font-weight:bold}.h4{font-size:14pt;font-weight:bold}.h5{font-size:11pt;font-weight:bold}.h6{font-size:8pt;font-weight:bold}.muted{fill:#aaa}.warning{fill:#f6b900}.error{fill:#f60000}.info{fill:#0041c4}.success{fill:#00ab00}.s1{fill:none;stroke:#000;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none}.s2{fill:none;stroke:#000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none}.s3{color:#000;fill:none;stroke:#000;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:1, 3;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible}.s4{color:#000;fill:none;stroke:#000;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible}.s5{fill:#fff;stroke:none}.s6{fill:#000;fill-opacity:1;stroke:none}.s7{color:#000;fill:#fff;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s8{color:#000;fill:#ffffb4;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s9{color:#000;fill:#ffe0b9;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s10{color:#000;fill:#b9e0ff;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s11{color:#000;fill:#ccfdfe;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s12{color:#000;fill:#cdfdc5;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s13{color:#000;fill:#f0c1fb;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s14{color:#000;fill:#f5c2c0;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s15{fill:#0041c4;fill-opacity:1;stroke:none}.s16{fill:none;stroke:#0041c4;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none}"], ["defs", ["g", { id: "socket" }, ["rect", { y: "15", x: "6", height: "20", width: "20" }]], ["g", { id: "pclk" }, ["path", { d: "M0,20 0,0 20,0", class: "s1" }]], ["g", { id: "nclk" }, ["path", { d: "m0,0 0,20 20,0", class: "s1" }]], ["g", { id: "000" }, ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "0m0" }, ["path", { d: "m0,20 3,0 3,-10 3,10 11,0", class: "s1" }]], ["g", { id: "0m1" }, ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "0mx" }, ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 5,20", class: "s2" }], ["path", { d: "M20,0 4,16", class: "s2" }], ["path", { d: "M15,0 6,9", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "0md" }, ["path", { d: "m8,20 10,0", class: "s3" }], ["path", { d: "m0,20 5,0", class: "s1" }]], ["g", { id: "0mu" }, ["path", { d: "m0,20 3,0 C 7,10 10.107603,0 20,0", class: "s1" }]], ["g", { id: "0mz" }, ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "111" }, ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "1m0" }, ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }]], ["g", { id: "1m1" }, ["path", { d: "M0,0 3,0 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "1mx" }, ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 6,9", class: "s2" }], ["path", { d: "M10,0 5,5", class: "s2" }], ["path", { d: "M3.5,1.5 5,0", class: "s2" }]], ["g", { id: "1md" }, ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }]], ["g", { id: "1mu" }, ["path", { d: "M0,0 5,0", class: "s1" }], ["path", { d: "M8,0 18,0", class: "s3" }]], ["g", { id: "1mz" }, ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s1" }]], ["g", { id: "xxx" }, ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,5 5,0", class: "s2" }], ["path", { d: "M0,10 10,0", class: "s2" }], ["path", { d: "M0,15 15,0", class: "s2" }], ["path", { d: "M0,20 20,0", class: "s2" }], ["path", { d: "M5,20 20,5", class: "s2" }], ["path", { d: "M10,20 20,10", class: "s2" }], ["path", { d: "m15,20 5,-5", class: "s2" }]], ["g", { id: "xm0" }, ["path", { d: "M0,0 4,0 9,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,5 4,1", class: "s2" }], ["path", { d: "M0,10 5,5", class: "s2" }], ["path", { d: "M0,15 6,9", class: "s2" }], ["path", { d: "M0,20 7,13", class: "s2" }], ["path", { d: "M5,20 8,17", class: "s2" }]], ["g", { id: "xm1" }, ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,20 4,20 9,0", class: "s1" }], ["path", { d: "M0,5 5,0", class: "s2" }], ["path", { d: "M0,10 9,1", class: "s2" }], ["path", { d: "M0,15 7,8", class: "s2" }], ["path", { d: "M0,20 5,15", class: "s2" }]], ["g", { id: "xmx" }, ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,5 5,0", class: "s2" }], ["path", { d: "M0,10 10,0", class: "s2" }], ["path", { d: "M0,15 15,0", class: "s2" }], ["path", { d: "M0,20 20,0", class: "s2" }], ["path", { d: "M5,20 20,5", class: "s2" }], ["path", { d: "M10,20 20,10", class: "s2" }], ["path", { d: "m15,20 5,-5", class: "s2" }]], ["g", { id: "xmd" }, ["path", { d: "m0,0 4,0 c 3,10 6,20 16,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,5 4,1", class: "s2" }], ["path", { d: "M0,10 5.5,4.5", class: "s2" }], ["path", { d: "M0,15 6.5,8.5", class: "s2" }], ["path", { d: "M0,20 8,12", class: "s2" }], ["path", { d: "m5,20 5,-5", class: "s2" }], ["path", { d: "m10,20 2.5,-2.5", class: "s2" }]], ["g", { id: "xmu" }, ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "m0,20 4,0 C 7,10 10,0 20,0", class: "s1" }], ["path", { d: "M0,5 5,0", class: "s2" }], ["path", { d: "M0,10 10,0", class: "s2" }], ["path", { d: "M0,15 10,5", class: "s2" }], ["path", { d: "M0,20 6,14", class: "s2" }]], ["g", { id: "xmz" }, ["path", { d: "m0,0 4,0 c 6,10 11,10 16,10", class: "s1" }], ["path", { d: "m0,20 4,0 C 10,10 15,10 20,10", class: "s1" }], ["path", { d: "M0,5 4.5,0.5", class: "s2" }], ["path", { d: "M0,10 6.5,3.5", class: "s2" }], ["path", { d: "M0,15 8.5,6.5", class: "s2" }], ["path", { d: "M0,20 11.5,8.5", class: "s2" }]], ["g", { id: "ddd" }, ["path", { d: "m0,20 20,0", class: "s3" }]], ["g", { id: "dm0" }, ["path", { d: "m0,20 10,0", class: "s3" }], ["path", { d: "m12,20 8,0", class: "s1" }]], ["g", { id: "dm1" }, ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "dmx" }, ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 5,20", class: "s2" }], ["path", { d: "M20,0 4,16", class: "s2" }], ["path", { d: "M15,0 6,9", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "dmd" }, ["path", { d: "m0,20 20,0", class: "s3" }]], ["g", { id: "dmu" }, ["path", { d: "m0,20 3,0 C 7,10 10.107603,0 20,0", class: "s1" }]], ["g", { id: "dmz" }, ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "uuu" }, ["path", { d: "M0,0 20,0", class: "s3" }]], ["g", { id: "um0" }, ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }]], ["g", { id: "um1" }, ["path", { d: "M0,0 10,0", class: "s3" }], ["path", { d: "m12,0 8,0", class: "s1" }]], ["g", { id: "umx" }, ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 6,9", class: "s2" }], ["path", { d: "M10,0 5,5", class: "s2" }], ["path", { d: "M3.5,1.5 5,0", class: "s2" }]], ["g", { id: "umd" }, ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }]], ["g", { id: "umu" }, ["path", { d: "M0,0 20,0", class: "s3" }]], ["g", { id: "umz" }, ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s4" }]], ["g", { id: "zzz" }, ["path", { d: "m0,10 20,0", class: "s1" }]], ["g", { id: "zm0" }, ["path", { d: "m0,10 6,0 3,10 11,0", class: "s1" }]], ["g", { id: "zm1" }, ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "zmx" }, ["path", { d: "m6,10 3,10 11,0", class: "s1" }], ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 6.5,8.5", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }]], ["g", { id: "zmd" }, ["path", { d: "m0,10 7,0 c 3,5 8,10 13,10", class: "s1" }]], ["g", { id: "zmu" }, ["path", { d: "m0,10 7,0 C 10,5 15,0 20,0", class: "s1" }]], ["g", { id: "zmz" }, ["path", { d: "m0,10 20,0", class: "s1" }]], ["g", { id: "gap" }, ["path", { d: "m7,-2 -4,0 c -5,0 -5,24 -10,24 l 4,0 C 2,22 2,-2 7,-2 z", class: "s5" }], ["path", { d: "M-7,22 C -2,22 -2,-2 3,-2", class: "s1" }], ["path", { d: "M-3,22 C 2,22 2,-2 7,-2", class: "s1" }]], ["g", { id: "Pclk" }, ["path", { d: "M-3,12 0,3 3,12 C 1,11 -1,11 -3,12 z", class: "s6" }], ["path", { d: "M0,20 0,0 20,0", class: "s1" }]], ["g", { id: "Nclk" }, ["path", { d: "M-3,8 0,17 3,8 C 1,9 -1,9 -3,8 z", class: "s6" }], ["path", { d: "m0,0 0,20 20,0", class: "s1" }]], ["g", { id: "0mv-2" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s7" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "1mv-2" }, ["path", { d: "M2.875,0 20,0 20,20 9,20 z", class: "s7" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "xmv-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,5 3.5,1.5", class: "s2" }], ["path", { d: "M0,10 4.5,5.5", class: "s2" }], ["path", { d: "M0,15 6,9", class: "s2" }], ["path", { d: "M0,20 4,16", class: "s2" }]], ["g", { id: "dmv-2" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s7" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "umv-2" }, ["path", { d: "M3,0 20,0 20,20 9,20 z", class: "s7" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "zmv-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "m6,10 3,10 11,0", class: "s1" }], ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "vvv-2" }, ["path", { d: "M20,20 0,20 0,0 20,0", class: "s7" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vm0-2" }, ["path", { d: "M0,20 0,0 3,0 9,20", class: "s7" }], ["path", { d: "M0,0 3,0 9,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vm1-2" }, ["path", { d: "M0,0 0,20 3,20 9,0", class: "s7" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0", class: "s1" }]], ["g", { id: "vmx-2" }, ["path", { d: "M0,0 0,20 3,20 6,10 3,0", class: "s7" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 7,8", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }]], ["g", { id: "vmd-2" }, ["path", { d: "m0,0 0,20 20,0 C 10,20 7,10 3,0", class: "s7" }], ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vmu-2" }, ["path", { d: "m0,0 0,20 3,0 C 7,10 10,0 20,0", class: "s7" }], ["path", { d: "m0,20 3,0 C 7,10 10,0 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vmz-2" }, ["path", { d: "M0,0 3,0 C 10,10 15,10 20,10 15,10 10,10 3,20 L 0,20", class: "s7" }], ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s1" }], ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "0mv-3" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s8" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "1mv-3" }, ["path", { d: "M2.875,0 20,0 20,20 9,20 z", class: "s8" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "xmv-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,5 3.5,1.5", class: "s2" }], ["path", { d: "M0,10 4.5,5.5", class: "s2" }], ["path", { d: "M0,15 6,9", class: "s2" }], ["path", { d: "M0,20 4,16", class: "s2" }]], ["g", { id: "dmv-3" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s8" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "umv-3" }, ["path", { d: "M3,0 20,0 20,20 9,20 z", class: "s8" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "zmv-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "m6,10 3,10 11,0", class: "s1" }], ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "vvv-3" }, ["path", { d: "M20,20 0,20 0,0 20,0", class: "s8" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vm0-3" }, ["path", { d: "M0,20 0,0 3,0 9,20", class: "s8" }], ["path", { d: "M0,0 3,0 9,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vm1-3" }, ["path", { d: "M0,0 0,20 3,20 9,0", class: "s8" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0", class: "s1" }]], ["g", { id: "vmx-3" }, ["path", { d: "M0,0 0,20 3,20 6,10 3,0", class: "s8" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 7,8", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }]], ["g", { id: "vmd-3" }, ["path", { d: "m0,0 0,20 20,0 C 10,20 7,10 3,0", class: "s8" }], ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vmu-3" }, ["path", { d: "m0,0 0,20 3,0 C 7,10 10,0 20,0", class: "s8" }], ["path", { d: "m0,20 3,0 C 7,10 10,0 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vmz-3" }, ["path", { d: "M0,0 3,0 C 10,10 15,10 20,10 15,10 10,10 3,20 L 0,20", class: "s8" }], ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s1" }], ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "0mv-4" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s9" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "1mv-4" }, ["path", { d: "M2.875,0 20,0 20,20 9,20 z", class: "s9" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "xmv-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,5 3.5,1.5", class: "s2" }], ["path", { d: "M0,10 4.5,5.5", class: "s2" }], ["path", { d: "M0,15 6,9", class: "s2" }], ["path", { d: "M0,20 4,16", class: "s2" }]], ["g", { id: "dmv-4" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s9" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "umv-4" }, ["path", { d: "M3,0 20,0 20,20 9,20 z", class: "s9" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "zmv-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "m6,10 3,10 11,0", class: "s1" }], ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "vvv-4" }, ["path", { d: "M20,20 0,20 0,0 20,0", class: "s9" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vm0-4" }, ["path", { d: "M0,20 0,0 3,0 9,20", class: "s9" }], ["path", { d: "M0,0 3,0 9,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vm1-4" }, ["path", { d: "M0,0 0,20 3,20 9,0", class: "s9" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0", class: "s1" }]], ["g", { id: "vmx-4" }, ["path", { d: "M0,0 0,20 3,20 6,10 3,0", class: "s9" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 7,8", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }]], ["g", { id: "vmd-4" }, ["path", { d: "m0,0 0,20 20,0 C 10,20 7,10 3,0", class: "s9" }], ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vmu-4" }, ["path", { d: "m0,0 0,20 3,0 C 7,10 10,0 20,0", class: "s9" }], ["path", { d: "m0,20 3,0 C 7,10 10,0 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vmz-4" }, ["path", { d: "M0,0 3,0 C 10,10 15,10 20,10 15,10 10,10 3,20 L 0,20", class: "s9" }], ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s1" }], ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "0mv-5" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s10" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "1mv-5" }, ["path", { d: "M2.875,0 20,0 20,20 9,20 z", class: "s10" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "xmv-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,5 3.5,1.5", class: "s2" }], ["path", { d: "M0,10 4.5,5.5", class: "s2" }], ["path", { d: "M0,15 6,9", class: "s2" }], ["path", { d: "M0,20 4,16", class: "s2" }]], ["g", { id: "dmv-5" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s10" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "umv-5" }, ["path", { d: "M3,0 20,0 20,20 9,20 z", class: "s10" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "zmv-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "m6,10 3,10 11,0", class: "s1" }], ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "vvv-5" }, ["path", { d: "M20,20 0,20 0,0 20,0", class: "s10" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vm0-5" }, ["path", { d: "M0,20 0,0 3,0 9,20", class: "s10" }], ["path", { d: "M0,0 3,0 9,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vm1-5" }, ["path", { d: "M0,0 0,20 3,20 9,0", class: "s10" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0", class: "s1" }]], ["g", { id: "vmx-5" }, ["path", { d: "M0,0 0,20 3,20 6,10 3,0", class: "s10" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 7,8", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }]], ["g", { id: "vmd-5" }, ["path", { d: "m0,0 0,20 20,0 C 10,20 7,10 3,0", class: "s10" }], ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vmu-5" }, ["path", { d: "m0,0 0,20 3,0 C 7,10 10,0 20,0", class: "s10" }], ["path", { d: "m0,20 3,0 C 7,10 10,0 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vmz-5" }, ["path", { d: "M0,0 3,0 C 10,10 15,10 20,10 15,10 10,10 3,20 L 0,20", class: "s10" }], ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s1" }], ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "0mv-6" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s11" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "1mv-6" }, ["path", { d: "M2.875,0 20,0 20,20 9,20 z", class: "s11" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "xmv-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,5 3.5,1.5", class: "s2" }], ["path", { d: "M0,10 4.5,5.5", class: "s2" }], ["path", { d: "M0,15 6,9", class: "s2" }], ["path", { d: "M0,20 4,16", class: "s2" }]], ["g", { id: "dmv-6" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s11" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "umv-6" }, ["path", { d: "M3,0 20,0 20,20 9,20 z", class: "s11" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "zmv-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "m6,10 3,10 11,0", class: "s1" }], ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "vvv-6" }, ["path", { d: "M20,20 0,20 0,0 20,0", class: "s11" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vm0-6" }, ["path", { d: "M0,20 0,0 3,0 9,20", class: "s11" }], ["path", { d: "M0,0 3,0 9,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vm1-6" }, ["path", { d: "M0,0 0,20 3,20 9,0", class: "s11" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0", class: "s1" }]], ["g", { id: "vmx-6" }, ["path", { d: "M0,0 0,20 3,20 6,10 3,0", class: "s11" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 7,8", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }]], ["g", { id: "vmd-6" }, ["path", { d: "m0,0 0,20 20,0 C 10,20 7,10 3,0", class: "s11" }], ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vmu-6" }, ["path", { d: "m0,0 0,20 3,0 C 7,10 10,0 20,0", class: "s11" }], ["path", { d: "m0,20 3,0 C 7,10 10,0 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vmz-6" }, ["path", { d: "M0,0 3,0 C 10,10 15,10 20,10 15,10 10,10 3,20 L 0,20", class: "s11" }], ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s1" }], ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "0mv-7" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s12" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "1mv-7" }, ["path", { d: "M2.875,0 20,0 20,20 9,20 z", class: "s12" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "xmv-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,5 3.5,1.5", class: "s2" }], ["path", { d: "M0,10 4.5,5.5", class: "s2" }], ["path", { d: "M0,15 6,9", class: "s2" }], ["path", { d: "M0,20 4,16", class: "s2" }]], ["g", { id: "dmv-7" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s12" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "umv-7" }, ["path", { d: "M3,0 20,0 20,20 9,20 z", class: "s12" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "zmv-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "m6,10 3,10 11,0", class: "s1" }], ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "vvv-7" }, ["path", { d: "M20,20 0,20 0,0 20,0", class: "s12" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vm0-7" }, ["path", { d: "M0,20 0,0 3,0 9,20", class: "s12" }], ["path", { d: "M0,0 3,0 9,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vm1-7" }, ["path", { d: "M0,0 0,20 3,20 9,0", class: "s12" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0", class: "s1" }]], ["g", { id: "vmx-7" }, ["path", { d: "M0,0 0,20 3,20 6,10 3,0", class: "s12" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 7,8", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }]], ["g", { id: "vmd-7" }, ["path", { d: "m0,0 0,20 20,0 C 10,20 7,10 3,0", class: "s12" }], ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vmu-7" }, ["path", { d: "m0,0 0,20 3,0 C 7,10 10,0 20,0", class: "s12" }], ["path", { d: "m0,20 3,0 C 7,10 10,0 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vmz-7" }, ["path", { d: "M0,0 3,0 C 10,10 15,10 20,10 15,10 10,10 3,20 L 0,20", class: "s12" }], ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s1" }], ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "0mv-8" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s13" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "1mv-8" }, ["path", { d: "M2.875,0 20,0 20,20 9,20 z", class: "s13" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "xmv-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,5 3.5,1.5", class: "s2" }], ["path", { d: "M0,10 4.5,5.5", class: "s2" }], ["path", { d: "M0,15 6,9", class: "s2" }], ["path", { d: "M0,20 4,16", class: "s2" }]], ["g", { id: "dmv-8" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s13" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "umv-8" }, ["path", { d: "M3,0 20,0 20,20 9,20 z", class: "s13" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "zmv-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "m6,10 3,10 11,0", class: "s1" }], ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "vvv-8" }, ["path", { d: "M20,20 0,20 0,0 20,0", class: "s13" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vm0-8" }, ["path", { d: "M0,20 0,0 3,0 9,20", class: "s13" }], ["path", { d: "M0,0 3,0 9,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vm1-8" }, ["path", { d: "M0,0 0,20 3,20 9,0", class: "s13" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0", class: "s1" }]], ["g", { id: "vmx-8" }, ["path", { d: "M0,0 0,20 3,20 6,10 3,0", class: "s13" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 7,8", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }]], ["g", { id: "vmd-8" }, ["path", { d: "m0,0 0,20 20,0 C 10,20 7,10 3,0", class: "s13" }], ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vmu-8" }, ["path", { d: "m0,0 0,20 3,0 C 7,10 10,0 20,0", class: "s13" }], ["path", { d: "m0,20 3,0 C 7,10 10,0 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vmz-8" }, ["path", { d: "M0,0 3,0 C 10,10 15,10 20,10 15,10 10,10 3,20 L 0,20", class: "s13" }], ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s1" }], ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "0mv-9" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s14" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "1mv-9" }, ["path", { d: "M2.875,0 20,0 20,20 9,20 z", class: "s14" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "xmv-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,5 3.5,1.5", class: "s2" }], ["path", { d: "M0,10 4.5,5.5", class: "s2" }], ["path", { d: "M0,15 6,9", class: "s2" }], ["path", { d: "M0,20 4,16", class: "s2" }]], ["g", { id: "dmv-9" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s14" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "umv-9" }, ["path", { d: "M3,0 20,0 20,20 9,20 z", class: "s14" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "zmv-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "m6,10 3,10 11,0", class: "s1" }], ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "vvv-9" }, ["path", { d: "M20,20 0,20 0,0 20,0", class: "s14" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vm0-9" }, ["path", { d: "M0,20 0,0 3,0 9,20", class: "s14" }], ["path", { d: "M0,0 3,0 9,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vm1-9" }, ["path", { d: "M0,0 0,20 3,20 9,0", class: "s14" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0", class: "s1" }]], ["g", { id: "vmx-9" }, ["path", { d: "M0,0 0,20 3,20 6,10 3,0", class: "s14" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 7,8", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }]], ["g", { id: "vmd-9" }, ["path", { d: "m0,0 0,20 20,0 C 10,20 7,10 3,0", class: "s14" }], ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vmu-9" }, ["path", { d: "m0,0 0,20 3,0 C 7,10 10,0 20,0", class: "s14" }], ["path", { d: "m0,20 3,0 C 7,10 10,0 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vmz-9" }, ["path", { d: "M0,0 3,0 C 10,10 15,10 20,10 15,10 10,10 3,20 L 0,20", class: "s14" }], ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s1" }], ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "vmv-2-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s7" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-3-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s8" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-4-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s9" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-5-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s10" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-6-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s11" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-7-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s12" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-8-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s13" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-9-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s14" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-2-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s7" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-3-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s8" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-4-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s9" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-5-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s10" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-6-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s11" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-7-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s12" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-8-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s13" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-9-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s14" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-2-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s7" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-3-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s8" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-4-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s9" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-5-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s10" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-6-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s11" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-7-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s12" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-8-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s13" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-9-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s14" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-2-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s7" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-3-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s8" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-4-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s9" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-5-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s10" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-6-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s11" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-7-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s12" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-8-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s13" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-9-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s14" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-2-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s7" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-3-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s8" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-4-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s9" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-5-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s10" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-6-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s11" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-7-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s12" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-8-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s13" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-9-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s14" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-2-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s7" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-3-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s8" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-4-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s9" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-5-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s10" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-6-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s11" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-7-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s12" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-8-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s13" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-9-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s14" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-2-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s7" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-3-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s8" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-4-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s9" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-5-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s10" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-6-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s11" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-7-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s12" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-8-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s13" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-9-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s14" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-2-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s7" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-3-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s8" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-4-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s9" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-5-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s10" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-6-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s11" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-7-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s12" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-8-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s13" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-9-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s14" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "arrow0" }, ["path", { d: "m-12,-3 9,3 -9,3 c 1,-2 1,-4 0,-6 z", class: "s15" }], ["path", { d: "M0,0 -15,0", class: "s16" }]], ["marker", { id: "arrowhead", style: "fill:#0041c4", markerHeight: 7, markerWidth: 10, markerUnits: "strokeWidth", viewBox: "0 -4 11 8", refX: 15, refY: 0, orient: "auto" }, ["path", { d: "M0 -4 11 0 0 4z" }]], ["marker", { id: "arrowtail", style: "fill:#0041c4", markerHeight: 7, markerWidth: 10, markerUnits: "strokeWidth", viewBox: "-11 -4 11 8", refX: -15, refY: 0, orient: "auto" }, ["path", { d: "M0 -4 -11 0 0 4z" }]], ["marker", { id: "tee", style: "fill:#0041c4", markerHeight: 6, markerWidth: 1, markerUnits: "strokeWidth", viewBox: "0 0 1 6", refX: 0, refY: 3, orient: "auto" }, ["path", { d: "M 0 0 L 0 6", style: "stroke:#0041c4;stroke-width:2" }]]], ["g", { id: "waves" }, ["g", { id: "lanes" }], ["g", { id: "groups" }]]];
    try {
      module2.exports = WaveSkin;
    } catch (err) {
    }
  }
});

// node_modules/json5/dist/index.js
var require_dist = __commonJS({
  "node_modules/json5/dist/index.js"(exports2, module2) {
    (function(global2, factory) {
      typeof exports2 === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.JSON5 = factory();
    })(exports2, function() {
      "use strict";
      function createCommonjsModule(fn, module3) {
        return module3 = { exports: {} }, fn(module3, module3.exports), module3.exports;
      }
      var _global = createCommonjsModule(function(module3) {
        var global2 = module3.exports = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
        if (typeof __g == "number") {
          __g = global2;
        }
      });
      var _core = createCommonjsModule(function(module3) {
        var core = module3.exports = { version: "2.6.5" };
        if (typeof __e == "number") {
          __e = core;
        }
      });
      var _core_1 = _core.version;
      var _isObject = function(it) {
        return typeof it === "object" ? it !== null : typeof it === "function";
      };
      var _anObject = function(it) {
        if (!_isObject(it)) {
          throw TypeError(it + " is not an object!");
        }
        return it;
      };
      var _fails = function(exec) {
        try {
          return !!exec();
        } catch (e) {
          return true;
        }
      };
      var _descriptors = !_fails(function() {
        return Object.defineProperty({}, "a", { get: function() {
          return 7;
        } }).a != 7;
      });
      var document2 = _global.document;
      var is = _isObject(document2) && _isObject(document2.createElement);
      var _domCreate = function(it) {
        return is ? document2.createElement(it) : {};
      };
      var _ie8DomDefine = !_descriptors && !_fails(function() {
        return Object.defineProperty(_domCreate("div"), "a", { get: function() {
          return 7;
        } }).a != 7;
      });
      var _toPrimitive = function(it, S) {
        if (!_isObject(it)) {
          return it;
        }
        var fn, val;
        if (S && typeof (fn = it.toString) == "function" && !_isObject(val = fn.call(it))) {
          return val;
        }
        if (typeof (fn = it.valueOf) == "function" && !_isObject(val = fn.call(it))) {
          return val;
        }
        if (!S && typeof (fn = it.toString) == "function" && !_isObject(val = fn.call(it))) {
          return val;
        }
        throw TypeError("Can't convert object to primitive value");
      };
      var dP = Object.defineProperty;
      var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
        _anObject(O);
        P = _toPrimitive(P, true);
        _anObject(Attributes);
        if (_ie8DomDefine) {
          try {
            return dP(O, P, Attributes);
          } catch (e) {
          }
        }
        if ("get" in Attributes || "set" in Attributes) {
          throw TypeError("Accessors not supported!");
        }
        if ("value" in Attributes) {
          O[P] = Attributes.value;
        }
        return O;
      };
      var _objectDp = {
        f
      };
      var _propertyDesc = function(bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value
        };
      };
      var _hide = _descriptors ? function(object, key2, value) {
        return _objectDp.f(object, key2, _propertyDesc(1, value));
      } : function(object, key2, value) {
        object[key2] = value;
        return object;
      };
      var hasOwnProperty = {}.hasOwnProperty;
      var _has = function(it, key2) {
        return hasOwnProperty.call(it, key2);
      };
      var id2 = 0;
      var px = Math.random();
      var _uid = function(key2) {
        return "Symbol(".concat(key2 === void 0 ? "" : key2, ")_", (++id2 + px).toString(36));
      };
      var _library = false;
      var _shared = createCommonjsModule(function(module3) {
        var SHARED = "__core-js_shared__";
        var store = _global[SHARED] || (_global[SHARED] = {});
        (module3.exports = function(key2, value) {
          return store[key2] || (store[key2] = value !== void 0 ? value : {});
        })("versions", []).push({
          version: _core.version,
          mode: _library ? "pure" : "global",
          copyright: "\xA9 2019 Denis Pushkarev (zloirock.ru)"
        });
      });
      var _functionToString = _shared("native-function-to-string", Function.toString);
      var _redefine = createCommonjsModule(function(module3) {
        var SRC = _uid("src");
        var TO_STRING = "toString";
        var TPL = ("" + _functionToString).split(TO_STRING);
        _core.inspectSource = function(it) {
          return _functionToString.call(it);
        };
        (module3.exports = function(O, key2, val, safe) {
          var isFunction = typeof val == "function";
          if (isFunction) {
            _has(val, "name") || _hide(val, "name", key2);
          }
          if (O[key2] === val) {
            return;
          }
          if (isFunction) {
            _has(val, SRC) || _hide(val, SRC, O[key2] ? "" + O[key2] : TPL.join(String(key2)));
          }
          if (O === _global) {
            O[key2] = val;
          } else if (!safe) {
            delete O[key2];
            _hide(O, key2, val);
          } else if (O[key2]) {
            O[key2] = val;
          } else {
            _hide(O, key2, val);
          }
        })(Function.prototype, TO_STRING, function toString() {
          return typeof this == "function" && this[SRC] || _functionToString.call(this);
        });
      });
      var _aFunction = function(it) {
        if (typeof it != "function") {
          throw TypeError(it + " is not a function!");
        }
        return it;
      };
      var _ctx = function(fn, that, length) {
        _aFunction(fn);
        if (that === void 0) {
          return fn;
        }
        switch (length) {
          case 1:
            return function(a) {
              return fn.call(that, a);
            };
          case 2:
            return function(a, b) {
              return fn.call(that, a, b);
            };
          case 3:
            return function(a, b, c2) {
              return fn.call(that, a, b, c2);
            };
        }
        return function() {
          return fn.apply(that, arguments);
        };
      };
      var PROTOTYPE = "prototype";
      var $export = function(type, name, source3) {
        var IS_FORCED = type & $export.F;
        var IS_GLOBAL = type & $export.G;
        var IS_STATIC = type & $export.S;
        var IS_PROTO = type & $export.P;
        var IS_BIND = type & $export.B;
        var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
        var exports3 = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
        var expProto = exports3[PROTOTYPE] || (exports3[PROTOTYPE] = {});
        var key2, own, out, exp;
        if (IS_GLOBAL) {
          source3 = name;
        }
        for (key2 in source3) {
          own = !IS_FORCED && target && target[key2] !== void 0;
          out = (own ? target : source3)[key2];
          exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == "function" ? _ctx(Function.call, out) : out;
          if (target) {
            _redefine(target, key2, out, type & $export.U);
          }
          if (exports3[key2] != out) {
            _hide(exports3, key2, exp);
          }
          if (IS_PROTO && expProto[key2] != out) {
            expProto[key2] = out;
          }
        }
      };
      _global.core = _core;
      $export.F = 1;
      $export.G = 2;
      $export.S = 4;
      $export.P = 8;
      $export.B = 16;
      $export.W = 32;
      $export.U = 64;
      $export.R = 128;
      var _export = $export;
      var ceil = Math.ceil;
      var floor = Math.floor;
      var _toInteger = function(it) {
        return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
      };
      var _defined = function(it) {
        if (it == void 0) {
          throw TypeError("Can't call method on  " + it);
        }
        return it;
      };
      var _stringAt = function(TO_STRING) {
        return function(that, pos2) {
          var s = String(_defined(that));
          var i = _toInteger(pos2);
          var l = s.length;
          var a, b;
          if (i < 0 || i >= l) {
            return TO_STRING ? "" : void 0;
          }
          a = s.charCodeAt(i);
          return a < 55296 || a > 56319 || i + 1 === l || (b = s.charCodeAt(i + 1)) < 56320 || b > 57343 ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 55296 << 10) + (b - 56320) + 65536;
        };
      };
      var $at = _stringAt(false);
      _export(_export.P, "String", {
        codePointAt: function codePointAt2(pos2) {
          return $at(this, pos2);
        }
      });
      var codePointAt = _core.String.codePointAt;
      var max = Math.max;
      var min = Math.min;
      var _toAbsoluteIndex = function(index, length) {
        index = _toInteger(index);
        return index < 0 ? max(index + length, 0) : min(index, length);
      };
      var fromCharCode = String.fromCharCode;
      var $fromCodePoint = String.fromCodePoint;
      _export(_export.S + _export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), "String", {
        fromCodePoint: function fromCodePoint2(x) {
          var arguments$1 = arguments;
          var res = [];
          var aLen = arguments.length;
          var i = 0;
          var code;
          while (aLen > i) {
            code = +arguments$1[i++];
            if (_toAbsoluteIndex(code, 1114111) !== code) {
              throw RangeError(code + " is not a valid code point");
            }
            res.push(
              code < 65536 ? fromCharCode(code) : fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320)
            );
          }
          return res.join("");
        }
      });
      var fromCodePoint = _core.String.fromCodePoint;
      var Space_Separator = /[\u1680\u2000-\u200A\u202F\u205F\u3000]/;
      var ID_Start = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/;
      var ID_Continue = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/;
      var unicode = {
        Space_Separator,
        ID_Start,
        ID_Continue
      };
      var util = {
        isSpaceSeparator: function isSpaceSeparator(c2) {
          return typeof c2 === "string" && unicode.Space_Separator.test(c2);
        },
        isIdStartChar: function isIdStartChar(c2) {
          return typeof c2 === "string" && (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z" || c2 === "$" || c2 === "_" || unicode.ID_Start.test(c2));
        },
        isIdContinueChar: function isIdContinueChar(c2) {
          return typeof c2 === "string" && (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z" || c2 >= "0" && c2 <= "9" || c2 === "$" || c2 === "_" || c2 === "\u200C" || c2 === "\u200D" || unicode.ID_Continue.test(c2));
        },
        isDigit: function isDigit(c2) {
          return typeof c2 === "string" && /[0-9]/.test(c2);
        },
        isHexDigit: function isHexDigit(c2) {
          return typeof c2 === "string" && /[0-9A-Fa-f]/.test(c2);
        }
      };
      var source2;
      var parseState;
      var stack;
      var pos;
      var line;
      var column;
      var token;
      var key;
      var root;
      var parse2 = function parse3(text, reviver) {
        source2 = String(text);
        parseState = "start";
        stack = [];
        pos = 0;
        line = 1;
        column = 0;
        token = void 0;
        key = void 0;
        root = void 0;
        do {
          token = lex();
          parseStates[parseState]();
        } while (token.type !== "eof");
        if (typeof reviver === "function") {
          return internalize({ "": root }, "", reviver);
        }
        return root;
      };
      function internalize(holder, name, reviver) {
        var value = holder[name];
        if (value != null && typeof value === "object") {
          if (Array.isArray(value)) {
            for (var i = 0; i < value.length; i++) {
              var key2 = String(i);
              var replacement = internalize(value, key2, reviver);
              if (replacement === void 0) {
                delete value[key2];
              } else {
                Object.defineProperty(value, key2, {
                  value: replacement,
                  writable: true,
                  enumerable: true,
                  configurable: true
                });
              }
            }
          } else {
            for (var key$1 in value) {
              var replacement$1 = internalize(value, key$1, reviver);
              if (replacement$1 === void 0) {
                delete value[key$1];
              } else {
                Object.defineProperty(value, key$1, {
                  value: replacement$1,
                  writable: true,
                  enumerable: true,
                  configurable: true
                });
              }
            }
          }
        }
        return reviver.call(holder, name, value);
      }
      var lexState;
      var buffer;
      var doubleQuote;
      var sign;
      var c;
      function lex() {
        lexState = "default";
        buffer = "";
        doubleQuote = false;
        sign = 1;
        for (; ; ) {
          c = peek();
          var token2 = lexStates[lexState]();
          if (token2) {
            return token2;
          }
        }
      }
      function peek() {
        if (source2[pos]) {
          return String.fromCodePoint(source2.codePointAt(pos));
        }
      }
      function read() {
        var c2 = peek();
        if (c2 === "\n") {
          line++;
          column = 0;
        } else if (c2) {
          column += c2.length;
        } else {
          column++;
        }
        if (c2) {
          pos += c2.length;
        }
        return c2;
      }
      var lexStates = {
        default: function default$1() {
          switch (c) {
            case "	":
            case "\v":
            case "\f":
            case " ":
            case "\xA0":
            case "\uFEFF":
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
              read();
              return;
            case "/":
              read();
              lexState = "comment";
              return;
            case void 0:
              read();
              return newToken("eof");
          }
          if (util.isSpaceSeparator(c)) {
            read();
            return;
          }
          return lexStates[parseState]();
        },
        comment: function comment() {
          switch (c) {
            case "*":
              read();
              lexState = "multiLineComment";
              return;
            case "/":
              read();
              lexState = "singleLineComment";
              return;
          }
          throw invalidChar(read());
        },
        multiLineComment: function multiLineComment() {
          switch (c) {
            case "*":
              read();
              lexState = "multiLineCommentAsterisk";
              return;
            case void 0:
              throw invalidChar(read());
          }
          read();
        },
        multiLineCommentAsterisk: function multiLineCommentAsterisk() {
          switch (c) {
            case "*":
              read();
              return;
            case "/":
              read();
              lexState = "default";
              return;
            case void 0:
              throw invalidChar(read());
          }
          read();
          lexState = "multiLineComment";
        },
        singleLineComment: function singleLineComment() {
          switch (c) {
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
              read();
              lexState = "default";
              return;
            case void 0:
              read();
              return newToken("eof");
          }
          read();
        },
        value: function value() {
          switch (c) {
            case "{":
            case "[":
              return newToken("punctuator", read());
            case "n":
              read();
              literal("ull");
              return newToken("null", null);
            case "t":
              read();
              literal("rue");
              return newToken("boolean", true);
            case "f":
              read();
              literal("alse");
              return newToken("boolean", false);
            case "-":
            case "+":
              if (read() === "-") {
                sign = -1;
              }
              lexState = "sign";
              return;
            case ".":
              buffer = read();
              lexState = "decimalPointLeading";
              return;
            case "0":
              buffer = read();
              lexState = "zero";
              return;
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              buffer = read();
              lexState = "decimalInteger";
              return;
            case "I":
              read();
              literal("nfinity");
              return newToken("numeric", Infinity);
            case "N":
              read();
              literal("aN");
              return newToken("numeric", NaN);
            case '"':
            case "'":
              doubleQuote = read() === '"';
              buffer = "";
              lexState = "string";
              return;
          }
          throw invalidChar(read());
        },
        identifierNameStartEscape: function identifierNameStartEscape() {
          if (c !== "u") {
            throw invalidChar(read());
          }
          read();
          var u = unicodeEscape();
          switch (u) {
            case "$":
            case "_":
              break;
            default:
              if (!util.isIdStartChar(u)) {
                throw invalidIdentifier();
              }
              break;
          }
          buffer += u;
          lexState = "identifierName";
        },
        identifierName: function identifierName() {
          switch (c) {
            case "$":
            case "_":
            case "\u200C":
            case "\u200D":
              buffer += read();
              return;
            case "\\":
              read();
              lexState = "identifierNameEscape";
              return;
          }
          if (util.isIdContinueChar(c)) {
            buffer += read();
            return;
          }
          return newToken("identifier", buffer);
        },
        identifierNameEscape: function identifierNameEscape() {
          if (c !== "u") {
            throw invalidChar(read());
          }
          read();
          var u = unicodeEscape();
          switch (u) {
            case "$":
            case "_":
            case "\u200C":
            case "\u200D":
              break;
            default:
              if (!util.isIdContinueChar(u)) {
                throw invalidIdentifier();
              }
              break;
          }
          buffer += u;
          lexState = "identifierName";
        },
        sign: function sign$1() {
          switch (c) {
            case ".":
              buffer = read();
              lexState = "decimalPointLeading";
              return;
            case "0":
              buffer = read();
              lexState = "zero";
              return;
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              buffer = read();
              lexState = "decimalInteger";
              return;
            case "I":
              read();
              literal("nfinity");
              return newToken("numeric", sign * Infinity);
            case "N":
              read();
              literal("aN");
              return newToken("numeric", NaN);
          }
          throw invalidChar(read());
        },
        zero: function zero() {
          switch (c) {
            case ".":
              buffer += read();
              lexState = "decimalPoint";
              return;
            case "e":
            case "E":
              buffer += read();
              lexState = "decimalExponent";
              return;
            case "x":
            case "X":
              buffer += read();
              lexState = "hexadecimal";
              return;
          }
          return newToken("numeric", sign * 0);
        },
        decimalInteger: function decimalInteger() {
          switch (c) {
            case ".":
              buffer += read();
              lexState = "decimalPoint";
              return;
            case "e":
            case "E":
              buffer += read();
              lexState = "decimalExponent";
              return;
          }
          if (util.isDigit(c)) {
            buffer += read();
            return;
          }
          return newToken("numeric", sign * Number(buffer));
        },
        decimalPointLeading: function decimalPointLeading() {
          if (util.isDigit(c)) {
            buffer += read();
            lexState = "decimalFraction";
            return;
          }
          throw invalidChar(read());
        },
        decimalPoint: function decimalPoint() {
          switch (c) {
            case "e":
            case "E":
              buffer += read();
              lexState = "decimalExponent";
              return;
          }
          if (util.isDigit(c)) {
            buffer += read();
            lexState = "decimalFraction";
            return;
          }
          return newToken("numeric", sign * Number(buffer));
        },
        decimalFraction: function decimalFraction() {
          switch (c) {
            case "e":
            case "E":
              buffer += read();
              lexState = "decimalExponent";
              return;
          }
          if (util.isDigit(c)) {
            buffer += read();
            return;
          }
          return newToken("numeric", sign * Number(buffer));
        },
        decimalExponent: function decimalExponent() {
          switch (c) {
            case "+":
            case "-":
              buffer += read();
              lexState = "decimalExponentSign";
              return;
          }
          if (util.isDigit(c)) {
            buffer += read();
            lexState = "decimalExponentInteger";
            return;
          }
          throw invalidChar(read());
        },
        decimalExponentSign: function decimalExponentSign() {
          if (util.isDigit(c)) {
            buffer += read();
            lexState = "decimalExponentInteger";
            return;
          }
          throw invalidChar(read());
        },
        decimalExponentInteger: function decimalExponentInteger() {
          if (util.isDigit(c)) {
            buffer += read();
            return;
          }
          return newToken("numeric", sign * Number(buffer));
        },
        hexadecimal: function hexadecimal() {
          if (util.isHexDigit(c)) {
            buffer += read();
            lexState = "hexadecimalInteger";
            return;
          }
          throw invalidChar(read());
        },
        hexadecimalInteger: function hexadecimalInteger() {
          if (util.isHexDigit(c)) {
            buffer += read();
            return;
          }
          return newToken("numeric", sign * Number(buffer));
        },
        string: function string() {
          switch (c) {
            case "\\":
              read();
              buffer += escape();
              return;
            case '"':
              if (doubleQuote) {
                read();
                return newToken("string", buffer);
              }
              buffer += read();
              return;
            case "'":
              if (!doubleQuote) {
                read();
                return newToken("string", buffer);
              }
              buffer += read();
              return;
            case "\n":
            case "\r":
              throw invalidChar(read());
            case "\u2028":
            case "\u2029":
              separatorChar(c);
              break;
            case void 0:
              throw invalidChar(read());
          }
          buffer += read();
        },
        start: function start() {
          switch (c) {
            case "{":
            case "[":
              return newToken("punctuator", read());
          }
          lexState = "value";
        },
        beforePropertyName: function beforePropertyName() {
          switch (c) {
            case "$":
            case "_":
              buffer = read();
              lexState = "identifierName";
              return;
            case "\\":
              read();
              lexState = "identifierNameStartEscape";
              return;
            case "}":
              return newToken("punctuator", read());
            case '"':
            case "'":
              doubleQuote = read() === '"';
              lexState = "string";
              return;
          }
          if (util.isIdStartChar(c)) {
            buffer += read();
            lexState = "identifierName";
            return;
          }
          throw invalidChar(read());
        },
        afterPropertyName: function afterPropertyName() {
          if (c === ":") {
            return newToken("punctuator", read());
          }
          throw invalidChar(read());
        },
        beforePropertyValue: function beforePropertyValue() {
          lexState = "value";
        },
        afterPropertyValue: function afterPropertyValue() {
          switch (c) {
            case ",":
            case "}":
              return newToken("punctuator", read());
          }
          throw invalidChar(read());
        },
        beforeArrayValue: function beforeArrayValue() {
          if (c === "]") {
            return newToken("punctuator", read());
          }
          lexState = "value";
        },
        afterArrayValue: function afterArrayValue() {
          switch (c) {
            case ",":
            case "]":
              return newToken("punctuator", read());
          }
          throw invalidChar(read());
        },
        end: function end() {
          throw invalidChar(read());
        }
      };
      function newToken(type, value) {
        return {
          type,
          value,
          line,
          column
        };
      }
      function literal(s) {
        for (var i = 0, list = s; i < list.length; i += 1) {
          var c2 = list[i];
          var p = peek();
          if (p !== c2) {
            throw invalidChar(read());
          }
          read();
        }
      }
      function escape() {
        var c2 = peek();
        switch (c2) {
          case "b":
            read();
            return "\b";
          case "f":
            read();
            return "\f";
          case "n":
            read();
            return "\n";
          case "r":
            read();
            return "\r";
          case "t":
            read();
            return "	";
          case "v":
            read();
            return "\v";
          case "0":
            read();
            if (util.isDigit(peek())) {
              throw invalidChar(read());
            }
            return "\0";
          case "x":
            read();
            return hexEscape();
          case "u":
            read();
            return unicodeEscape();
          case "\n":
          case "\u2028":
          case "\u2029":
            read();
            return "";
          case "\r":
            read();
            if (peek() === "\n") {
              read();
            }
            return "";
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
            throw invalidChar(read());
          case void 0:
            throw invalidChar(read());
        }
        return read();
      }
      function hexEscape() {
        var buffer2 = "";
        var c2 = peek();
        if (!util.isHexDigit(c2)) {
          throw invalidChar(read());
        }
        buffer2 += read();
        c2 = peek();
        if (!util.isHexDigit(c2)) {
          throw invalidChar(read());
        }
        buffer2 += read();
        return String.fromCodePoint(parseInt(buffer2, 16));
      }
      function unicodeEscape() {
        var buffer2 = "";
        var count = 4;
        while (count-- > 0) {
          var c2 = peek();
          if (!util.isHexDigit(c2)) {
            throw invalidChar(read());
          }
          buffer2 += read();
        }
        return String.fromCodePoint(parseInt(buffer2, 16));
      }
      var parseStates = {
        start: function start() {
          if (token.type === "eof") {
            throw invalidEOF();
          }
          push();
        },
        beforePropertyName: function beforePropertyName() {
          switch (token.type) {
            case "identifier":
            case "string":
              key = token.value;
              parseState = "afterPropertyName";
              return;
            case "punctuator":
              pop();
              return;
            case "eof":
              throw invalidEOF();
          }
        },
        afterPropertyName: function afterPropertyName() {
          if (token.type === "eof") {
            throw invalidEOF();
          }
          parseState = "beforePropertyValue";
        },
        beforePropertyValue: function beforePropertyValue() {
          if (token.type === "eof") {
            throw invalidEOF();
          }
          push();
        },
        beforeArrayValue: function beforeArrayValue() {
          if (token.type === "eof") {
            throw invalidEOF();
          }
          if (token.type === "punctuator" && token.value === "]") {
            pop();
            return;
          }
          push();
        },
        afterPropertyValue: function afterPropertyValue() {
          if (token.type === "eof") {
            throw invalidEOF();
          }
          switch (token.value) {
            case ",":
              parseState = "beforePropertyName";
              return;
            case "}":
              pop();
          }
        },
        afterArrayValue: function afterArrayValue() {
          if (token.type === "eof") {
            throw invalidEOF();
          }
          switch (token.value) {
            case ",":
              parseState = "beforeArrayValue";
              return;
            case "]":
              pop();
          }
        },
        end: function end() {
        }
      };
      function push() {
        var value;
        switch (token.type) {
          case "punctuator":
            switch (token.value) {
              case "{":
                value = {};
                break;
              case "[":
                value = [];
                break;
            }
            break;
          case "null":
          case "boolean":
          case "numeric":
          case "string":
            value = token.value;
            break;
        }
        if (root === void 0) {
          root = value;
        } else {
          var parent = stack[stack.length - 1];
          if (Array.isArray(parent)) {
            parent.push(value);
          } else {
            Object.defineProperty(parent, key, {
              value,
              writable: true,
              enumerable: true,
              configurable: true
            });
          }
        }
        if (value !== null && typeof value === "object") {
          stack.push(value);
          if (Array.isArray(value)) {
            parseState = "beforeArrayValue";
          } else {
            parseState = "beforePropertyName";
          }
        } else {
          var current = stack[stack.length - 1];
          if (current == null) {
            parseState = "end";
          } else if (Array.isArray(current)) {
            parseState = "afterArrayValue";
          } else {
            parseState = "afterPropertyValue";
          }
        }
      }
      function pop() {
        stack.pop();
        var current = stack[stack.length - 1];
        if (current == null) {
          parseState = "end";
        } else if (Array.isArray(current)) {
          parseState = "afterArrayValue";
        } else {
          parseState = "afterPropertyValue";
        }
      }
      function invalidChar(c2) {
        if (c2 === void 0) {
          return syntaxError("JSON5: invalid end of input at " + line + ":" + column);
        }
        return syntaxError("JSON5: invalid character '" + formatChar(c2) + "' at " + line + ":" + column);
      }
      function invalidEOF() {
        return syntaxError("JSON5: invalid end of input at " + line + ":" + column);
      }
      function invalidIdentifier() {
        column -= 5;
        return syntaxError("JSON5: invalid identifier character at " + line + ":" + column);
      }
      function separatorChar(c2) {
        console.warn("JSON5: '" + formatChar(c2) + "' in strings is not valid ECMAScript; consider escaping");
      }
      function formatChar(c2) {
        var replacements = {
          "'": "\\'",
          '"': '\\"',
          "\\": "\\\\",
          "\b": "\\b",
          "\f": "\\f",
          "\n": "\\n",
          "\r": "\\r",
          "	": "\\t",
          "\v": "\\v",
          "\0": "\\0",
          "\u2028": "\\u2028",
          "\u2029": "\\u2029"
        };
        if (replacements[c2]) {
          return replacements[c2];
        }
        if (c2 < " ") {
          var hexString = c2.charCodeAt(0).toString(16);
          return "\\x" + ("00" + hexString).substring(hexString.length);
        }
        return c2;
      }
      function syntaxError(message) {
        var err = new SyntaxError(message);
        err.lineNumber = line;
        err.columnNumber = column;
        return err;
      }
      var stringify = function stringify2(value, replacer, space) {
        var stack2 = [];
        var indent = "";
        var propertyList;
        var replacerFunc;
        var gap = "";
        var quote;
        if (replacer != null && typeof replacer === "object" && !Array.isArray(replacer)) {
          space = replacer.space;
          quote = replacer.quote;
          replacer = replacer.replacer;
        }
        if (typeof replacer === "function") {
          replacerFunc = replacer;
        } else if (Array.isArray(replacer)) {
          propertyList = [];
          for (var i = 0, list = replacer; i < list.length; i += 1) {
            var v = list[i];
            var item = void 0;
            if (typeof v === "string") {
              item = v;
            } else if (typeof v === "number" || v instanceof String || v instanceof Number) {
              item = String(v);
            }
            if (item !== void 0 && propertyList.indexOf(item) < 0) {
              propertyList.push(item);
            }
          }
        }
        if (space instanceof Number) {
          space = Number(space);
        } else if (space instanceof String) {
          space = String(space);
        }
        if (typeof space === "number") {
          if (space > 0) {
            space = Math.min(10, Math.floor(space));
            gap = "          ".substr(0, space);
          }
        } else if (typeof space === "string") {
          gap = space.substr(0, 10);
        }
        return serializeProperty("", { "": value });
        function serializeProperty(key2, holder) {
          var value2 = holder[key2];
          if (value2 != null) {
            if (typeof value2.toJSON5 === "function") {
              value2 = value2.toJSON5(key2);
            } else if (typeof value2.toJSON === "function") {
              value2 = value2.toJSON(key2);
            }
          }
          if (replacerFunc) {
            value2 = replacerFunc.call(holder, key2, value2);
          }
          if (value2 instanceof Number) {
            value2 = Number(value2);
          } else if (value2 instanceof String) {
            value2 = String(value2);
          } else if (value2 instanceof Boolean) {
            value2 = value2.valueOf();
          }
          switch (value2) {
            case null:
              return "null";
            case true:
              return "true";
            case false:
              return "false";
          }
          if (typeof value2 === "string") {
            return quoteString(value2, false);
          }
          if (typeof value2 === "number") {
            return String(value2);
          }
          if (typeof value2 === "object") {
            return Array.isArray(value2) ? serializeArray(value2) : serializeObject(value2);
          }
          return void 0;
        }
        function quoteString(value2) {
          var quotes = {
            "'": 0.1,
            '"': 0.2
          };
          var replacements = {
            "'": "\\'",
            '"': '\\"',
            "\\": "\\\\",
            "\b": "\\b",
            "\f": "\\f",
            "\n": "\\n",
            "\r": "\\r",
            "	": "\\t",
            "\v": "\\v",
            "\0": "\\0",
            "\u2028": "\\u2028",
            "\u2029": "\\u2029"
          };
          var product = "";
          for (var i2 = 0; i2 < value2.length; i2++) {
            var c2 = value2[i2];
            switch (c2) {
              case "'":
              case '"':
                quotes[c2]++;
                product += c2;
                continue;
              case "\0":
                if (util.isDigit(value2[i2 + 1])) {
                  product += "\\x00";
                  continue;
                }
            }
            if (replacements[c2]) {
              product += replacements[c2];
              continue;
            }
            if (c2 < " ") {
              var hexString = c2.charCodeAt(0).toString(16);
              product += "\\x" + ("00" + hexString).substring(hexString.length);
              continue;
            }
            product += c2;
          }
          var quoteChar = quote || Object.keys(quotes).reduce(function(a, b) {
            return quotes[a] < quotes[b] ? a : b;
          });
          product = product.replace(new RegExp(quoteChar, "g"), replacements[quoteChar]);
          return quoteChar + product + quoteChar;
        }
        function serializeObject(value2) {
          if (stack2.indexOf(value2) >= 0) {
            throw TypeError("Converting circular structure to JSON5");
          }
          stack2.push(value2);
          var stepback = indent;
          indent = indent + gap;
          var keys = propertyList || Object.keys(value2);
          var partial = [];
          for (var i2 = 0, list2 = keys; i2 < list2.length; i2 += 1) {
            var key2 = list2[i2];
            var propertyString = serializeProperty(key2, value2);
            if (propertyString !== void 0) {
              var member = serializeKey(key2) + ":";
              if (gap !== "") {
                member += " ";
              }
              member += propertyString;
              partial.push(member);
            }
          }
          var final;
          if (partial.length === 0) {
            final = "{}";
          } else {
            var properties;
            if (gap === "") {
              properties = partial.join(",");
              final = "{" + properties + "}";
            } else {
              var separator = ",\n" + indent;
              properties = partial.join(separator);
              final = "{\n" + indent + properties + ",\n" + stepback + "}";
            }
          }
          stack2.pop();
          indent = stepback;
          return final;
        }
        function serializeKey(key2) {
          if (key2.length === 0) {
            return quoteString(key2, true);
          }
          var firstChar = String.fromCodePoint(key2.codePointAt(0));
          if (!util.isIdStartChar(firstChar)) {
            return quoteString(key2, true);
          }
          for (var i2 = firstChar.length; i2 < key2.length; i2++) {
            if (!util.isIdContinueChar(String.fromCodePoint(key2.codePointAt(i2)))) {
              return quoteString(key2, true);
            }
          }
          return key2;
        }
        function serializeArray(value2) {
          if (stack2.indexOf(value2) >= 0) {
            throw TypeError("Converting circular structure to JSON5");
          }
          stack2.push(value2);
          var stepback = indent;
          indent = indent + gap;
          var partial = [];
          for (var i2 = 0; i2 < value2.length; i2++) {
            var propertyString = serializeProperty(String(i2), value2);
            partial.push(propertyString !== void 0 ? propertyString : "null");
          }
          var final;
          if (partial.length === 0) {
            final = "[]";
          } else {
            if (gap === "") {
              var properties = partial.join(",");
              final = "[" + properties + "]";
            } else {
              var separator = ",\n" + indent;
              var properties$1 = partial.join(separator);
              final = "[\n" + indent + properties$1 + ",\n" + stepback + "]";
            }
          }
          stack2.pop();
          indent = stepback;
          return final;
        }
      };
      var JSON5 = {
        parse: parse2,
        stringify
      };
      var lib = JSON5;
      var es5 = lib;
      return es5;
    });
  }
});

// node_modules/wavedrom/wavedrom.unpkg.js
var require_wavedrom_unpkg = __commonJS({
  "node_modules/wavedrom/wavedrom.unpkg.js"(exports, module) {
    (function(f) {
      if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f();
      } else if (typeof define === "function" && define.amd) {
        define([], f);
      } else {
        var g;
        if (typeof window !== "undefined") {
          g = window;
        } else if (typeof global !== "undefined") {
          g = global;
        } else if (typeof self !== "undefined") {
          g = self;
        } else {
          g = this;
        }
        g.wavedrom = f();
      }
    })(function() {
      var define, module, exports;
      return function() {
        function r(e, n, t) {
          function o(i2, f) {
            if (!n[i2]) {
              if (!e[i2]) {
                var c = "function" == typeof require && require;
                if (!f && c)
                  return c(i2, true);
                if (u)
                  return u(i2, true);
                var a = new Error("Cannot find module '" + i2 + "'");
                throw a.code = "MODULE_NOT_FOUND", a;
              }
              var p = n[i2] = { exports: {} };
              e[i2][0].call(p.exports, function(r2) {
                var n2 = e[i2][1][r2];
                return o(n2 || r2);
              }, p, p.exports, r, e, n, t);
            }
            return n[i2].exports;
          }
          for (var u = "function" == typeof require && require, i = 0; i < t.length; i++)
            o(t[i]);
          return o;
        }
        return r;
      }()({ 1: [function(require2, module2, exports2) {
        "use strict";
        function appendSaveAsDialog(index, output) {
          var div;
          var menu;
          function closeMenu(e) {
            var left = parseInt(menu.style.left, 10);
            var top = parseInt(menu.style.top, 10);
            if (e.x < left || e.x > left + menu.offsetWidth || e.y < top || e.y > top + menu.offsetHeight) {
              menu.parentNode.removeChild(menu);
              document.body.removeEventListener("mousedown", closeMenu, false);
            }
          }
          div = document.getElementById(output + index);
          div.childNodes[0].addEventListener(
            "contextmenu",
            function(e) {
              var list, savePng, saveSvg;
              menu = document.createElement("div");
              menu.className = "wavedromMenu";
              menu.style.top = e.y + "px";
              menu.style.left = e.x + "px";
              list = document.createElement("ul");
              savePng = document.createElement("li");
              savePng.innerHTML = "Save as PNG";
              list.appendChild(savePng);
              saveSvg = document.createElement("li");
              saveSvg.innerHTML = "Save as SVG";
              list.appendChild(saveSvg);
              menu.appendChild(list);
              document.body.appendChild(menu);
              savePng.addEventListener(
                "click",
                function() {
                  var html, firstDiv, svgdata, img, canvas, context, pngdata, a;
                  html = "";
                  if (index !== 0) {
                    firstDiv = document.getElementById(output + 0);
                    html += firstDiv.innerHTML.substring(166, firstDiv.innerHTML.indexOf('<g id="waves_0">'));
                  }
                  html = [div.innerHTML.slice(0, 166), html, div.innerHTML.slice(166)].join("");
                  svgdata = "data:image/svg+xml;base64," + btoa(html);
                  img = new Image();
                  img.src = svgdata;
                  canvas = document.createElement("canvas");
                  canvas.width = img.width;
                  canvas.height = img.height;
                  context = canvas.getContext("2d");
                  context.drawImage(img, 0, 0);
                  pngdata = canvas.toDataURL("image/png");
                  a = document.createElement("a");
                  a.href = pngdata;
                  a.download = "wavedrom.png";
                  a.click();
                  menu.parentNode.removeChild(menu);
                  document.body.removeEventListener("mousedown", closeMenu, false);
                },
                false
              );
              saveSvg.addEventListener(
                "click",
                function() {
                  var html, firstDiv, svgdata, a;
                  html = "";
                  if (index !== 0) {
                    firstDiv = document.getElementById(output + 0);
                    html += firstDiv.innerHTML.substring(166, firstDiv.innerHTML.indexOf('<g id="waves_0">'));
                  }
                  html = [div.innerHTML.slice(0, 166), html, div.innerHTML.slice(166)].join("");
                  svgdata = "data:image/svg+xml;base64," + btoa(html);
                  a = document.createElement("a");
                  a.href = svgdata;
                  a.download = "wavedrom.svg";
                  a.click();
                  menu.parentNode.removeChild(menu);
                  document.body.removeEventListener("mousedown", closeMenu, false);
                },
                false
              );
              menu.addEventListener(
                "contextmenu",
                function(ee) {
                  ee.preventDefault();
                },
                false
              );
              document.body.addEventListener("mousedown", closeMenu, false);
              e.preventDefault();
            },
            false
          );
        }
        module2.exports = appendSaveAsDialog;
      }, {}], 2: [function(require2, module2, exports2) {
        "use strict";
        function arcShape(Edge, from, to) {
          var dx = to.x - from.x;
          var dy = to.y - from.y;
          var lx = (from.x + to.x) / 2;
          var ly = (from.y + to.y) / 2;
          var d;
          var style;
          switch (Edge.shape) {
            case "-": {
              break;
            }
            case "~": {
              d = "M " + from.x + "," + from.y + " c " + 0.7 * dx + ", 0 " + 0.3 * dx + ", " + dy + " " + dx + ", " + dy;
              break;
            }
            case "-~": {
              d = "M " + from.x + "," + from.y + " c " + 0.7 * dx + ", 0 " + dx + ", " + dy + " " + dx + ", " + dy;
              if (Edge.label) {
                lx = from.x + (to.x - from.x) * 0.75;
              }
              break;
            }
            case "~-": {
              d = "M " + from.x + "," + from.y + " c " + 0 + ", 0 " + 0.3 * dx + ", " + dy + " " + dx + ", " + dy;
              if (Edge.label) {
                lx = from.x + (to.x - from.x) * 0.25;
              }
              break;
            }
            case "-|": {
              d = "m " + from.x + "," + from.y + " " + dx + ",0 0," + dy;
              if (Edge.label) {
                lx = to.x;
              }
              break;
            }
            case "|-": {
              d = "m " + from.x + "," + from.y + " 0," + dy + " " + dx + ",0";
              if (Edge.label) {
                lx = from.x;
              }
              break;
            }
            case "-|-": {
              d = "m " + from.x + "," + from.y + " " + dx / 2 + ",0 0," + dy + " " + dx / 2 + ",0";
              break;
            }
            case "->": {
              style = "marker-end:url(#arrowhead);stroke:#0041c4;stroke-width:1;fill:none";
              break;
            }
            case "~>": {
              style = "marker-end:url(#arrowhead);stroke:#0041c4;stroke-width:1;fill:none";
              d = "M " + from.x + "," + from.y + " c " + 0.7 * dx + ", 0 " + 0.3 * dx + ", " + dy + " " + dx + ", " + dy;
              break;
            }
            case "-~>": {
              style = "marker-end:url(#arrowhead);stroke:#0041c4;stroke-width:1;fill:none";
              d = "M " + from.x + "," + from.y + " c " + 0.7 * dx + ", 0 " + dx + ", " + dy + " " + dx + ", " + dy;
              if (Edge.label) {
                lx = from.x + (to.x - from.x) * 0.75;
              }
              break;
            }
            case "~->": {
              style = "marker-end:url(#arrowhead);stroke:#0041c4;stroke-width:1;fill:none";
              d = "M " + from.x + "," + from.y + " c " + 0 + ", 0 " + 0.3 * dx + ", " + dy + " " + dx + ", " + dy;
              if (Edge.label) {
                lx = from.x + (to.x - from.x) * 0.25;
              }
              break;
            }
            case "-|>": {
              style = "marker-end:url(#arrowhead);stroke:#0041c4;stroke-width:1;fill:none";
              d = "m " + from.x + "," + from.y + " " + dx + ",0 0," + dy;
              if (Edge.label) {
                lx = to.x;
              }
              break;
            }
            case "|->": {
              style = "marker-end:url(#arrowhead);stroke:#0041c4;stroke-width:1;fill:none";
              d = "m " + from.x + "," + from.y + " 0," + dy + " " + dx + ",0";
              if (Edge.label) {
                lx = from.x;
              }
              break;
            }
            case "-|->": {
              style = "marker-end:url(#arrowhead);stroke:#0041c4;stroke-width:1;fill:none";
              d = "m " + from.x + "," + from.y + " " + dx / 2 + ",0 0," + dy + " " + dx / 2 + ",0";
              break;
            }
            case "<->": {
              style = "marker-end:url(#arrowhead);marker-start:url(#arrowtail);stroke:#0041c4;stroke-width:1;fill:none";
              break;
            }
            case "<~>": {
              style = "marker-end:url(#arrowhead);marker-start:url(#arrowtail);stroke:#0041c4;stroke-width:1;fill:none";
              d = "M " + from.x + "," + from.y + " c " + 0.7 * dx + ", 0 " + 0.3 * dx + ", " + dy + " " + dx + ", " + dy;
              break;
            }
            case "<-~>": {
              style = "marker-end:url(#arrowhead);marker-start:url(#arrowtail);stroke:#0041c4;stroke-width:1;fill:none";
              d = "M " + from.x + "," + from.y + " c " + 0.7 * dx + ", 0 " + dx + ", " + dy + " " + dx + ", " + dy;
              if (Edge.label) {
                lx = from.x + (to.x - from.x) * 0.75;
              }
              break;
            }
            case "<-|>": {
              style = "marker-end:url(#arrowhead);marker-start:url(#arrowtail);stroke:#0041c4;stroke-width:1;fill:none";
              d = "m " + from.x + "," + from.y + " " + dx + ",0 0," + dy;
              if (Edge.label) {
                lx = to.x;
              }
              break;
            }
            case "<-|->": {
              style = "marker-end:url(#arrowhead);marker-start:url(#arrowtail);stroke:#0041c4;stroke-width:1;fill:none";
              d = "m " + from.x + "," + from.y + " " + dx / 2 + ",0 0," + dy + " " + dx / 2 + ",0";
              break;
            }
            case "+": {
              style = "marker-end:url(#tee);marker-start:url(#tee);fill:none;stroke:#00F;stroke-width:1";
              break;
            }
            default: {
              style = "fill:none;stroke:#F00;stroke-width:1";
            }
          }
          return {
            lx,
            ly,
            d,
            style
          };
        }
        module2.exports = arcShape;
      }, {}], 3: [function(require2, module2, exports2) {
        module2.exports = { "chars": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 47, 74, 74, 118, 89, 25, 44, 44, 52, 78, 37, 44, 37, 37, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 37, 37, 78, 78, 78, 74, 135, 89, 89, 96, 96, 89, 81, 103, 96, 37, 67, 89, 74, 109, 96, 103, 89, 103, 96, 89, 81, 96, 89, 127, 89, 87, 81, 37, 37, 37, 61, 74, 44, 74, 74, 67, 74, 74, 37, 74, 74, 30, 30, 67, 30, 112, 74, 74, 74, 74, 44, 67, 37, 74, 67, 95, 66, 65, 67, 44, 34, 44, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 43, 74, 74, 74, 74, 34, 74, 44, 98, 49, 74, 78, 0, 98, 73, 53, 73, 44, 44, 44, 77, 71, 37, 44, 44, 49, 74, 111, 111, 111, 81, 89, 89, 89, 89, 89, 89, 133, 96, 89, 89, 89, 89, 37, 37, 37, 37, 96, 96, 103, 103, 103, 103, 103, 78, 103, 96, 96, 96, 96, 87, 89, 81, 74, 74, 74, 74, 74, 74, 118, 67, 74, 74, 74, 74, 36, 36, 36, 36, 74, 74, 74, 74, 74, 74, 74, 73, 81, 74, 74, 74, 74, 65, 74, 65, 89, 74, 89, 74, 89, 74, 96, 67, 96, 67, 96, 67, 96, 67, 96, 82, 96, 74, 89, 74, 89, 74, 89, 74, 89, 74, 89, 74, 103, 74, 103, 74, 103, 74, 103, 74, 96, 74, 96, 74, 37, 36, 37, 36, 37, 36, 37, 30, 37, 36, 98, 59, 67, 30, 89, 67, 67, 74, 30, 74, 30, 74, 39, 74, 44, 74, 30, 96, 74, 96, 74, 96, 74, 80, 96, 74, 103, 74, 103, 74, 103, 74, 133, 126, 96, 44, 96, 44, 96, 44, 89, 67, 89, 67, 89, 67, 89, 67, 81, 38, 81, 50, 81, 37, 96, 74, 96, 74, 96, 74, 96, 74, 96, 74, 96, 74, 127, 95, 87, 65, 87, 81, 67, 81, 67, 81, 67, 30, 84, 97, 91, 84, 91, 84, 94, 92, 73, 104, 109, 91, 84, 81, 84, 100, 82, 76, 74, 103, 91, 131, 47, 40, 99, 77, 37, 79, 130, 100, 84, 104, 114, 87, 126, 101, 87, 84, 93, 84, 69, 84, 46, 52, 82, 52, 82, 114, 89, 102, 96, 100, 98, 91, 70, 88, 88, 77, 70, 85, 89, 77, 67, 84, 39, 65, 61, 39, 189, 173, 153, 111, 105, 61, 123, 123, 106, 89, 74, 37, 30, 103, 74, 96, 74, 96, 74, 96, 74, 96, 74, 96, 74, 81, 91, 81, 91, 81, 130, 131, 102, 84, 103, 84, 87, 78, 104, 81, 104, 81, 88, 76, 37, 189, 173, 153, 103, 84, 148, 90, 100, 84, 89, 74, 133, 118, 103, 81], "other": 114 };
      }, {}], 4: [function(require2, module2, exports2) {
        "use strict";
        var onmlStringify = require2("onml/stringify.js");
        var w3 = require2("./w3.js");
        function createElement(arr) {
          arr[1].xmlns = w3.svg;
          arr[1]["xmlns:xlink"] = w3.xlink;
          var s1 = onmlStringify(arr);
          var parser = new DOMParser();
          var doc = parser.parseFromString(s1, "image/svg+xml");
          return doc.firstChild;
        }
        module2.exports = createElement;
      }, { "./w3.js": 34, "onml/stringify.js": 52 }], 5: [function(require2, module2, exports2) {
        "use strict";
        var eva2 = require2("./eva.js");
        var renderWaveForm = require2("./render-wave-form.js");
        function editorRefresh() {
          renderWaveForm(0, eva2("InputJSON_0"), "WaveDrom_Display_");
        }
        module2.exports = editorRefresh;
      }, { "./eva.js": 6, "./render-wave-form.js": 31 }], 6: [function(require, module, exports) {
        "use strict";
        function eva(id) {
          var TheTextBox, source;
          function erra(e) {
            return { signal: [{ name: ["tspan", ["tspan", { class: "error h5" }, "Error: "], e.message] }] };
          }
          TheTextBox = document.getElementById(id);
          if (TheTextBox.type && TheTextBox.type === "textarea") {
            try {
              source = eval("(" + TheTextBox.value + ")");
            } catch (e) {
              return erra(e);
            }
          } else {
            try {
              source = eval("(" + TheTextBox.innerHTML + ")");
            } catch (e) {
              return erra(e);
            }
          }
          if (Object.prototype.toString.call(source) !== "[object Object]") {
            return erra({ message: '[Semantic]: The root has to be an Object: "{signal:[...]}"' });
          }
          if (source.signal) {
            if (Object.prototype.toString.call(source.signal) !== "[object Array]") {
              return erra({ message: '[Semantic]: "signal" object has to be an Array "signal:[]"' });
            }
          } else if (source.assign) {
            if (Object.prototype.toString.call(source.assign) !== "[object Array]") {
              return erra({ message: '[Semantic]: "assign" object hasto be an Array "assign:[]"' });
            }
          } else if (source.reg) {
          } else {
            return erra({ message: '[Semantic]: "signal:[...]" or "assign:[...]" property is missing inside the root Object' });
          }
          return source;
        }
        module.exports = eva;
      }, {}], 7: [function(require2, module2, exports2) {
        "use strict";
        function findLaneMarkers(lanetext) {
          var gcount = 0, lcount = 0, ret = [];
          lanetext.forEach(function(e) {
            if (e === "vvv-2" || e === "vvv-3" || e === "vvv-4" || e === "vvv-5" || e === "vvv-6" || e === "vvv-7" || e === "vvv-8" || e === "vvv-9") {
              lcount += 1;
            } else {
              if (lcount !== 0) {
                ret.push(gcount - (lcount + 1) / 2);
                lcount = 0;
              }
            }
            gcount += 1;
          });
          if (lcount !== 0) {
            ret.push(gcount - (lcount + 1) / 2);
          }
          return ret;
        }
        module2.exports = findLaneMarkers;
      }, {}], 8: [function(require2, module2, exports2) {
        "use strict";
        function genBrick(texts, extra, times) {
          var i, j, R = [];
          if (texts.length === 4) {
            for (j = 0; j < times; j += 1) {
              R.push(texts[0]);
              for (i = 0; i < extra; i += 1) {
                R.push(texts[1]);
              }
              R.push(texts[2]);
              for (i = 0; i < extra; i += 1) {
                R.push(texts[3]);
              }
            }
            return R;
          }
          if (texts.length === 1) {
            texts.push(texts[0]);
          }
          R.push(texts[0]);
          for (i = 0; i < times * (2 * (extra + 1)) - 1; i += 1) {
            R.push(texts[1]);
          }
          return R;
        }
        module2.exports = genBrick;
      }, {}], 9: [function(require2, module2, exports2) {
        "use strict";
        var genBrick = require2("./gen-brick.js");
        function genFirstWaveBrick(text, extra, times) {
          var tmp;
          tmp = [];
          switch (text) {
            case "p":
              tmp = genBrick(["pclk", "111", "nclk", "000"], extra, times);
              break;
            case "n":
              tmp = genBrick(["nclk", "000", "pclk", "111"], extra, times);
              break;
            case "P":
              tmp = genBrick(["Pclk", "111", "nclk", "000"], extra, times);
              break;
            case "N":
              tmp = genBrick(["Nclk", "000", "pclk", "111"], extra, times);
              break;
            case "l":
            case "L":
            case "0":
              tmp = genBrick(["000"], extra, times);
              break;
            case "h":
            case "H":
            case "1":
              tmp = genBrick(["111"], extra, times);
              break;
            case "=":
              tmp = genBrick(["vvv-2"], extra, times);
              break;
            case "2":
              tmp = genBrick(["vvv-2"], extra, times);
              break;
            case "3":
              tmp = genBrick(["vvv-3"], extra, times);
              break;
            case "4":
              tmp = genBrick(["vvv-4"], extra, times);
              break;
            case "5":
              tmp = genBrick(["vvv-5"], extra, times);
              break;
            case "6":
              tmp = genBrick(["vvv-6"], extra, times);
              break;
            case "7":
              tmp = genBrick(["vvv-7"], extra, times);
              break;
            case "8":
              tmp = genBrick(["vvv-8"], extra, times);
              break;
            case "9":
              tmp = genBrick(["vvv-9"], extra, times);
              break;
            case "d":
              tmp = genBrick(["ddd"], extra, times);
              break;
            case "u":
              tmp = genBrick(["uuu"], extra, times);
              break;
            case "z":
              tmp = genBrick(["zzz"], extra, times);
              break;
            default:
              tmp = genBrick(["xxx"], extra, times);
              break;
          }
          return tmp;
        }
        module2.exports = genFirstWaveBrick;
      }, { "./gen-brick.js": 8 }], 10: [function(require2, module2, exports2) {
        "use strict";
        var genBrick = require2("./gen-brick.js");
        function genWaveBrick(text, extra, times) {
          var x1, x2, x3, y1, y2, x4, x5, x6, xclude, atext, tmp0, tmp1, tmp2, tmp3, tmp4;
          x1 = { p: "pclk", n: "nclk", P: "Pclk", N: "Nclk", h: "pclk", l: "nclk", H: "Pclk", L: "Nclk" };
          x2 = {
            "0": "0",
            "1": "1",
            "x": "x",
            "d": "d",
            "u": "u",
            "z": "z",
            "=": "v",
            "2": "v",
            "3": "v",
            "4": "v",
            "5": "v",
            "6": "v",
            "7": "v",
            "8": "v",
            "9": "v"
          };
          x3 = {
            "0": "",
            "1": "",
            "x": "",
            "d": "",
            "u": "",
            "z": "",
            "=": "-2",
            "2": "-2",
            "3": "-3",
            "4": "-4",
            "5": "-5",
            "6": "-6",
            "7": "-7",
            "8": "-8",
            "9": "-9"
          };
          y1 = {
            "p": "0",
            "n": "1",
            "P": "0",
            "N": "1",
            "h": "1",
            "l": "0",
            "H": "1",
            "L": "0",
            "0": "0",
            "1": "1",
            "x": "x",
            "d": "d",
            "u": "u",
            "z": "z",
            "=": "v",
            "2": "v",
            "3": "v",
            "4": "v",
            "5": "v",
            "6": "v",
            "7": "v",
            "8": "v",
            "9": "v"
          };
          y2 = {
            "p": "",
            "n": "",
            "P": "",
            "N": "",
            "h": "",
            "l": "",
            "H": "",
            "L": "",
            "0": "",
            "1": "",
            "x": "",
            "d": "",
            "u": "",
            "z": "",
            "=": "-2",
            "2": "-2",
            "3": "-3",
            "4": "-4",
            "5": "-5",
            "6": "-6",
            "7": "-7",
            "8": "-8",
            "9": "-9"
          };
          x4 = {
            "p": "111",
            "n": "000",
            "P": "111",
            "N": "000",
            "h": "111",
            "l": "000",
            "H": "111",
            "L": "000",
            "0": "000",
            "1": "111",
            "x": "xxx",
            "d": "ddd",
            "u": "uuu",
            "z": "zzz",
            "=": "vvv-2",
            "2": "vvv-2",
            "3": "vvv-3",
            "4": "vvv-4",
            "5": "vvv-5",
            "6": "vvv-6",
            "7": "vvv-7",
            "8": "vvv-8",
            "9": "vvv-9"
          };
          x5 = {
            p: "nclk",
            n: "pclk",
            P: "nclk",
            N: "pclk"
          };
          x6 = {
            p: "000",
            n: "111",
            P: "000",
            N: "111"
          };
          xclude = {
            "hp": "111",
            "Hp": "111",
            "ln": "000",
            "Ln": "000",
            "nh": "111",
            "Nh": "111",
            "pl": "000",
            "Pl": "000"
          };
          atext = text.split("");
          tmp0 = x4[atext[1]];
          tmp1 = x1[atext[1]];
          if (tmp1 === void 0) {
            tmp2 = x2[atext[1]];
            if (tmp2 === void 0) {
              return genBrick(["xxx"], extra, times);
            } else {
              tmp3 = y1[atext[0]];
              if (tmp3 === void 0) {
                return genBrick(["xxx"], extra, times);
              }
              return genBrick([tmp3 + "m" + tmp2 + y2[atext[0]] + x3[atext[1]], tmp0], extra, times);
            }
          } else {
            tmp4 = xclude[text];
            if (tmp4 !== void 0) {
              tmp1 = tmp4;
            }
            tmp2 = x5[atext[1]];
            if (tmp2 === void 0) {
              return genBrick([tmp1, tmp0], extra, times);
            } else {
              return genBrick([tmp1, tmp0, tmp2, x6[atext[1]]], extra, times);
            }
          }
        }
        module2.exports = genWaveBrick;
      }, { "./gen-brick.js": 8 }], 11: [function(require2, module2, exports2) {
        "use strict";
        var pkg = require2("../package.json");
        var processAll = require2("./process-all.js");
        var eva2 = require2("./eva.js");
        var renderWaveForm = require2("./render-wave-form.js");
        var renderWaveElement = require2("./render-wave-element.js");
        var renderAny = require2("./render-any.js");
        var editorRefresh = require2("./editor-refresh.js");
        var def = require2("../skins/default.js");
        var onmlStringify = require2("onml/stringify.js");
        exports2.version = pkg.version;
        exports2.processAll = processAll;
        exports2.eva = eva2;
        exports2.renderAny = renderAny;
        exports2.renderWaveForm = renderWaveForm;
        exports2.renderWaveElement = renderWaveElement;
        exports2.editorRefresh = editorRefresh;
        exports2.waveSkin = def;
        exports2.onml = {
          stringify: onmlStringify
        };
      }, { "../package.json": 78, "../skins/default.js": 79, "./editor-refresh.js": 5, "./eva.js": 6, "./process-all.js": 17, "./render-any.js": 19, "./render-wave-element.js": 30, "./render-wave-form.js": 31, "onml/stringify.js": 52 }], 12: [function(require2, module2, exports2) {
        "use strict";
        var w3 = require2("./w3.js");
        function insertSVGTemplate(index, source2, lane, waveSkin, content, lanes, groups, notFirstSignal) {
          var first, skin, e;
          for (first in waveSkin) {
            break;
          }
          skin = waveSkin.default || waveSkin[first];
          if (source2 && source2.config && source2.config.skin && waveSkin[source2.config.skin]) {
            skin = waveSkin[source2.config.skin];
          }
          if (notFirstSignal) {
            e = ["svg", { id: "svg", xmlns: w3.svg, "xmlns:xlink": w3.xlink }, ["g"]];
          } else {
            e = skin;
          }
          var width = lane.xg + lane.xs * (lane.xmax + 1);
          var height = content.length * lane.yo + lane.yh0 + lane.yh1 + lane.yf0 + lane.yf1;
          var body = e[e.length - 1];
          body[1] = { id: "waves_" + index };
          body[2] = ["g", {
            id: "lanes_" + index,
            transform: "translate(" + (lane.xg + 0.5) + ", " + (lane.yh0 + lane.yh1 + 0.5) + ")"
          }].concat(lanes);
          body[3] = ["g", {
            id: "groups_" + index
          }, groups];
          var head = e[1];
          head.id = "svgcontent_" + index;
          head.height = height;
          head.width = width;
          head.viewBox = "0 0 " + width + " " + height;
          head.overflow = "hidden";
          return e;
        }
        module2.exports = insertSVGTemplate;
      }, { "./w3.js": 34 }], 13: [function(require2, module2, exports2) {
        "use strict";
        var lane = {
          xs: 20,
          ys: 20,
          xg: 120,
          yh0: 0,
          yh1: 0,
          yf0: 0,
          yf1: 0,
          y0: 5,
          yo: 30,
          tgo: -10,
          ym: 15,
          xlabel: 6,
          xmax: 1,
          scale: 1,
          head: {},
          foot: {}
        };
        module2.exports = lane;
      }, {}], 14: [function(require2, module2, exports2) {
        "use strict";
        function parseConfig(source2, lane) {
          var hscale;
          function tonumber(x) {
            return x > 0 ? Math.round(x) : 1;
          }
          lane.hscale = 1;
          if (lane.hscale0) {
            lane.hscale = lane.hscale0;
          }
          if (source2 && source2.config && source2.config.hscale) {
            hscale = Math.round(tonumber(source2.config.hscale));
            if (hscale > 0) {
              if (hscale > 100) {
                hscale = 100;
              }
              lane.hscale = hscale;
            }
          }
          lane.yh0 = 0;
          lane.yh1 = 0;
          lane.head = source2.head;
          lane.xmin_cfg = 0;
          lane.xmax_cfg = 1e12;
          if (source2 && source2.config && source2.config.hbounds && source2.config.hbounds.length == 2) {
            source2.config.hbounds[0] = Math.floor(source2.config.hbounds[0]);
            source2.config.hbounds[1] = Math.ceil(source2.config.hbounds[1]);
            if (source2.config.hbounds[0] < source2.config.hbounds[1]) {
              lane.xmin_cfg = 2 * Math.floor(source2.config.hbounds[0]);
              lane.xmax_cfg = 2 * Math.floor(source2.config.hbounds[1]);
            }
          }
          if (source2 && source2.head) {
            if (source2.head.tick || source2.head.tick === 0 || source2.head.tock || source2.head.tock === 0) {
              lane.yh0 = 20;
            }
            if (source2.head.tick || source2.head.tick === 0) {
              source2.head.tick = source2.head.tick + lane.xmin_cfg / 2;
            }
            if (source2.head.tock || source2.head.tock === 0) {
              source2.head.tock = source2.head.tock + lane.xmin_cfg / 2;
            }
            if (source2.head.text) {
              lane.yh1 = 46;
              lane.head.text = source2.head.text;
            }
          }
          lane.yf0 = 0;
          lane.yf1 = 0;
          lane.foot = source2.foot;
          if (source2 && source2.foot) {
            if (source2.foot.tick || source2.foot.tick === 0 || source2.foot.tock || source2.foot.tock === 0) {
              lane.yf0 = 20;
            }
            if (source2.foot.tick || source2.foot.tick === 0) {
              source2.foot.tick = source2.foot.tick + lane.xmin_cfg / 2;
            }
            if (source2.foot.tock || source2.foot.tock === 0) {
              source2.foot.tock = source2.foot.tock + lane.xmin_cfg / 2;
            }
            if (source2.foot.text) {
              lane.yf1 = 46;
              lane.foot.text = source2.foot.text;
            }
          }
        }
        module2.exports = parseConfig;
      }, {}], 15: [function(require2, module2, exports2) {
        "use strict";
        var genFirstWaveBrick = require2("./gen-first-wave-brick.js");
        var genWaveBrick = require2("./gen-wave-brick.js");
        var findLaneMarkers = require2("./find-lane-markers.js");
        function parseWaveLane(src, extra, lane) {
          var Repeats, Top, Next, Stack = [], R = [], i, subCycle;
          var unseen_bricks = [], num_unseen_markers;
          Stack = src.split("");
          Next = Stack.shift();
          subCycle = false;
          Repeats = 1;
          while (Stack[0] === "." || Stack[0] === "|") {
            Stack.shift();
            Repeats += 1;
          }
          R = R.concat(genFirstWaveBrick(Next, extra, Repeats));
          while (Stack.length) {
            Top = Next;
            Next = Stack.shift();
            if (Next === "<") {
              subCycle = true;
              Next = Stack.shift();
            }
            if (Next === ">") {
              subCycle = false;
              Next = Stack.shift();
            }
            Repeats = 1;
            while (Stack[0] === "." || Stack[0] === "|") {
              Stack.shift();
              Repeats += 1;
            }
            if (subCycle) {
              R = R.concat(genWaveBrick(Top + Next, 0, Repeats - lane.period));
            } else {
              R = R.concat(genWaveBrick(Top + Next, extra, Repeats));
            }
          }
          for (i = 0; i < lane.phase; i += 1) {
            unseen_bricks.push(R.shift());
          }
          if (unseen_bricks.length > 0) {
            num_unseen_markers = findLaneMarkers(unseen_bricks).length;
            if (findLaneMarkers([unseen_bricks[unseen_bricks.length - 1]]).length == 1 && findLaneMarkers([R[0]]).length == 1) {
              num_unseen_markers -= 1;
            }
          } else {
            num_unseen_markers = 0;
          }
          return [R, num_unseen_markers];
        }
        module2.exports = parseWaveLane;
      }, { "./find-lane-markers.js": 7, "./gen-first-wave-brick.js": 9, "./gen-wave-brick.js": 10 }], 16: [function(require2, module2, exports2) {
        "use strict";
        var parseWaveLane = require2("./parse-wave-lane.js");
        function data_extract(e, num_unseen_markers) {
          var ret_data;
          ret_data = e.data;
          if (ret_data === void 0) {
            return null;
          }
          if (typeof ret_data === "string") {
            ret_data = ret_data.trim().split(/\s+/);
          }
          ret_data = ret_data.slice(num_unseen_markers);
          return ret_data;
        }
        function parseWaveLanes(sig, lane) {
          var content = [], tmp0 = [];
          sig.map(function(sigx) {
            var content_wave = null, parsed_wave_lane, num_unseen_markers, current = [];
            content.push(current);
            lane.period = sigx.period || 1;
            lane.phase = (sigx.phase ? sigx.phase * 2 : 0) + lane.xmin_cfg;
            tmp0[0] = sigx.name || " ";
            tmp0[1] = (sigx.phase || 0) + lane.xmin_cfg / 2;
            if (typeof sigx.wave === "string") {
              parsed_wave_lane = parseWaveLane(sigx.wave, lane.period * lane.hscale - 1, lane);
              content_wave = parsed_wave_lane[0];
              num_unseen_markers = parsed_wave_lane[1];
            }
            current.push(
              tmp0.slice(0),
              content_wave,
              data_extract(sigx, num_unseen_markers),
              sigx
            );
          });
          return content;
        }
        module2.exports = parseWaveLanes;
      }, { "./parse-wave-lane.js": 15 }], 17: [function(require2, module2, exports2) {
        "use strict";
        var eva2 = require2("./eva.js");
        var appendSaveAsDialog = require2("./append-save-as-dialog.js");
        var renderWaveForm = require2("./render-wave-form.js");
        function processAll() {
          var points, i, index, notFirstSignal, obj, node0;
          index = 0;
          points = document.querySelectorAll("*");
          for (i = 0; i < points.length; i++) {
            if (points.item(i).type && points.item(i).type.toLowerCase() === "wavedrom") {
              points.item(i).setAttribute("id", "InputJSON_" + index);
              node0 = document.createElement("div");
              node0.id = "WaveDrom_Display_" + index;
              points.item(i).parentNode.insertBefore(node0, points.item(i));
              index += 1;
            }
          }
          for (i = 0; i < index; i += 1) {
            obj = eva2("InputJSON_" + i);
            renderWaveForm(i, obj, "WaveDrom_Display_", notFirstSignal);
            if (obj && obj.signal && !notFirstSignal) {
              notFirstSignal = true;
            }
            appendSaveAsDialog(i, "WaveDrom_Display_");
          }
          document.head.innerHTML += '<style type="text/css">div.wavedromMenu{position:fixed;border:solid 1pt#CCCCCC;background-color:white;box-shadow:0px 10px 20px #808080;cursor:default;margin:0px;padding:0px;}div.wavedromMenu>ul{margin:0px;padding:0px;}div.wavedromMenu>ul>li{padding:2px 10px;list-style:none;}div.wavedromMenu>ul>li:hover{background-color:#b5d5ff;}</style>';
        }
        module2.exports = processAll;
      }, { "./append-save-as-dialog.js": 1, "./eva.js": 6, "./render-wave-form.js": 31 }], 18: [function(require2, module2, exports2) {
        "use strict";
        function rec(tmp, state) {
          var i, name, old = {}, delta = { "x": 10 };
          if (typeof tmp[0] === "string" || typeof tmp[0] === "number") {
            name = tmp[0];
            delta.x = 25;
          }
          state.x += delta.x;
          for (i = 0; i < tmp.length; i++) {
            if (typeof tmp[i] === "object") {
              if (Object.prototype.toString.call(tmp[i]) === "[object Array]") {
                old.y = state.y;
                state = rec(tmp[i], state);
                state.groups.push({ "x": state.xx, "y": old.y, "height": state.y - old.y, "name": state.name });
              } else {
                state.lanes.push(tmp[i]);
                state.width.push(state.x);
                state.y += 1;
              }
            }
          }
          state.xx = state.x;
          state.x -= delta.x;
          state.name = name;
          return state;
        }
        module2.exports = rec;
      }, {}], 19: [function(require2, module2, exports2) {
        "use strict";
        var renderAssign = require2("logidrom/lib/render-assign.js");
        var renderReg = require2("./render-reg.js");
        var renderSignal = require2("./render-signal.js");
        function renderAny(index, source2, waveSkin, notFirstSignal) {
          var res = source2.signal ? renderSignal(index, source2, waveSkin, notFirstSignal) : source2.assign ? renderAssign(index, source2) : source2.reg ? renderReg(index, source2) : ["div", {}];
          res[1].class = "WaveDrom";
          return res;
        }
        module2.exports = renderAny;
      }, { "./render-reg.js": 28, "./render-signal.js": 29, "logidrom/lib/render-assign.js": 46 }], 20: [function(require2, module2, exports2) {
        "use strict";
        var arcShape = require2("./arc-shape.js");
        var renderLabel = require2("./render-label.js");
        function renderArc(Edge, from, to, shapeProps) {
          return ["path", {
            id: "gmark_" + Edge.from + "_" + Edge.to,
            d: shapeProps.d || "M " + from.x + "," + from.y + " " + to.x + "," + to.y,
            style: shapeProps.style || "fill:none;stroke:#00F;stroke-width:1"
          }];
        }
        function renderArcs(source2, index, top, lane) {
          var res = ["g", { id: "wavearcs_" + index }];
          var Events = {};
          function labeler(element, i) {
            var pos, eventname, stack;
            var text = element.node;
            lane.period = element.period ? element.period : 1;
            lane.phase = (element.phase ? element.phase * 2 : 0) + lane.xmin_cfg;
            if (text) {
              stack = text.split("");
              pos = 0;
              while (stack.length) {
                eventname = stack.shift();
                if (eventname !== ".") {
                  Events[eventname] = {
                    x: lane.xs * (2 * pos * lane.period * lane.hscale - lane.phase) + lane.xlabel,
                    y: i * lane.yo + lane.y0 + lane.ys * 0.5
                  };
                }
                pos += 1;
              }
            }
          }
          function archer(element) {
            var words = element.trim().split(/\s+/);
            var Edge = {
              words,
              label: element.substring(words[0].length).substring(1),
              from: words[0].substr(0, 1),
              to: words[0].substr(-1, 1),
              shape: words[0].slice(1, -1)
            };
            var from = Events[Edge.from];
            var to = Events[Edge.to];
            var shapeProps, lx, ly;
            if (from && to) {
              shapeProps = arcShape(Edge, from, to);
              lx = shapeProps.lx;
              ly = shapeProps.ly;
              res = res.concat([renderArc(Edge, from, to, shapeProps)]);
              if (Edge.label) {
                res = res.concat([renderLabel({ x: lx, y: ly }, Edge.label)]);
              }
            }
          }
          if (Array.isArray(source2)) {
            source2.map(labeler);
            if (Array.isArray(top.edge)) {
              top.edge.map(archer);
            }
            Object.keys(Events).map(function(k) {
              if (k === k.toLowerCase()) {
                if (Events[k].x > 0) {
                  res = res.concat([renderLabel({
                    x: Events[k].x,
                    y: Events[k].y
                  }, k + "")]);
                }
              }
            });
          }
          return res;
        }
        module2.exports = renderArcs;
      }, { "./arc-shape.js": 2, "./render-label.js": 23 }], 21: [function(require2, module2, exports2) {
        "use strict";
        function renderGapUses(text, lane) {
          var res = [];
          var Stack = (text || "").split("");
          var pos = 0;
          var next;
          var subCycle = false;
          while (Stack.length) {
            next = Stack.shift();
            if (next === "<") {
              subCycle = true;
              next = Stack.shift();
            }
            if (next === ">") {
              subCycle = false;
              next = Stack.shift();
            }
            if (subCycle) {
              pos += 1;
            } else {
              pos += 2 * lane.period;
            }
            if (next === "|") {
              res.push(["use", {
                "xlink:href": "#gap",
                transform: "translate(" + lane.xs * ((pos - (subCycle ? 0 : lane.period)) * lane.hscale - lane.phase) + ")"
              }]);
            }
          }
          return res;
        }
        function renderGaps(source2, index, lane) {
          var i, gaps;
          var res = [];
          if (source2) {
            for (i in source2) {
              lane.period = source2[i].period ? source2[i].period : 1;
              lane.phase = (source2[i].phase ? source2[i].phase * 2 : 0) + lane.xmin_cfg;
              if (typeof source2[i].wave === "string") {
                gaps = renderGapUses(source2[i].wave, lane);
                res = res.concat([["g", {
                  id: "wavegap_" + i + "_" + index,
                  transform: "translate(0," + (lane.y0 + i * lane.yo) + ")"
                }].concat(gaps)]);
              }
            }
          }
          return ["g", { id: "wavegaps_" + index }].concat(res);
        }
        module2.exports = renderGaps;
      }, {}], 22: [function(require2, module2, exports2) {
        "use strict";
        var tspan = require2("tspan");
        function renderGroups(groups, index, lane) {
          var x, y, res = ["g"], ts;
          groups.forEach(function(e, i) {
            res.push([
              "path",
              {
                id: "group_" + i + "_" + index,
                d: "m " + (e.x + 0.5) + "," + (e.y * lane.yo + 3.5 + lane.yh0 + lane.yh1) + " c -3,0 -5,2 -5,5 l 0," + (e.height * lane.yo - 16) + " c 0,3 2,5 5,5",
                style: "stroke:#0041c4;stroke-width:1;fill:none"
              }
            ]);
            if (e.name === void 0) {
              return;
            }
            x = e.x - 10;
            y = lane.yo * (e.y + e.height / 2) + lane.yh0 + lane.yh1;
            ts = tspan.parse(e.name);
            ts.unshift(
              "text",
              {
                "text-anchor": "middle",
                class: "info",
                "xml:space": "preserve"
              }
            );
            res.push(["g", { transform: "translate(" + x + "," + y + ")" }, ["g", { transform: "rotate(270)" }, ts]]);
          });
          return res;
        }
        module2.exports = renderGroups;
      }, { "tspan": 74 }], 23: [function(require2, module2, exports2) {
        "use strict";
        var tspan = require2("tspan");
        var textWidth = require2("./text-width.js");
        function renderLabel(p, text) {
          var w = textWidth(text, 8) + 2;
          return [
            "g",
            {
              transform: "translate(" + p.x + "," + p.y + ")"
            },
            ["rect", {
              x: -(w >> 1),
              y: -5,
              width: w,
              height: 10,
              style: "fill:#FFF;"
            }],
            ["text", {
              "text-anchor": "middle",
              y: 3,
              style: "font-size:8px;"
            }].concat(tspan.parse(text))
          ];
        }
        module2.exports = renderLabel;
      }, { "./text-width.js": 33, "tspan": 74 }], 24: [function(require2, module2, exports2) {
        "use strict";
        var renderMarks = require2("./render-marks.js");
        var renderArcs = require2("./render-arcs.js");
        var renderGaps = require2("./render-gaps.js");
        var renderPieceWise = require2("./render-piece-wise.js");
        function renderLanes(index, content, waveLanes, ret, source2, lane) {
          return [renderMarks(content, index, lane, source2)].concat(waveLanes.res, [
            renderArcs(ret.lanes, index, source2, lane),
            renderGaps(ret.lanes, index, lane),
            renderPieceWise(ret.lanes, index, lane)
          ]);
        }
        module2.exports = renderLanes;
      }, { "./render-arcs.js": 20, "./render-gaps.js": 21, "./render-marks.js": 25, "./render-piece-wise.js": 27 }], 25: [function(require2, module2, exports2) {
        "use strict";
        var tspan = require2("tspan");
        function captext(cxt, anchor, y) {
          if (cxt[anchor] && cxt[anchor].text) {
            return [
              ["text", {
                x: cxt.xmax * cxt.xs / 2,
                y,
                fill: "#000",
                "text-anchor": "middle",
                "xml:space": "preserve"
              }].concat(tspan.parse(cxt[anchor].text))
            ];
          }
          return [];
        }
        function ticktock(cxt, ref1, ref2, x, dx, y, len) {
          var step = 1;
          var offset;
          var dp = 0;
          var val;
          var L = [];
          var tmp;
          var i;
          if (cxt[ref1] === void 0 || cxt[ref1][ref2] === void 0) {
            return [];
          }
          val = cxt[ref1][ref2];
          if (typeof val === "string") {
            val = val.trim().split(/\s+/);
          } else if (typeof val === "number" || typeof val === "boolean") {
            offset = Number(val);
            val = [];
            for (i = 0; i < len; i += 1) {
              val.push(i + offset);
            }
          }
          if (Object.prototype.toString.call(val) === "[object Array]") {
            if (val.length === 0) {
              return [];
            } else if (val.length === 1) {
              offset = Number(val[0]);
              if (isNaN(offset)) {
                L = val;
              } else {
                for (i = 0; i < len; i += 1) {
                  L[i] = i + offset;
                }
              }
            } else if (val.length === 2) {
              offset = Number(val[0]);
              step = Number(val[1]);
              tmp = val[1].split(".");
              if (tmp.length === 2) {
                dp = tmp[1].length;
              }
              if (isNaN(offset) || isNaN(step)) {
                L = val;
              } else {
                offset = step * offset;
                for (i = 0; i < len; i += 1) {
                  L[i] = (step * i + offset).toFixed(dp);
                }
              }
            } else {
              L = val;
            }
          } else {
            return [];
          }
          var res = ["g", {
            class: "muted",
            "text-anchor": "middle",
            "xml:space": "preserve"
          }];
          for (i = 0; i < len; i += 1) {
            if (cxt[ref1] && cxt[ref1].every && (i + offset) % cxt[ref1].every != 0) {
              continue;
            }
            res.push(["text", { x: i * dx + x, y }].concat(tspan.parse(L[i])));
          }
          return [res];
        }
        function renderMarks(content, index, lane, source2) {
          var mstep = 2 * lane.hscale;
          var mmstep = mstep * lane.xs;
          var marks = lane.xmax / mstep;
          var gy = content.length * lane.yo;
          var i;
          var res = ["g", { id: "gmarks_" + index }];
          var gmarkLines = ["g", { style: "stroke:#888;stroke-width:0.5;stroke-dasharray:1,3" }];
          if (!(source2 && source2.config && source2.config.marks === false)) {
            for (i = 0; i < marks + 1; i += 1) {
              gmarkLines.push(["line", {
                id: "gmark_" + i + "_" + index,
                x1: i * mmstep,
                y1: 0,
                x2: i * mmstep,
                y2: gy
              }]);
            }
            res = res.concat([gmarkLines]);
          }
          return res.concat(captext(lane, "head", lane.yh0 ? -33 : -13)).concat(captext(lane, "foot", gy + (lane.yf0 ? 45 : 25))).concat(ticktock(lane, "head", "tick", 0, mmstep, -5, marks + 1)).concat(ticktock(lane, "head", "tock", mmstep / 2, mmstep, -5, marks)).concat(ticktock(lane, "foot", "tick", 0, mmstep, gy + 15, marks + 1)).concat(ticktock(lane, "foot", "tock", mmstep / 2, mmstep, gy + 15, marks));
        }
        module2.exports = renderMarks;
      }, { "tspan": 74 }], 26: [function(require2, module2, exports2) {
        "use strict";
        var colors = {
          1: "#000000",
          2: "#e90000",
          3: "#3edd00",
          4: "#0074cd",
          5: "#ff15db",
          6: "#af9800",
          7: "#00864f",
          8: "#a076ff"
        };
        function renderOverUnder(el, key, lane) {
          var xs = lane.xs;
          var ys = lane.ys;
          var period = (el.period || 1) * 2 * xs;
          var xoffset = -(el.phase || 0) * 2 * xs;
          var gap1 = 12;
          var serif = 7;
          var color;
          var y = key === "under" ? ys : 0;
          var start;
          function line(x) {
            return start === void 0 ? [] : [["line", {
              style: "stroke:" + color,
              x1: period * start + gap1,
              x2: period * x
            }]];
          }
          if (el[key]) {
            var res = ["g", {
              transform: "translate(" + xoffset + "," + y + ")",
              style: "stroke-width:3"
            }];
            const arr = el[key].split("");
            arr.map(function(dot, i) {
              if (dot !== "." && start !== void 0) {
                res = res.concat(line(i));
                if (key === "over") {
                  res.push(["path", {
                    style: "stroke:none;fill:" + color,
                    d: "m" + (period * i - serif) + " 0 l" + serif + " " + serif + " v-" + serif + " z"
                  }]);
                }
              }
              if (dot === "0") {
                start = void 0;
              } else if (dot !== ".") {
                start = i;
                color = colors[dot] || colors[1];
              }
            });
            if (start !== void 0) {
              res = res.concat(line(arr.length));
            }
            return [res];
          }
          return [];
        }
        module2.exports = renderOverUnder;
      }, {}], 27: [function(require2, module2, exports2) {
        "use strict";
        const onml = require2("onml");
        const scaled = (d, sx, sy) => {
          if (sy === void 0) {
            sy = sx;
          }
          let i = 0;
          while (i < d.length) {
            switch (d[i]) {
              case "h":
              case "H":
                d[i + 1] *= sx;
                i++;
                break;
              case "v":
              case "V":
                d[i + 1] *= sy;
                i++;
                break;
              case "m":
              case "M":
              case "l":
              case "L":
                d[i + 1] *= sx;
                d[i + 2] *= sy;
                i += 2;
                break;
              case "q":
              case "Q":
                d[i + 1] *= sx;
                d[i + 2] *= sy;
                d[i + 3] *= sx;
                d[i + 4] *= sy;
                i += 4;
                break;
              case "a":
              case "A":
                d[i + 1] *= sx;
                d[i + 2] *= sy;
                d[i + 6] *= sx;
                d[i + 7] *= sy;
                i += 7;
                break;
            }
            i++;
          }
          return d;
        };
        function scale(d, cfg) {
          if (typeof d === "string") {
            d = d.trim().split(/[\s,]+/);
          }
          if (!Array.isArray(d)) {
            return;
          }
          return scaled(d, 2 * cfg.xs, -cfg.ys);
        }
        function renderLane(wave, idx, cfg) {
          if (Array.isArray(wave)) {
            const tag = wave[0];
            const attr = wave[1];
            if (tag === "pw" && typeof attr === "object") {
              const d = scale(attr.d, cfg);
              return ["g", onml.tt(0, cfg.yo * idx + cfg.ys + cfg.y0), ["path", { style: "fill:none;stroke:#000;stroke-width:1px;", d }]];
            }
          }
        }
        function renderPieceWise(lanes, index, cfg) {
          let res = ["g"];
          lanes.map((row, idx) => {
            const wave = row.wave;
            if (Array.isArray(wave)) {
              res.push(renderLane(wave, idx, cfg));
            }
          });
          return res;
        }
        module2.exports = renderPieceWise;
      }, { "onml": 49 }], 28: [function(require2, module2, exports2) {
        "use strict";
        var render = require2("bit-field/lib/render.js");
        function renderReg(index, source2) {
          return render(source2.reg, source2.config);
        }
        module2.exports = renderReg;
      }, { "bit-field/lib/render.js": 36 }], 29: [function(require2, module2, exports2) {
        "use strict";
        var rec = require2("./rec.js");
        var lane = require2("./lane.js");
        var parseConfig = require2("./parse-config.js");
        var parseWaveLanes = require2("./parse-wave-lanes.js");
        var renderGroups = require2("./render-groups.js");
        var renderLanes = require2("./render-lanes.js");
        var renderWaveLane = require2("./render-wave-lane.js");
        var insertSVGTemplate = require2("./insert-svg-template.js");
        function laneParamsFromSkin(index, source2, lane2, waveSkin) {
          if (index !== 0) {
            return;
          }
          var first, skin, socket;
          for (first in waveSkin) {
            break;
          }
          skin = waveSkin.default || waveSkin[first];
          if (source2 && source2.config && source2.config.skin && waveSkin[source2.config.skin]) {
            skin = waveSkin[source2.config.skin];
          }
          socket = skin[3][1][2][1];
          lane2.xs = Number(socket.width);
          lane2.ys = Number(socket.height);
          lane2.xlabel = Number(socket.x);
          lane2.ym = Number(socket.y);
        }
        function renderSignal(index, source2, waveSkin, notFirstSignal) {
          laneParamsFromSkin(index, source2, lane, waveSkin);
          parseConfig(source2, lane);
          var ret = rec(source2.signal, { "x": 0, "y": 0, "xmax": 0, "width": [], "lanes": [], "groups": [] });
          var content = parseWaveLanes(ret.lanes, lane);
          var waveLanes = renderWaveLane(content, index, lane);
          var waveGroups = renderGroups(ret.groups, index, lane);
          var xmax = waveLanes.glengths.reduce(function(res, len, i) {
            return Math.max(res, len + ret.width[i]);
          }, 0);
          lane.xg = Math.ceil((xmax - lane.tgo) / lane.xs) * lane.xs;
          return insertSVGTemplate(
            index,
            source2,
            lane,
            waveSkin,
            content,
            renderLanes(index, content, waveLanes, ret, source2, lane),
            waveGroups,
            notFirstSignal
          );
        }
        module2.exports = renderSignal;
      }, { "./insert-svg-template.js": 12, "./lane.js": 13, "./parse-config.js": 14, "./parse-wave-lanes.js": 16, "./rec.js": 18, "./render-groups.js": 22, "./render-lanes.js": 24, "./render-wave-lane.js": 32 }], 30: [function(require2, module2, exports2) {
        "use strict";
        var renderAny = require2("./render-any.js");
        var createElement = require2("./create-element.js");
        function renderWaveElement(index, source2, outputElement, waveSkin, notFirstSignal) {
          while (outputElement.childNodes.length) {
            outputElement.removeChild(outputElement.childNodes[0]);
          }
          outputElement.insertBefore(createElement(
            renderAny(index, source2, waveSkin, notFirstSignal)
          ), null);
        }
        module2.exports = renderWaveElement;
      }, { "./create-element.js": 4, "./render-any.js": 19 }], 31: [function(require2, module2, exports2) {
        "use strict";
        var renderWaveElement = require2("./render-wave-element.js");
        function renderWaveForm(index, source2, output, notFirstSignal) {
          renderWaveElement(index, source2, document.getElementById(output + index), window.WaveSkin, notFirstSignal);
        }
        module2.exports = renderWaveForm;
      }, { "./render-wave-element.js": 30 }], 32: [function(require2, module2, exports2) {
        "use strict";
        var tspan = require2("tspan");
        var textWidth = require2("./text-width.js");
        var findLaneMarkers = require2("./find-lane-markers.js");
        var renderOverUnder = require2("./render-over-under.js");
        function renderLaneUses(cont, lane) {
          var res = [];
          var labels = [];
          if (cont[1]) {
            cont[1].map(function(ref, i) {
              res.push(["use", {
                "xlink:href": "#" + ref,
                transform: "translate(" + i * lane.xs + ")"
              }]);
            });
            if (cont[2] && cont[2].length) {
              labels = findLaneMarkers(cont[1]);
              if (labels.length) {
                labels.map(function(label, i) {
                  if (cont[2] && cont[2][i] !== void 0) {
                    res.push(["text", {
                      x: label * lane.xs + lane.xlabel,
                      y: lane.ym,
                      "text-anchor": "middle",
                      "xml:space": "preserve"
                    }].concat(tspan.parse(cont[2][i])));
                  }
                });
              }
            }
          }
          return res;
        }
        function renderWaveLane(content, index, lane) {
          var xmax = 0, xgmax = 0, glengths = [], res = [];
          content.map(function(el, j) {
            var name = el[0][0];
            if (name) {
              var xoffset = el[0][1];
              xoffset = xoffset > 0 ? Math.ceil(2 * xoffset) - 2 * xoffset : -2 * xoffset;
              res.push(
                ["g", {
                  id: "wavelane_" + j + "_" + index,
                  transform: "translate(0," + (lane.y0 + j * lane.yo) + ")"
                }].concat([
                  ["text", {
                    x: lane.tgo,
                    y: lane.ym,
                    class: "info",
                    "text-anchor": "end",
                    "xml:space": "preserve"
                  }].concat(tspan.parse(name))
                ]).concat([
                  ["g", {
                    id: "wavelane_draw_" + j + "_" + index,
                    transform: "translate(" + xoffset * lane.xs + ", 0)"
                  }].concat(renderLaneUses(el, lane))
                ]).concat(
                  renderOverUnder(el[3], "over", lane),
                  renderOverUnder(el[3], "under", lane)
                )
              );
              xmax = Math.max(xmax, (el[1] || []).length);
              glengths.push(textWidth(name, 11));
            }
          });
          lane.xmax = Math.min(xmax, lane.xmax_cfg - lane.xmin_cfg);
          lane.xg = xgmax + 20;
          return { glengths, res };
        }
        module2.exports = renderWaveLane;
      }, { "./find-lane-markers.js": 7, "./render-over-under.js": 26, "./text-width.js": 33, "tspan": 74 }], 33: [function(require2, module2, exports2) {
        "use strict";
        var charWidth = require2("./char-width.json");
        module2.exports = function(str, size) {
          var i, len, c, w, width;
          size = size || 11;
          len = str.length;
          width = 0;
          for (i = 0; i < len; i++) {
            c = str.charCodeAt(i);
            w = charWidth.chars[c];
            if (w === void 0) {
              w = charWidth.other;
            }
            width += w;
          }
          return width * size / 100;
        };
      }, { "./char-width.json": 3 }], 34: [function(require2, module2, exports2) {
        "use strict";
        module2.exports = {
          svg: "http://www.w3.org/2000/svg",
          xlink: "http://www.w3.org/1999/xlink",
          xmlns: "http://www.w3.org/XML/1998/namespace"
        };
      }, {}], 35: [function(require2, module2, exports2) {
        "use strict";
        exports2.byteLength = byteLength;
        exports2.toByteArray = toByteArray;
        exports2.fromByteArray = fromByteArray;
        var lookup = [];
        var revLookup = [];
        var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
        var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        for (var i = 0, len = code.length; i < len; ++i) {
          lookup[i] = code[i];
          revLookup[code.charCodeAt(i)] = i;
        }
        revLookup["-".charCodeAt(0)] = 62;
        revLookup["_".charCodeAt(0)] = 63;
        function getLens(b64) {
          var len2 = b64.length;
          if (len2 % 4 > 0) {
            throw new Error("Invalid string. Length must be a multiple of 4");
          }
          var validLen = b64.indexOf("=");
          if (validLen === -1)
            validLen = len2;
          var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
          return [validLen, placeHoldersLen];
        }
        function byteLength(b64) {
          var lens = getLens(b64);
          var validLen = lens[0];
          var placeHoldersLen = lens[1];
          return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
        }
        function _byteLength(b64, validLen, placeHoldersLen) {
          return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
        }
        function toByteArray(b64) {
          var tmp;
          var lens = getLens(b64);
          var validLen = lens[0];
          var placeHoldersLen = lens[1];
          var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
          var curByte = 0;
          var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
          var i2;
          for (i2 = 0; i2 < len2; i2 += 4) {
            tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
            arr[curByte++] = tmp >> 16 & 255;
            arr[curByte++] = tmp >> 8 & 255;
            arr[curByte++] = tmp & 255;
          }
          if (placeHoldersLen === 2) {
            tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
            arr[curByte++] = tmp & 255;
          }
          if (placeHoldersLen === 1) {
            tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
            arr[curByte++] = tmp >> 8 & 255;
            arr[curByte++] = tmp & 255;
          }
          return arr;
        }
        function tripletToBase64(num) {
          return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
        }
        function encodeChunk(uint8, start, end) {
          var tmp;
          var output = [];
          for (var i2 = start; i2 < end; i2 += 3) {
            tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
            output.push(tripletToBase64(tmp));
          }
          return output.join("");
        }
        function fromByteArray(uint8) {
          var tmp;
          var len2 = uint8.length;
          var extraBytes = len2 % 3;
          var parts = [];
          var maxChunkLength = 16383;
          for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
            parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
          }
          if (extraBytes === 1) {
            tmp = uint8[len2 - 1];
            parts.push(
              lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
            );
          } else if (extraBytes === 2) {
            tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
            parts.push(
              lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
            );
          }
          return parts.join("");
        }
      }, {}], 36: [function(require2, module2, exports2) {
        "use strict";
        const tspan = require2("tspan");
        const round = Math.round;
        const getSVG = (w, h) => ["svg", {
          xmlns: "http://www.w3.org/2000/svg",
          width: w,
          height: h,
          viewBox: [0, 0, w, h].join(" ")
        }];
        const tt = (x, y, obj) => Object.assign(
          { transform: "translate(" + x + (y ? "," + y : "") + ")" },
          typeof obj === "object" ? obj : {}
        );
        const colors = {
          2: 0,
          3: 80,
          4: 170,
          5: 45,
          6: 126,
          7: 215
        };
        const typeStyle = (t) => colors[t] !== void 0 ? ";fill:hsl(" + colors[t] + ",100%,50%)" : "";
        const norm = (obj, other) => Object.assign(
          Object.keys(obj).reduce((prev, key) => {
            const val = Number(obj[key]);
            const valInt = isNaN(val) ? 0 : Math.round(val);
            if (valInt !== 0) {
              prev[key] = valInt;
            }
            return prev;
          }, {}),
          other
        );
        const text = (body, x, y, rotate) => {
          const props = { y: 6 };
          if (rotate !== void 0) {
            props.transform = "rotate(" + rotate + ")";
          }
          return ["g", tt(round(x), round(y)), ["text", props].concat(tspan.parse(body))];
        };
        const hline = (len, x, y) => ["line", norm({ x1: x, x2: x + len, y1: y, y2: y })];
        const vline = (len, x, y) => ["line", norm({ x1: x, x2: x, y1: y, y2: y + len })];
        const getLabel = (val, x, y, step, len, rotate) => {
          if (typeof val !== "number") {
            return text(val, x, y, rotate);
          }
          const res = ["g", {}];
          for (let i = 0; i < len; i++) {
            res.push(text(
              val >> i & 1,
              x + step * (len / 2 - i - 0.5),
              y
            ));
          }
          return res;
        };
        const getAttr = (e, opt, step, lsbm, msbm) => {
          const x = opt.vflip ? step * ((msbm + lsbm) / 2) : step * (opt.mod - (msbm + lsbm) / 2 - 1);
          if (!Array.isArray(e.attr)) {
            return getLabel(e.attr, x, 0, step, e.bits);
          }
          return e.attr.reduce(
            (prev, a, i) => a === void 0 || a === null ? prev : prev.concat([getLabel(a, x, opt.fontsize * i, step, e.bits)]),
            ["g", {}]
          );
        };
        const labelArr = (desc, opt) => {
          const { margin, hspace, vspace, mod, index, fontsize, vflip, compact } = opt;
          const width = hspace - margin.left - margin.right - 1;
          const height = vspace - margin.top - margin.bottom;
          const step = width / mod;
          const blanks = ["g"];
          const bits = ["g", tt(round(step / 2), -round(0.5 * fontsize + 4))];
          const names = ["g", tt(round(step / 2), round(0.5 * height + 0.4 * fontsize - 6))];
          const attrs = ["g", tt(round(step / 2), round(height + 0.7 * fontsize - 2))];
          desc.map((e) => {
            let lsbm = 0;
            let msbm = mod - 1;
            let lsb = index * mod;
            let msb = (index + 1) * mod - 1;
            if (e.lsb / mod >> 0 === index) {
              lsbm = e.lsbm;
              lsb = e.lsb;
              if (e.msb / mod >> 0 === index) {
                msb = e.msb;
                msbm = e.msbm;
              }
            } else {
              if (e.msb / mod >> 0 === index) {
                msb = e.msb;
                msbm = e.msbm;
              } else if (!(lsb > e.lsb && msb < e.msb)) {
                return;
              }
            }
            if (!compact) {
              bits.push(text(lsb, step * (vflip ? lsbm : mod - lsbm - 1)));
              if (lsbm !== msbm) {
                bits.push(text(msb, step * (vflip ? msbm : mod - msbm - 1)));
              }
            }
            if (e.name !== void 0) {
              names.push(getLabel(
                e.name,
                step * (vflip ? (msbm + lsbm) / 2 : mod - (msbm + lsbm) / 2 - 1),
                0,
                step,
                e.bits,
                e.rotate
              ));
            }
            if (e.name === void 0 || e.type !== void 0) {
              blanks.push(["rect", norm({
                x: step * (vflip ? lsbm : mod - msbm - 1),
                width: step * (msbm - lsbm + 1),
                height
              }, {
                style: "fill-opacity:0.1" + typeStyle(e.type)
              })]);
            }
            if (e.attr !== void 0) {
              attrs.push(getAttr(e, opt, step, lsbm, msbm));
            }
          });
          return ["g", blanks, bits, names, attrs];
        };
        const getLabelMask = (desc, mod) => {
          const mask = [];
          let idx = 0;
          desc.map((e) => {
            mask[idx % mod] = true;
            idx += e.bits;
            mask[(idx - 1) % mod] = true;
          });
          return mask;
        };
        const compactLabels = (desc, opt) => {
          const { hspace, margin, mod, fontsize, vflip } = opt;
          const width = hspace - margin.left - margin.right - 1;
          const step = width / mod;
          const labels = ["g", tt(margin.left, -3)];
          const mask = getLabelMask(desc, mod);
          for (let i = 0; i < mod; i++) {
            const idx = vflip ? i : mod - i - 1;
            if (mask[idx]) {
              labels.push(text(
                idx,
                step * (i + 0.5),
                0.5 * fontsize + 4
              ));
            }
          }
          return labels;
        };
        const cage = (desc, opt) => {
          const { hspace, vspace, mod, margin, index, vflip } = opt;
          const width = hspace - margin.left - margin.right - 1;
          const height = vspace - margin.top - margin.bottom;
          const res = [
            "g",
            {
              stroke: "black",
              "stroke-width": 1,
              "stroke-linecap": "round"
            }
          ];
          const skipEdge = opt.uneven && opt.bits % 2 === 1 && index === opt.lanes - 1;
          if (skipEdge) {
            if (vflip) {
              res.push(hline(width - width / mod, 0, 0));
              res.push(hline(width - width / mod, 0, height));
            } else {
              res.push(hline(width - width / mod, width / mod, 0));
              res.push(hline(width - width / mod, width / mod, height));
            }
          } else {
            res.push(hline(width, 0, 0));
            res.push(hline(width, 0, height));
            res.push(vline(height, vflip ? width : 0, 0));
          }
          let i = index * mod;
          const delta = vflip ? 1 : -1;
          let j = vflip ? 0 : mod;
          for (let k = 0; k < mod; k++) {
            const xj = j * (width / mod);
            if (k === 0 || desc.some((e) => e.msb + 1 === i)) {
              res.push(vline(height, xj, 0));
            } else {
              res.push(vline(height >>> 3, xj, 0));
              res.push(vline(-(height >>> 3), xj, height));
            }
            i++;
            j += delta;
          }
          return res;
        };
        const lane = (desc, opt) => {
          const { index, vspace, hspace, margin, hflip, lanes, compact, label } = opt;
          const height = vspace - margin.top - margin.bottom;
          const width = hspace - margin.left - margin.right - 1;
          let tx = margin.left;
          const idx = hflip ? index : lanes - index - 1;
          let ty = round(idx * vspace + margin.top);
          if (compact) {
            ty = round(idx * height + margin.top);
          }
          const res = [
            "g",
            tt(tx, ty),
            cage(desc, opt),
            labelArr(desc, opt)
          ];
          if (label && label.left !== void 0) {
            const lab = label.left;
            let txt = index;
            if (typeof lab === "string") {
              txt = lab;
            } else if (typeof lab === "number") {
              txt += lab;
            } else if (typeof lab === "object") {
              txt = lab[index] || txt;
            }
            res.push([
              "g",
              { "text-anchor": "end" },
              text(txt, -4, round(height / 2))
            ]);
          }
          if (label && label.right !== void 0) {
            const lab = label.right;
            let txt = index;
            if (typeof lab === "string") {
              txt = lab;
            } else if (typeof lab === "number") {
              txt += lab;
            } else if (typeof lab === "object") {
              txt = lab[index] || txt;
            }
            res.push([
              "g",
              { "text-anchor": "start" },
              text(txt, width + 4, round(height / 2))
            ]);
          }
          return res;
        };
        const getMaxAttributes = (desc) => desc.reduce(
          (prev, field) => Math.max(
            prev,
            field.attr === void 0 ? 0 : Array.isArray(field.attr) ? field.attr.length : 1
          ),
          0
        );
        const getTotalBits = (desc) => desc.reduce((prev, field) => prev + (field.bits === void 0 ? 0 : field.bits), 0);
        const isIntGTorDefault = (opt) => (row) => {
          const [key, min, def] = row;
          const val = Math.round(opt[key]);
          opt[key] = typeof val === "number" && val >= min ? val : def;
        };
        const render = (desc, opt) => {
          opt = typeof opt === "object" ? opt : {};
          [
            ["hspace", 40, 800],
            ["lanes", 1, 1],
            ["bits", 1, void 0],
            ["fontsize", 6, 14]
          ].map(isIntGTorDefault(opt));
          const maxAttributes = getMaxAttributes(desc);
          opt.vspace = opt.vspace || (maxAttributes + 4) * opt.fontsize;
          opt.fontfamily = opt.fontfamily || "sans-serif";
          opt.fontweight = opt.fontweight || "normal";
          opt.compact = opt.compact || false;
          opt.hflip = opt.hflip || false;
          opt.uneven = opt.uneven || false;
          opt.margin = opt.margin || {};
          if (opt.bits === void 0) {
            opt.bits = getTotalBits(desc);
          }
          const { hspace, vspace, lanes, margin, compact, fontsize, bits, label } = opt;
          if (margin.right === void 0) {
            if (label && label.right !== void 0) {
              margin.right = round(0.1 * hspace);
            } else {
              margin.right = 4;
            }
          }
          if (margin.left === void 0) {
            if (label && label.left !== void 0) {
              margin.left = round(0.1 * hspace);
            } else {
              margin.left = 4;
            }
          }
          if (margin.top === void 0) {
            margin.top = 1.5 * fontsize;
            if (margin.bottom === void 0) {
              margin.bottom = fontsize * maxAttributes + 4;
            }
          } else {
            if (margin.bottom === void 0) {
              margin.bottom = 4;
            }
          }
          let width = hspace;
          let height = vspace * lanes;
          if (compact) {
            height -= (lanes - 1) * (margin.top + margin.bottom);
          }
          const res = [
            "g",
            tt(0.5, 0.5, {
              "text-anchor": "middle",
              "font-size": opt.fontsize,
              "font-family": opt.fontfamily,
              "font-weight": opt.fontweight
            })
          ];
          let lsb = 0;
          const mod = Math.ceil(bits * 1 / lanes);
          opt.mod = mod | 0;
          desc.map((e) => {
            e.lsb = lsb;
            e.lsbm = lsb % mod;
            lsb += e.bits;
            e.msb = lsb - 1;
            e.msbm = e.msb % mod;
          });
          for (let i = 0; i < lanes; i++) {
            opt.index = i;
            res.push(lane(desc, opt));
          }
          if (compact) {
            res.push(compactLabels(desc, opt));
          }
          return getSVG(width, height).concat([res]);
        };
        module2.exports = render;
      }, { "tspan": 74 }], 37: [function(require2, module2, exports2) {
      }, {}], 38: [function(require2, module2, exports2) {
        (function(Buffer2) {
          (function() {
            "use strict";
            var base64 = require2("base64-js");
            var ieee754 = require2("ieee754");
            exports2.Buffer = Buffer3;
            exports2.SlowBuffer = SlowBuffer;
            exports2.INSPECT_MAX_BYTES = 50;
            var K_MAX_LENGTH = 2147483647;
            exports2.kMaxLength = K_MAX_LENGTH;
            Buffer3.TYPED_ARRAY_SUPPORT = typedArraySupport();
            if (!Buffer3.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
              console.error(
                "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
              );
            }
            function typedArraySupport() {
              try {
                var arr = new Uint8Array(1);
                arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function() {
                  return 42;
                } };
                return arr.foo() === 42;
              } catch (e) {
                return false;
              }
            }
            Object.defineProperty(Buffer3.prototype, "parent", {
              enumerable: true,
              get: function() {
                if (!Buffer3.isBuffer(this))
                  return void 0;
                return this.buffer;
              }
            });
            Object.defineProperty(Buffer3.prototype, "offset", {
              enumerable: true,
              get: function() {
                if (!Buffer3.isBuffer(this))
                  return void 0;
                return this.byteOffset;
              }
            });
            function createBuffer(length) {
              if (length > K_MAX_LENGTH) {
                throw new RangeError('The value "' + length + '" is invalid for option "size"');
              }
              var buf = new Uint8Array(length);
              buf.__proto__ = Buffer3.prototype;
              return buf;
            }
            function Buffer3(arg, encodingOrOffset, length) {
              if (typeof arg === "number") {
                if (typeof encodingOrOffset === "string") {
                  throw new TypeError(
                    'The "string" argument must be of type string. Received type number'
                  );
                }
                return allocUnsafe(arg);
              }
              return from(arg, encodingOrOffset, length);
            }
            if (typeof Symbol !== "undefined" && Symbol.species != null && Buffer3[Symbol.species] === Buffer3) {
              Object.defineProperty(Buffer3, Symbol.species, {
                value: null,
                configurable: true,
                enumerable: false,
                writable: false
              });
            }
            Buffer3.poolSize = 8192;
            function from(value, encodingOrOffset, length) {
              if (typeof value === "string") {
                return fromString(value, encodingOrOffset);
              }
              if (ArrayBuffer.isView(value)) {
                return fromArrayLike(value);
              }
              if (value == null) {
                throw TypeError(
                  "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
                );
              }
              if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
                return fromArrayBuffer(value, encodingOrOffset, length);
              }
              if (typeof value === "number") {
                throw new TypeError(
                  'The "value" argument must not be of type number. Received type number'
                );
              }
              var valueOf = value.valueOf && value.valueOf();
              if (valueOf != null && valueOf !== value) {
                return Buffer3.from(valueOf, encodingOrOffset, length);
              }
              var b = fromObject(value);
              if (b)
                return b;
              if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
                return Buffer3.from(
                  value[Symbol.toPrimitive]("string"),
                  encodingOrOffset,
                  length
                );
              }
              throw new TypeError(
                "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
              );
            }
            Buffer3.from = function(value, encodingOrOffset, length) {
              return from(value, encodingOrOffset, length);
            };
            Buffer3.prototype.__proto__ = Uint8Array.prototype;
            Buffer3.__proto__ = Uint8Array;
            function assertSize(size) {
              if (typeof size !== "number") {
                throw new TypeError('"size" argument must be of type number');
              } else if (size < 0) {
                throw new RangeError('The value "' + size + '" is invalid for option "size"');
              }
            }
            function alloc(size, fill, encoding) {
              assertSize(size);
              if (size <= 0) {
                return createBuffer(size);
              }
              if (fill !== void 0) {
                return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
              }
              return createBuffer(size);
            }
            Buffer3.alloc = function(size, fill, encoding) {
              return alloc(size, fill, encoding);
            };
            function allocUnsafe(size) {
              assertSize(size);
              return createBuffer(size < 0 ? 0 : checked(size) | 0);
            }
            Buffer3.allocUnsafe = function(size) {
              return allocUnsafe(size);
            };
            Buffer3.allocUnsafeSlow = function(size) {
              return allocUnsafe(size);
            };
            function fromString(string, encoding) {
              if (typeof encoding !== "string" || encoding === "") {
                encoding = "utf8";
              }
              if (!Buffer3.isEncoding(encoding)) {
                throw new TypeError("Unknown encoding: " + encoding);
              }
              var length = byteLength(string, encoding) | 0;
              var buf = createBuffer(length);
              var actual = buf.write(string, encoding);
              if (actual !== length) {
                buf = buf.slice(0, actual);
              }
              return buf;
            }
            function fromArrayLike(array) {
              var length = array.length < 0 ? 0 : checked(array.length) | 0;
              var buf = createBuffer(length);
              for (var i = 0; i < length; i += 1) {
                buf[i] = array[i] & 255;
              }
              return buf;
            }
            function fromArrayBuffer(array, byteOffset, length) {
              if (byteOffset < 0 || array.byteLength < byteOffset) {
                throw new RangeError('"offset" is outside of buffer bounds');
              }
              if (array.byteLength < byteOffset + (length || 0)) {
                throw new RangeError('"length" is outside of buffer bounds');
              }
              var buf;
              if (byteOffset === void 0 && length === void 0) {
                buf = new Uint8Array(array);
              } else if (length === void 0) {
                buf = new Uint8Array(array, byteOffset);
              } else {
                buf = new Uint8Array(array, byteOffset, length);
              }
              buf.__proto__ = Buffer3.prototype;
              return buf;
            }
            function fromObject(obj) {
              if (Buffer3.isBuffer(obj)) {
                var len = checked(obj.length) | 0;
                var buf = createBuffer(len);
                if (buf.length === 0) {
                  return buf;
                }
                obj.copy(buf, 0, 0, len);
                return buf;
              }
              if (obj.length !== void 0) {
                if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
                  return createBuffer(0);
                }
                return fromArrayLike(obj);
              }
              if (obj.type === "Buffer" && Array.isArray(obj.data)) {
                return fromArrayLike(obj.data);
              }
            }
            function checked(length) {
              if (length >= K_MAX_LENGTH) {
                throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
              }
              return length | 0;
            }
            function SlowBuffer(length) {
              if (+length != length) {
                length = 0;
              }
              return Buffer3.alloc(+length);
            }
            Buffer3.isBuffer = function isBuffer(b) {
              return b != null && b._isBuffer === true && b !== Buffer3.prototype;
            };
            Buffer3.compare = function compare(a, b) {
              if (isInstance(a, Uint8Array))
                a = Buffer3.from(a, a.offset, a.byteLength);
              if (isInstance(b, Uint8Array))
                b = Buffer3.from(b, b.offset, b.byteLength);
              if (!Buffer3.isBuffer(a) || !Buffer3.isBuffer(b)) {
                throw new TypeError(
                  'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
                );
              }
              if (a === b)
                return 0;
              var x = a.length;
              var y = b.length;
              for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                if (a[i] !== b[i]) {
                  x = a[i];
                  y = b[i];
                  break;
                }
              }
              if (x < y)
                return -1;
              if (y < x)
                return 1;
              return 0;
            };
            Buffer3.isEncoding = function isEncoding(encoding) {
              switch (String(encoding).toLowerCase()) {
                case "hex":
                case "utf8":
                case "utf-8":
                case "ascii":
                case "latin1":
                case "binary":
                case "base64":
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return true;
                default:
                  return false;
              }
            };
            Buffer3.concat = function concat(list, length) {
              if (!Array.isArray(list)) {
                throw new TypeError('"list" argument must be an Array of Buffers');
              }
              if (list.length === 0) {
                return Buffer3.alloc(0);
              }
              var i;
              if (length === void 0) {
                length = 0;
                for (i = 0; i < list.length; ++i) {
                  length += list[i].length;
                }
              }
              var buffer = Buffer3.allocUnsafe(length);
              var pos = 0;
              for (i = 0; i < list.length; ++i) {
                var buf = list[i];
                if (isInstance(buf, Uint8Array)) {
                  buf = Buffer3.from(buf);
                }
                if (!Buffer3.isBuffer(buf)) {
                  throw new TypeError('"list" argument must be an Array of Buffers');
                }
                buf.copy(buffer, pos);
                pos += buf.length;
              }
              return buffer;
            };
            function byteLength(string, encoding) {
              if (Buffer3.isBuffer(string)) {
                return string.length;
              }
              if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
                return string.byteLength;
              }
              if (typeof string !== "string") {
                throw new TypeError(
                  'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
                );
              }
              var len = string.length;
              var mustMatch = arguments.length > 2 && arguments[2] === true;
              if (!mustMatch && len === 0)
                return 0;
              var loweredCase = false;
              for (; ; ) {
                switch (encoding) {
                  case "ascii":
                  case "latin1":
                  case "binary":
                    return len;
                  case "utf8":
                  case "utf-8":
                    return utf8ToBytes(string).length;
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return len * 2;
                  case "hex":
                    return len >>> 1;
                  case "base64":
                    return base64ToBytes(string).length;
                  default:
                    if (loweredCase) {
                      return mustMatch ? -1 : utf8ToBytes(string).length;
                    }
                    encoding = ("" + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            }
            Buffer3.byteLength = byteLength;
            function slowToString(encoding, start, end) {
              var loweredCase = false;
              if (start === void 0 || start < 0) {
                start = 0;
              }
              if (start > this.length) {
                return "";
              }
              if (end === void 0 || end > this.length) {
                end = this.length;
              }
              if (end <= 0) {
                return "";
              }
              end >>>= 0;
              start >>>= 0;
              if (end <= start) {
                return "";
              }
              if (!encoding)
                encoding = "utf8";
              while (true) {
                switch (encoding) {
                  case "hex":
                    return hexSlice(this, start, end);
                  case "utf8":
                  case "utf-8":
                    return utf8Slice(this, start, end);
                  case "ascii":
                    return asciiSlice(this, start, end);
                  case "latin1":
                  case "binary":
                    return latin1Slice(this, start, end);
                  case "base64":
                    return base64Slice(this, start, end);
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return utf16leSlice(this, start, end);
                  default:
                    if (loweredCase)
                      throw new TypeError("Unknown encoding: " + encoding);
                    encoding = (encoding + "").toLowerCase();
                    loweredCase = true;
                }
              }
            }
            Buffer3.prototype._isBuffer = true;
            function swap(b, n, m) {
              var i = b[n];
              b[n] = b[m];
              b[m] = i;
            }
            Buffer3.prototype.swap16 = function swap16() {
              var len = this.length;
              if (len % 2 !== 0) {
                throw new RangeError("Buffer size must be a multiple of 16-bits");
              }
              for (var i = 0; i < len; i += 2) {
                swap(this, i, i + 1);
              }
              return this;
            };
            Buffer3.prototype.swap32 = function swap32() {
              var len = this.length;
              if (len % 4 !== 0) {
                throw new RangeError("Buffer size must be a multiple of 32-bits");
              }
              for (var i = 0; i < len; i += 4) {
                swap(this, i, i + 3);
                swap(this, i + 1, i + 2);
              }
              return this;
            };
            Buffer3.prototype.swap64 = function swap64() {
              var len = this.length;
              if (len % 8 !== 0) {
                throw new RangeError("Buffer size must be a multiple of 64-bits");
              }
              for (var i = 0; i < len; i += 8) {
                swap(this, i, i + 7);
                swap(this, i + 1, i + 6);
                swap(this, i + 2, i + 5);
                swap(this, i + 3, i + 4);
              }
              return this;
            };
            Buffer3.prototype.toString = function toString() {
              var length = this.length;
              if (length === 0)
                return "";
              if (arguments.length === 0)
                return utf8Slice(this, 0, length);
              return slowToString.apply(this, arguments);
            };
            Buffer3.prototype.toLocaleString = Buffer3.prototype.toString;
            Buffer3.prototype.equals = function equals(b) {
              if (!Buffer3.isBuffer(b))
                throw new TypeError("Argument must be a Buffer");
              if (this === b)
                return true;
              return Buffer3.compare(this, b) === 0;
            };
            Buffer3.prototype.inspect = function inspect() {
              var str = "";
              var max = exports2.INSPECT_MAX_BYTES;
              str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
              if (this.length > max)
                str += " ... ";
              return "<Buffer " + str + ">";
            };
            Buffer3.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
              if (isInstance(target, Uint8Array)) {
                target = Buffer3.from(target, target.offset, target.byteLength);
              }
              if (!Buffer3.isBuffer(target)) {
                throw new TypeError(
                  'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
                );
              }
              if (start === void 0) {
                start = 0;
              }
              if (end === void 0) {
                end = target ? target.length : 0;
              }
              if (thisStart === void 0) {
                thisStart = 0;
              }
              if (thisEnd === void 0) {
                thisEnd = this.length;
              }
              if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                throw new RangeError("out of range index");
              }
              if (thisStart >= thisEnd && start >= end) {
                return 0;
              }
              if (thisStart >= thisEnd) {
                return -1;
              }
              if (start >= end) {
                return 1;
              }
              start >>>= 0;
              end >>>= 0;
              thisStart >>>= 0;
              thisEnd >>>= 0;
              if (this === target)
                return 0;
              var x = thisEnd - thisStart;
              var y = end - start;
              var len = Math.min(x, y);
              var thisCopy = this.slice(thisStart, thisEnd);
              var targetCopy = target.slice(start, end);
              for (var i = 0; i < len; ++i) {
                if (thisCopy[i] !== targetCopy[i]) {
                  x = thisCopy[i];
                  y = targetCopy[i];
                  break;
                }
              }
              if (x < y)
                return -1;
              if (y < x)
                return 1;
              return 0;
            };
            function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
              if (buffer.length === 0)
                return -1;
              if (typeof byteOffset === "string") {
                encoding = byteOffset;
                byteOffset = 0;
              } else if (byteOffset > 2147483647) {
                byteOffset = 2147483647;
              } else if (byteOffset < -2147483648) {
                byteOffset = -2147483648;
              }
              byteOffset = +byteOffset;
              if (numberIsNaN(byteOffset)) {
                byteOffset = dir ? 0 : buffer.length - 1;
              }
              if (byteOffset < 0)
                byteOffset = buffer.length + byteOffset;
              if (byteOffset >= buffer.length) {
                if (dir)
                  return -1;
                else
                  byteOffset = buffer.length - 1;
              } else if (byteOffset < 0) {
                if (dir)
                  byteOffset = 0;
                else
                  return -1;
              }
              if (typeof val === "string") {
                val = Buffer3.from(val, encoding);
              }
              if (Buffer3.isBuffer(val)) {
                if (val.length === 0) {
                  return -1;
                }
                return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
              } else if (typeof val === "number") {
                val = val & 255;
                if (typeof Uint8Array.prototype.indexOf === "function") {
                  if (dir) {
                    return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                  } else {
                    return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                  }
                }
                return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
              }
              throw new TypeError("val must be string, number or Buffer");
            }
            function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
              var indexSize = 1;
              var arrLength = arr.length;
              var valLength = val.length;
              if (encoding !== void 0) {
                encoding = String(encoding).toLowerCase();
                if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
                  if (arr.length < 2 || val.length < 2) {
                    return -1;
                  }
                  indexSize = 2;
                  arrLength /= 2;
                  valLength /= 2;
                  byteOffset /= 2;
                }
              }
              function read(buf, i2) {
                if (indexSize === 1) {
                  return buf[i2];
                } else {
                  return buf.readUInt16BE(i2 * indexSize);
                }
              }
              var i;
              if (dir) {
                var foundIndex = -1;
                for (i = byteOffset; i < arrLength; i++) {
                  if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                    if (foundIndex === -1)
                      foundIndex = i;
                    if (i - foundIndex + 1 === valLength)
                      return foundIndex * indexSize;
                  } else {
                    if (foundIndex !== -1)
                      i -= i - foundIndex;
                    foundIndex = -1;
                  }
                }
              } else {
                if (byteOffset + valLength > arrLength)
                  byteOffset = arrLength - valLength;
                for (i = byteOffset; i >= 0; i--) {
                  var found = true;
                  for (var j = 0; j < valLength; j++) {
                    if (read(arr, i + j) !== read(val, j)) {
                      found = false;
                      break;
                    }
                  }
                  if (found)
                    return i;
                }
              }
              return -1;
            }
            Buffer3.prototype.includes = function includes(val, byteOffset, encoding) {
              return this.indexOf(val, byteOffset, encoding) !== -1;
            };
            Buffer3.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
            };
            Buffer3.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
              return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
            };
            function hexWrite(buf, string, offset, length) {
              offset = Number(offset) || 0;
              var remaining = buf.length - offset;
              if (!length) {
                length = remaining;
              } else {
                length = Number(length);
                if (length > remaining) {
                  length = remaining;
                }
              }
              var strLen = string.length;
              if (length > strLen / 2) {
                length = strLen / 2;
              }
              for (var i = 0; i < length; ++i) {
                var parsed = parseInt(string.substr(i * 2, 2), 16);
                if (numberIsNaN(parsed))
                  return i;
                buf[offset + i] = parsed;
              }
              return i;
            }
            function utf8Write(buf, string, offset, length) {
              return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
            }
            function asciiWrite(buf, string, offset, length) {
              return blitBuffer(asciiToBytes(string), buf, offset, length);
            }
            function latin1Write(buf, string, offset, length) {
              return asciiWrite(buf, string, offset, length);
            }
            function base64Write(buf, string, offset, length) {
              return blitBuffer(base64ToBytes(string), buf, offset, length);
            }
            function ucs2Write(buf, string, offset, length) {
              return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
            }
            Buffer3.prototype.write = function write(string, offset, length, encoding) {
              if (offset === void 0) {
                encoding = "utf8";
                length = this.length;
                offset = 0;
              } else if (length === void 0 && typeof offset === "string") {
                encoding = offset;
                length = this.length;
                offset = 0;
              } else if (isFinite(offset)) {
                offset = offset >>> 0;
                if (isFinite(length)) {
                  length = length >>> 0;
                  if (encoding === void 0)
                    encoding = "utf8";
                } else {
                  encoding = length;
                  length = void 0;
                }
              } else {
                throw new Error(
                  "Buffer.write(string, encoding, offset[, length]) is no longer supported"
                );
              }
              var remaining = this.length - offset;
              if (length === void 0 || length > remaining)
                length = remaining;
              if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                throw new RangeError("Attempt to write outside buffer bounds");
              }
              if (!encoding)
                encoding = "utf8";
              var loweredCase = false;
              for (; ; ) {
                switch (encoding) {
                  case "hex":
                    return hexWrite(this, string, offset, length);
                  case "utf8":
                  case "utf-8":
                    return utf8Write(this, string, offset, length);
                  case "ascii":
                    return asciiWrite(this, string, offset, length);
                  case "latin1":
                  case "binary":
                    return latin1Write(this, string, offset, length);
                  case "base64":
                    return base64Write(this, string, offset, length);
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return ucs2Write(this, string, offset, length);
                  default:
                    if (loweredCase)
                      throw new TypeError("Unknown encoding: " + encoding);
                    encoding = ("" + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            };
            Buffer3.prototype.toJSON = function toJSON() {
              return {
                type: "Buffer",
                data: Array.prototype.slice.call(this._arr || this, 0)
              };
            };
            function base64Slice(buf, start, end) {
              if (start === 0 && end === buf.length) {
                return base64.fromByteArray(buf);
              } else {
                return base64.fromByteArray(buf.slice(start, end));
              }
            }
            function utf8Slice(buf, start, end) {
              end = Math.min(buf.length, end);
              var res = [];
              var i = start;
              while (i < end) {
                var firstByte = buf[i];
                var codePoint = null;
                var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
                if (i + bytesPerSequence <= end) {
                  var secondByte, thirdByte, fourthByte, tempCodePoint;
                  switch (bytesPerSequence) {
                    case 1:
                      if (firstByte < 128) {
                        codePoint = firstByte;
                      }
                      break;
                    case 2:
                      secondByte = buf[i + 1];
                      if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break;
                    case 3:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break;
                    case 4:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      fourthByte = buf[i + 3];
                      if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                          codePoint = tempCodePoint;
                        }
                      }
                  }
                }
                if (codePoint === null) {
                  codePoint = 65533;
                  bytesPerSequence = 1;
                } else if (codePoint > 65535) {
                  codePoint -= 65536;
                  res.push(codePoint >>> 10 & 1023 | 55296);
                  codePoint = 56320 | codePoint & 1023;
                }
                res.push(codePoint);
                i += bytesPerSequence;
              }
              return decodeCodePointsArray(res);
            }
            var MAX_ARGUMENTS_LENGTH = 4096;
            function decodeCodePointsArray(codePoints) {
              var len = codePoints.length;
              if (len <= MAX_ARGUMENTS_LENGTH) {
                return String.fromCharCode.apply(String, codePoints);
              }
              var res = "";
              var i = 0;
              while (i < len) {
                res += String.fromCharCode.apply(
                  String,
                  codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
                );
              }
              return res;
            }
            function asciiSlice(buf, start, end) {
              var ret = "";
              end = Math.min(buf.length, end);
              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i] & 127);
              }
              return ret;
            }
            function latin1Slice(buf, start, end) {
              var ret = "";
              end = Math.min(buf.length, end);
              for (var i = start; i < end; ++i) {
                ret += String.fromCharCode(buf[i]);
              }
              return ret;
            }
            function hexSlice(buf, start, end) {
              var len = buf.length;
              if (!start || start < 0)
                start = 0;
              if (!end || end < 0 || end > len)
                end = len;
              var out = "";
              for (var i = start; i < end; ++i) {
                out += toHex(buf[i]);
              }
              return out;
            }
            function utf16leSlice(buf, start, end) {
              var bytes = buf.slice(start, end);
              var res = "";
              for (var i = 0; i < bytes.length; i += 2) {
                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
              }
              return res;
            }
            Buffer3.prototype.slice = function slice(start, end) {
              var len = this.length;
              start = ~~start;
              end = end === void 0 ? len : ~~end;
              if (start < 0) {
                start += len;
                if (start < 0)
                  start = 0;
              } else if (start > len) {
                start = len;
              }
              if (end < 0) {
                end += len;
                if (end < 0)
                  end = 0;
              } else if (end > len) {
                end = len;
              }
              if (end < start)
                end = start;
              var newBuf = this.subarray(start, end);
              newBuf.__proto__ = Buffer3.prototype;
              return newBuf;
            };
            function checkOffset(offset, ext, length) {
              if (offset % 1 !== 0 || offset < 0)
                throw new RangeError("offset is not uint");
              if (offset + ext > length)
                throw new RangeError("Trying to access beyond buffer length");
            }
            Buffer3.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert)
                checkOffset(offset, byteLength2, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength2 && (mul *= 256)) {
                val += this[offset + i] * mul;
              }
              return val;
            };
            Buffer3.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert) {
                checkOffset(offset, byteLength2, this.length);
              }
              var val = this[offset + --byteLength2];
              var mul = 1;
              while (byteLength2 > 0 && (mul *= 256)) {
                val += this[offset + --byteLength2] * mul;
              }
              return val;
            };
            Buffer3.prototype.readUInt8 = function readUInt8(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 1, this.length);
              return this[offset];
            };
            Buffer3.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              return this[offset] | this[offset + 1] << 8;
            };
            Buffer3.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              return this[offset] << 8 | this[offset + 1];
            };
            Buffer3.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
            };
            Buffer3.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
            };
            Buffer3.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert)
                checkOffset(offset, byteLength2, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength2 && (mul *= 256)) {
                val += this[offset + i] * mul;
              }
              mul *= 128;
              if (val >= mul)
                val -= Math.pow(2, 8 * byteLength2);
              return val;
            };
            Buffer3.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert)
                checkOffset(offset, byteLength2, this.length);
              var i = byteLength2;
              var mul = 1;
              var val = this[offset + --i];
              while (i > 0 && (mul *= 256)) {
                val += this[offset + --i] * mul;
              }
              mul *= 128;
              if (val >= mul)
                val -= Math.pow(2, 8 * byteLength2);
              return val;
            };
            Buffer3.prototype.readInt8 = function readInt8(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 1, this.length);
              if (!(this[offset] & 128))
                return this[offset];
              return (255 - this[offset] + 1) * -1;
            };
            Buffer3.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              var val = this[offset] | this[offset + 1] << 8;
              return val & 32768 ? val | 4294901760 : val;
            };
            Buffer3.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              var val = this[offset + 1] | this[offset] << 8;
              return val & 32768 ? val | 4294901760 : val;
            };
            Buffer3.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
            };
            Buffer3.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
            };
            Buffer3.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, true, 23, 4);
            };
            Buffer3.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, false, 23, 4);
            };
            Buffer3.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, true, 52, 8);
            };
            Buffer3.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
              offset = offset >>> 0;
              if (!noAssert)
                checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, false, 52, 8);
            };
            function checkInt(buf, value, offset, ext, max, min) {
              if (!Buffer3.isBuffer(buf))
                throw new TypeError('"buffer" argument must be a Buffer instance');
              if (value > max || value < min)
                throw new RangeError('"value" argument is out of bounds');
              if (offset + ext > buf.length)
                throw new RangeError("Index out of range");
            }
            Buffer3.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
                checkInt(this, value, offset, byteLength2, maxBytes, 0);
              }
              var mul = 1;
              var i = 0;
              this[offset] = value & 255;
              while (++i < byteLength2 && (mul *= 256)) {
                this[offset + i] = value / mul & 255;
              }
              return offset + byteLength2;
            };
            Buffer3.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset >>> 0;
              byteLength2 = byteLength2 >>> 0;
              if (!noAssert) {
                var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
                checkInt(this, value, offset, byteLength2, maxBytes, 0);
              }
              var i = byteLength2 - 1;
              var mul = 1;
              this[offset + i] = value & 255;
              while (--i >= 0 && (mul *= 256)) {
                this[offset + i] = value / mul & 255;
              }
              return offset + byteLength2;
            };
            Buffer3.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 1, 255, 0);
              this[offset] = value & 255;
              return offset + 1;
            };
            Buffer3.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 65535, 0);
              this[offset] = value & 255;
              this[offset + 1] = value >>> 8;
              return offset + 2;
            };
            Buffer3.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 65535, 0);
              this[offset] = value >>> 8;
              this[offset + 1] = value & 255;
              return offset + 2;
            };
            Buffer3.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 4294967295, 0);
              this[offset + 3] = value >>> 24;
              this[offset + 2] = value >>> 16;
              this[offset + 1] = value >>> 8;
              this[offset] = value & 255;
              return offset + 4;
            };
            Buffer3.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 4294967295, 0);
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 255;
              return offset + 4;
            };
            Buffer3.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength2 - 1);
                checkInt(this, value, offset, byteLength2, limit - 1, -limit);
              }
              var i = 0;
              var mul = 1;
              var sub = 0;
              this[offset] = value & 255;
              while (++i < byteLength2 && (mul *= 256)) {
                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = (value / mul >> 0) - sub & 255;
              }
              return offset + byteLength2;
            };
            Buffer3.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength2 - 1);
                checkInt(this, value, offset, byteLength2, limit - 1, -limit);
              }
              var i = byteLength2 - 1;
              var mul = 1;
              var sub = 0;
              this[offset + i] = value & 255;
              while (--i >= 0 && (mul *= 256)) {
                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                  sub = 1;
                }
                this[offset + i] = (value / mul >> 0) - sub & 255;
              }
              return offset + byteLength2;
            };
            Buffer3.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 1, 127, -128);
              if (value < 0)
                value = 255 + value + 1;
              this[offset] = value & 255;
              return offset + 1;
            };
            Buffer3.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 32767, -32768);
              this[offset] = value & 255;
              this[offset + 1] = value >>> 8;
              return offset + 2;
            };
            Buffer3.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 32767, -32768);
              this[offset] = value >>> 8;
              this[offset + 1] = value & 255;
              return offset + 2;
            };
            Buffer3.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 2147483647, -2147483648);
              this[offset] = value & 255;
              this[offset + 1] = value >>> 8;
              this[offset + 2] = value >>> 16;
              this[offset + 3] = value >>> 24;
              return offset + 4;
            };
            Buffer3.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 2147483647, -2147483648);
              if (value < 0)
                value = 4294967295 + value + 1;
              this[offset] = value >>> 24;
              this[offset + 1] = value >>> 16;
              this[offset + 2] = value >>> 8;
              this[offset + 3] = value & 255;
              return offset + 4;
            };
            function checkIEEE754(buf, value, offset, ext, max, min) {
              if (offset + ext > buf.length)
                throw new RangeError("Index out of range");
              if (offset < 0)
                throw new RangeError("Index out of range");
            }
            function writeFloat(buf, value, offset, littleEndian, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
              }
              ieee754.write(buf, value, offset, littleEndian, 23, 4);
              return offset + 4;
            }
            Buffer3.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
              return writeFloat(this, value, offset, true, noAssert);
            };
            Buffer3.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
              return writeFloat(this, value, offset, false, noAssert);
            };
            function writeDouble(buf, value, offset, littleEndian, noAssert) {
              value = +value;
              offset = offset >>> 0;
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
              }
              ieee754.write(buf, value, offset, littleEndian, 52, 8);
              return offset + 8;
            }
            Buffer3.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
              return writeDouble(this, value, offset, true, noAssert);
            };
            Buffer3.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
              return writeDouble(this, value, offset, false, noAssert);
            };
            Buffer3.prototype.copy = function copy(target, targetStart, start, end) {
              if (!Buffer3.isBuffer(target))
                throw new TypeError("argument should be a Buffer");
              if (!start)
                start = 0;
              if (!end && end !== 0)
                end = this.length;
              if (targetStart >= target.length)
                targetStart = target.length;
              if (!targetStart)
                targetStart = 0;
              if (end > 0 && end < start)
                end = start;
              if (end === start)
                return 0;
              if (target.length === 0 || this.length === 0)
                return 0;
              if (targetStart < 0) {
                throw new RangeError("targetStart out of bounds");
              }
              if (start < 0 || start >= this.length)
                throw new RangeError("Index out of range");
              if (end < 0)
                throw new RangeError("sourceEnd out of bounds");
              if (end > this.length)
                end = this.length;
              if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start;
              }
              var len = end - start;
              if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
                this.copyWithin(targetStart, start, end);
              } else if (this === target && start < targetStart && targetStart < end) {
                for (var i = len - 1; i >= 0; --i) {
                  target[i + targetStart] = this[i + start];
                }
              } else {
                Uint8Array.prototype.set.call(
                  target,
                  this.subarray(start, end),
                  targetStart
                );
              }
              return len;
            };
            Buffer3.prototype.fill = function fill(val, start, end, encoding) {
              if (typeof val === "string") {
                if (typeof start === "string") {
                  encoding = start;
                  start = 0;
                  end = this.length;
                } else if (typeof end === "string") {
                  encoding = end;
                  end = this.length;
                }
                if (encoding !== void 0 && typeof encoding !== "string") {
                  throw new TypeError("encoding must be a string");
                }
                if (typeof encoding === "string" && !Buffer3.isEncoding(encoding)) {
                  throw new TypeError("Unknown encoding: " + encoding);
                }
                if (val.length === 1) {
                  var code = val.charCodeAt(0);
                  if (encoding === "utf8" && code < 128 || encoding === "latin1") {
                    val = code;
                  }
                }
              } else if (typeof val === "number") {
                val = val & 255;
              }
              if (start < 0 || this.length < start || this.length < end) {
                throw new RangeError("Out of range index");
              }
              if (end <= start) {
                return this;
              }
              start = start >>> 0;
              end = end === void 0 ? this.length : end >>> 0;
              if (!val)
                val = 0;
              var i;
              if (typeof val === "number") {
                for (i = start; i < end; ++i) {
                  this[i] = val;
                }
              } else {
                var bytes = Buffer3.isBuffer(val) ? val : Buffer3.from(val, encoding);
                var len = bytes.length;
                if (len === 0) {
                  throw new TypeError('The value "' + val + '" is invalid for argument "value"');
                }
                for (i = 0; i < end - start; ++i) {
                  this[i + start] = bytes[i % len];
                }
              }
              return this;
            };
            var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
            function base64clean(str) {
              str = str.split("=")[0];
              str = str.trim().replace(INVALID_BASE64_RE, "");
              if (str.length < 2)
                return "";
              while (str.length % 4 !== 0) {
                str = str + "=";
              }
              return str;
            }
            function toHex(n) {
              if (n < 16)
                return "0" + n.toString(16);
              return n.toString(16);
            }
            function utf8ToBytes(string, units) {
              units = units || Infinity;
              var codePoint;
              var length = string.length;
              var leadSurrogate = null;
              var bytes = [];
              for (var i = 0; i < length; ++i) {
                codePoint = string.charCodeAt(i);
                if (codePoint > 55295 && codePoint < 57344) {
                  if (!leadSurrogate) {
                    if (codePoint > 56319) {
                      if ((units -= 3) > -1)
                        bytes.push(239, 191, 189);
                      continue;
                    } else if (i + 1 === length) {
                      if ((units -= 3) > -1)
                        bytes.push(239, 191, 189);
                      continue;
                    }
                    leadSurrogate = codePoint;
                    continue;
                  }
                  if (codePoint < 56320) {
                    if ((units -= 3) > -1)
                      bytes.push(239, 191, 189);
                    leadSurrogate = codePoint;
                    continue;
                  }
                  codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
                } else if (leadSurrogate) {
                  if ((units -= 3) > -1)
                    bytes.push(239, 191, 189);
                }
                leadSurrogate = null;
                if (codePoint < 128) {
                  if ((units -= 1) < 0)
                    break;
                  bytes.push(codePoint);
                } else if (codePoint < 2048) {
                  if ((units -= 2) < 0)
                    break;
                  bytes.push(
                    codePoint >> 6 | 192,
                    codePoint & 63 | 128
                  );
                } else if (codePoint < 65536) {
                  if ((units -= 3) < 0)
                    break;
                  bytes.push(
                    codePoint >> 12 | 224,
                    codePoint >> 6 & 63 | 128,
                    codePoint & 63 | 128
                  );
                } else if (codePoint < 1114112) {
                  if ((units -= 4) < 0)
                    break;
                  bytes.push(
                    codePoint >> 18 | 240,
                    codePoint >> 12 & 63 | 128,
                    codePoint >> 6 & 63 | 128,
                    codePoint & 63 | 128
                  );
                } else {
                  throw new Error("Invalid code point");
                }
              }
              return bytes;
            }
            function asciiToBytes(str) {
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                byteArray.push(str.charCodeAt(i) & 255);
              }
              return byteArray;
            }
            function utf16leToBytes(str, units) {
              var c, hi, lo;
              var byteArray = [];
              for (var i = 0; i < str.length; ++i) {
                if ((units -= 2) < 0)
                  break;
                c = str.charCodeAt(i);
                hi = c >> 8;
                lo = c % 256;
                byteArray.push(lo);
                byteArray.push(hi);
              }
              return byteArray;
            }
            function base64ToBytes(str) {
              return base64.toByteArray(base64clean(str));
            }
            function blitBuffer(src, dst, offset, length) {
              for (var i = 0; i < length; ++i) {
                if (i + offset >= dst.length || i >= src.length)
                  break;
                dst[i + offset] = src[i];
              }
              return i;
            }
            function isInstance(obj, type) {
              return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
            }
            function numberIsNaN(obj) {
              return obj !== obj;
            }
          }).call(this);
        }).call(this, require2("buffer").Buffer);
      }, { "base64-js": 35, "buffer": 38, "ieee754": 40 }], 39: [function(require2, module2, exports2) {
        "use strict";
        var R = typeof Reflect === "object" ? Reflect : null;
        var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
          return Function.prototype.apply.call(target, receiver, args);
        };
        var ReflectOwnKeys;
        if (R && typeof R.ownKeys === "function") {
          ReflectOwnKeys = R.ownKeys;
        } else if (Object.getOwnPropertySymbols) {
          ReflectOwnKeys = function ReflectOwnKeys2(target) {
            return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
          };
        } else {
          ReflectOwnKeys = function ReflectOwnKeys2(target) {
            return Object.getOwnPropertyNames(target);
          };
        }
        function ProcessEmitWarning(warning) {
          if (console && console.warn)
            console.warn(warning);
        }
        var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
          return value !== value;
        };
        function EventEmitter() {
          EventEmitter.init.call(this);
        }
        module2.exports = EventEmitter;
        module2.exports.once = once;
        EventEmitter.EventEmitter = EventEmitter;
        EventEmitter.prototype._events = void 0;
        EventEmitter.prototype._eventsCount = 0;
        EventEmitter.prototype._maxListeners = void 0;
        var defaultMaxListeners = 10;
        function checkListener(listener) {
          if (typeof listener !== "function") {
            throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
          }
        }
        Object.defineProperty(EventEmitter, "defaultMaxListeners", {
          enumerable: true,
          get: function() {
            return defaultMaxListeners;
          },
          set: function(arg) {
            if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
              throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
            }
            defaultMaxListeners = arg;
          }
        });
        EventEmitter.init = function() {
          if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
            this._events = /* @__PURE__ */ Object.create(null);
            this._eventsCount = 0;
          }
          this._maxListeners = this._maxListeners || void 0;
        };
        EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
          if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
            throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
          }
          this._maxListeners = n;
          return this;
        };
        function _getMaxListeners(that) {
          if (that._maxListeners === void 0)
            return EventEmitter.defaultMaxListeners;
          return that._maxListeners;
        }
        EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
          return _getMaxListeners(this);
        };
        EventEmitter.prototype.emit = function emit(type) {
          var args = [];
          for (var i = 1; i < arguments.length; i++)
            args.push(arguments[i]);
          var doError = type === "error";
          var events = this._events;
          if (events !== void 0)
            doError = doError && events.error === void 0;
          else if (!doError)
            return false;
          if (doError) {
            var er;
            if (args.length > 0)
              er = args[0];
            if (er instanceof Error) {
              throw er;
            }
            var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
            err.context = er;
            throw err;
          }
          var handler = events[type];
          if (handler === void 0)
            return false;
          if (typeof handler === "function") {
            ReflectApply(handler, this, args);
          } else {
            var len = handler.length;
            var listeners = arrayClone(handler, len);
            for (var i = 0; i < len; ++i)
              ReflectApply(listeners[i], this, args);
          }
          return true;
        };
        function _addListener(target, type, listener, prepend) {
          var m;
          var events;
          var existing;
          checkListener(listener);
          events = target._events;
          if (events === void 0) {
            events = target._events = /* @__PURE__ */ Object.create(null);
            target._eventsCount = 0;
          } else {
            if (events.newListener !== void 0) {
              target.emit(
                "newListener",
                type,
                listener.listener ? listener.listener : listener
              );
              events = target._events;
            }
            existing = events[type];
          }
          if (existing === void 0) {
            existing = events[type] = listener;
            ++target._eventsCount;
          } else {
            if (typeof existing === "function") {
              existing = events[type] = prepend ? [listener, existing] : [existing, listener];
            } else if (prepend) {
              existing.unshift(listener);
            } else {
              existing.push(listener);
            }
            m = _getMaxListeners(target);
            if (m > 0 && existing.length > m && !existing.warned) {
              existing.warned = true;
              var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
              w.name = "MaxListenersExceededWarning";
              w.emitter = target;
              w.type = type;
              w.count = existing.length;
              ProcessEmitWarning(w);
            }
          }
          return target;
        }
        EventEmitter.prototype.addListener = function addListener(type, listener) {
          return _addListener(this, type, listener, false);
        };
        EventEmitter.prototype.on = EventEmitter.prototype.addListener;
        EventEmitter.prototype.prependListener = function prependListener(type, listener) {
          return _addListener(this, type, listener, true);
        };
        function onceWrapper() {
          if (!this.fired) {
            this.target.removeListener(this.type, this.wrapFn);
            this.fired = true;
            if (arguments.length === 0)
              return this.listener.call(this.target);
            return this.listener.apply(this.target, arguments);
          }
        }
        function _onceWrap(target, type, listener) {
          var state = { fired: false, wrapFn: void 0, target, type, listener };
          var wrapped = onceWrapper.bind(state);
          wrapped.listener = listener;
          state.wrapFn = wrapped;
          return wrapped;
        }
        EventEmitter.prototype.once = function once2(type, listener) {
          checkListener(listener);
          this.on(type, _onceWrap(this, type, listener));
          return this;
        };
        EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
          checkListener(listener);
          this.prependListener(type, _onceWrap(this, type, listener));
          return this;
        };
        EventEmitter.prototype.removeListener = function removeListener(type, listener) {
          var list, events, position, i, originalListener;
          checkListener(listener);
          events = this._events;
          if (events === void 0)
            return this;
          list = events[type];
          if (list === void 0)
            return this;
          if (list === listener || list.listener === listener) {
            if (--this._eventsCount === 0)
              this._events = /* @__PURE__ */ Object.create(null);
            else {
              delete events[type];
              if (events.removeListener)
                this.emit("removeListener", type, list.listener || listener);
            }
          } else if (typeof list !== "function") {
            position = -1;
            for (i = list.length - 1; i >= 0; i--) {
              if (list[i] === listener || list[i].listener === listener) {
                originalListener = list[i].listener;
                position = i;
                break;
              }
            }
            if (position < 0)
              return this;
            if (position === 0)
              list.shift();
            else {
              spliceOne(list, position);
            }
            if (list.length === 1)
              events[type] = list[0];
            if (events.removeListener !== void 0)
              this.emit("removeListener", type, originalListener || listener);
          }
          return this;
        };
        EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
        EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
          var listeners, events, i;
          events = this._events;
          if (events === void 0)
            return this;
          if (events.removeListener === void 0) {
            if (arguments.length === 0) {
              this._events = /* @__PURE__ */ Object.create(null);
              this._eventsCount = 0;
            } else if (events[type] !== void 0) {
              if (--this._eventsCount === 0)
                this._events = /* @__PURE__ */ Object.create(null);
              else
                delete events[type];
            }
            return this;
          }
          if (arguments.length === 0) {
            var keys = Object.keys(events);
            var key;
            for (i = 0; i < keys.length; ++i) {
              key = keys[i];
              if (key === "removeListener")
                continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners("removeListener");
            this._events = /* @__PURE__ */ Object.create(null);
            this._eventsCount = 0;
            return this;
          }
          listeners = events[type];
          if (typeof listeners === "function") {
            this.removeListener(type, listeners);
          } else if (listeners !== void 0) {
            for (i = listeners.length - 1; i >= 0; i--) {
              this.removeListener(type, listeners[i]);
            }
          }
          return this;
        };
        function _listeners(target, type, unwrap) {
          var events = target._events;
          if (events === void 0)
            return [];
          var evlistener = events[type];
          if (evlistener === void 0)
            return [];
          if (typeof evlistener === "function")
            return unwrap ? [evlistener.listener || evlistener] : [evlistener];
          return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
        }
        EventEmitter.prototype.listeners = function listeners(type) {
          return _listeners(this, type, true);
        };
        EventEmitter.prototype.rawListeners = function rawListeners(type) {
          return _listeners(this, type, false);
        };
        EventEmitter.listenerCount = function(emitter, type) {
          if (typeof emitter.listenerCount === "function") {
            return emitter.listenerCount(type);
          } else {
            return listenerCount.call(emitter, type);
          }
        };
        EventEmitter.prototype.listenerCount = listenerCount;
        function listenerCount(type) {
          var events = this._events;
          if (events !== void 0) {
            var evlistener = events[type];
            if (typeof evlistener === "function") {
              return 1;
            } else if (evlistener !== void 0) {
              return evlistener.length;
            }
          }
          return 0;
        }
        EventEmitter.prototype.eventNames = function eventNames() {
          return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
        };
        function arrayClone(arr, n) {
          var copy = new Array(n);
          for (var i = 0; i < n; ++i)
            copy[i] = arr[i];
          return copy;
        }
        function spliceOne(list, index) {
          for (; index + 1 < list.length; index++)
            list[index] = list[index + 1];
          list.pop();
        }
        function unwrapListeners(arr) {
          var ret = new Array(arr.length);
          for (var i = 0; i < ret.length; ++i) {
            ret[i] = arr[i].listener || arr[i];
          }
          return ret;
        }
        function once(emitter, name) {
          return new Promise(function(resolve, reject) {
            function errorListener(err) {
              emitter.removeListener(name, resolver);
              reject(err);
            }
            function resolver() {
              if (typeof emitter.removeListener === "function") {
                emitter.removeListener("error", errorListener);
              }
              resolve([].slice.call(arguments));
            }
            ;
            eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
            if (name !== "error") {
              addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
            }
          });
        }
        function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
          if (typeof emitter.on === "function") {
            eventTargetAgnosticAddListener(emitter, "error", handler, flags);
          }
        }
        function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
          if (typeof emitter.on === "function") {
            if (flags.once) {
              emitter.once(name, listener);
            } else {
              emitter.on(name, listener);
            }
          } else if (typeof emitter.addEventListener === "function") {
            emitter.addEventListener(name, function wrapListener(arg) {
              if (flags.once) {
                emitter.removeEventListener(name, wrapListener);
              }
              listener(arg);
            });
          } else {
            throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
          }
        }
      }, {}], 40: [function(require2, module2, exports2) {
        exports2.read = function(buffer, offset, isLE, mLen, nBytes) {
          var e, m;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var nBits = -7;
          var i = isLE ? nBytes - 1 : 0;
          var d = isLE ? -1 : 1;
          var s = buffer[offset + i];
          i += d;
          e = s & (1 << -nBits) - 1;
          s >>= -nBits;
          nBits += eLen;
          for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
          }
          m = e & (1 << -nBits) - 1;
          e >>= -nBits;
          nBits += mLen;
          for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
          }
          if (e === 0) {
            e = 1 - eBias;
          } else if (e === eMax) {
            return m ? NaN : (s ? -1 : 1) * Infinity;
          } else {
            m = m + Math.pow(2, mLen);
            e = e - eBias;
          }
          return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
        };
        exports2.write = function(buffer, value, offset, isLE, mLen, nBytes) {
          var e, m, c;
          var eLen = nBytes * 8 - mLen - 1;
          var eMax = (1 << eLen) - 1;
          var eBias = eMax >> 1;
          var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
          var i = isLE ? 0 : nBytes - 1;
          var d = isLE ? 1 : -1;
          var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
          value = Math.abs(value);
          if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0;
            e = eMax;
          } else {
            e = Math.floor(Math.log(value) / Math.LN2);
            if (value * (c = Math.pow(2, -e)) < 1) {
              e--;
              c *= 2;
            }
            if (e + eBias >= 1) {
              value += rt / c;
            } else {
              value += rt * Math.pow(2, 1 - eBias);
            }
            if (value * c >= 2) {
              e++;
              c /= 2;
            }
            if (e + eBias >= eMax) {
              m = 0;
              e = eMax;
            } else if (e + eBias >= 1) {
              m = (value * c - 1) * Math.pow(2, mLen);
              e = e + eBias;
            } else {
              m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
              e = 0;
            }
          }
          for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
          }
          e = e << mLen | m;
          eLen += mLen;
          for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
          }
          buffer[offset + i - d] |= s * 128;
        };
      }, {}], 41: [function(require2, module2, exports2) {
        if (typeof Object.create === "function") {
          module2.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor;
              ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }
              });
            }
          };
        } else {
          module2.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor;
              var TempCtor = function() {
              };
              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            }
          };
        }
      }, {}], 42: [function(require2, module2, exports2) {
        "use strict";
        const tspan = require2("tspan");
        const circle = "M 4,0 C 4,1.1 3.1,2 2,2 0.9,2 0,1.1 0,0 c 0,-1.1 0.9,-2 2,-2 1.1,0 2,0.9 2,2 z";
        const buf1 = "M -11,-6 -11,6 0,0 z m -5,6 5,0";
        const and2 = "m -16,-10 5,0 c 6,0 11,4 11,10 0,6 -5,10 -11,10 l -5,0 z";
        const or2 = "m -18,-10 4,0 c 6,0 12,5 14,10 -2,5 -8,10 -14,10 l -4,0 c 2.5,-5 2.5,-15 0,-20 z";
        const xor2 = "m -21,-10 c 1,3 2,6 2,10 m 0,0 c 0,4 -1,7 -2,10 m 3,-20 4,0 c 6,0 12,5 14,10 -2,5 -8,10 -14,10 l -4,0 c 1,-3 2,-6 2,-10 0,-4 -1,-7 -2,-10 z";
        const circle2 = "c 0,4.418278 -3.581722,8 -8,8 -4.418278,0 -8,-3.581722 -8,-8 0,-4.418278 3.581722,-8 8,-8 4.418278,0 8,3.581722 8,8 z";
        const gates = {
          "=": buf1,
          "~": buf1 + circle,
          "&": and2,
          "~&": and2 + circle,
          "|": or2,
          "~|": or2 + circle,
          "^": xor2,
          "~^": xor2 + circle,
          "+": "m -8,5 0,-10 m -5,5 10,0 m 3,0" + circle2,
          "*": "m -4,4 -8,-8 m 0,8 8,-8  m 4,4" + circle2,
          "-": "m -3,0 -10,0 m 13,0" + circle2
        };
        const aliasGates = {
          add: "+",
          mul: "*",
          sub: "-",
          and: "&",
          or: "|",
          xor: "^",
          andr: "&",
          orr: "|",
          xorr: "^",
          input: "="
        };
        Object.keys(aliasGates).reduce((res, key) => {
          res[key] = gates[aliasGates[key]];
          return res;
        }, gates);
        const gater1 = {
          is: (type) => gates[type] !== void 0,
          render: (type) => ["path", { class: "gate", d: gates[type] }]
        };
        const iec = {
          eq: "==",
          ne: "!=",
          slt: "<",
          sle: "<=",
          sgt: ">",
          sge: ">=",
          ult: "<",
          ule: "<=",
          ugt: ">",
          uge: ">=",
          BUF: 1,
          INV: 1,
          AND: "&",
          NAND: "&",
          OR: "\u22651",
          NOR: "\u22651",
          XOR: "=1",
          XNOR: "=1",
          box: "",
          MUX: "M"
        };
        const circled = { INV: 1, NAND: 1, NOR: 1, XNOR: 1 };
        const gater2 = {
          is: (type) => iec[type] !== void 0,
          render: (type, ymin, ymax) => {
            if (ymin === ymax) {
              ymin = -4;
              ymax = 4;
            }
            return [
              "g",
              ["path", {
                class: "gate",
                d: "m -16," + (ymin - 3) + " 16,0 0," + (ymax - ymin + 6) + " -16,0 z" + (circled[type] ? circle : "")
              }],
              ["text", { x: -14, y: 4, class: "wirename" }].concat(tspan.parse(iec[type]))
            ];
          }
        };
        function drawBody(type, ymin, ymax) {
          if (gater1.is(type)) {
            return gater1.render(type);
          }
          if (gater2.is(type)) {
            return gater2.render(type, ymin, ymax);
          }
          return ["text", { x: -14, y: 4, class: "wirename" }].concat(tspan.parse(type));
        }
        module2.exports = drawBody;
      }, { "tspan": 74 }], 43: [function(require2, module2, exports2) {
        "use strict";
        const tspan = require2("tspan");
        const drawGate = require2("./draw_gate.js");
        function drawBoxes(tree, xmax) {
          const ret = ["g"];
          const spec = [];
          if (Array.isArray(tree)) {
            spec.push(tree[0].name);
            spec.push([32 * (xmax - tree[0].x), 8 * tree[0].y]);
            for (let i = 1; i < tree.length; i++) {
              const branch = tree[i];
              if (Array.isArray(branch)) {
                spec.push([32 * (xmax - branch[0].x), 8 * branch[0].y]);
              } else {
                spec.push([32 * (xmax - branch.x), 8 * branch.y]);
              }
            }
            ret.push(drawGate(spec));
            for (let i = 1; i < tree.length; i++) {
              const branch = tree[i];
              ret.push(drawBoxes(branch, xmax));
            }
            return ret;
          }
          const fname = tree.name;
          const fx = 32 * (xmax - tree.x);
          const fy = 8 * tree.y;
          ret.push(
            [
              "g",
              { transform: "translate(" + fx + "," + fy + ")" },
              ["title"].concat(tspan.parse(fname)),
              ["path", { d: "M 2,0 a 2,2 0 1 1 -4,0 2,2 0 1 1 4,0 z" }],
              ["text", { x: -4, y: 4, class: "pinname" }].concat(tspan.parse(fname))
            ]
          );
          return ret;
        }
        module2.exports = drawBoxes;
      }, { "./draw_gate.js": 44, "tspan": 74 }], 44: [function(require2, module2, exports2) {
        "use strict";
        const tspan = require2("tspan");
        const drawBody = require2("./draw_body.js");
        function drawGate(spec) {
          const ilen = spec.length;
          const ys = [];
          for (let i = 2; i < ilen; i++) {
            ys.push(spec[i][1]);
          }
          const ret = ["g"];
          const ymin = Math.min.apply(null, ys);
          const ymax = Math.max.apply(null, ys);
          ret.push([
            "g",
            { transform: "translate(16,0)" },
            ["path", {
              d: "M" + spec[2][0] + "," + ymin + " " + spec[2][0] + "," + ymax,
              class: "wire"
            }]
          ]);
          for (let i = 2; i < ilen; i++) {
            ret.push([
              "g",
              ["path", {
                d: "m" + spec[i][0] + "," + spec[i][1] + " 16,0",
                class: "wire"
              }]
            ]);
          }
          ret.push([
            "g",
            { transform: "translate(" + spec[1][0] + "," + spec[1][1] + ")" },
            ["title"].concat(tspan.parse(spec[0])),
            drawBody(spec[0], ymin - spec[1][1], ymax - spec[1][1])
          ]);
          return ret;
        }
        module2.exports = drawGate;
      }, { "./draw_body.js": 42, "tspan": 74 }], 45: [function(require2, module2, exports2) {
        "use strict";
        function insertSVGTemplateAssign() {
          return ["style", ".pinname {font-size:12px; font-style:normal; font-variant:normal; font-weight:500; font-stretch:normal; text-align:center; text-anchor:end; font-family:Helvetica} .wirename {font-size:12px; font-style:normal; font-variant:normal; font-weight:500; font-stretch:normal; text-align:center; text-anchor:start; font-family:Helvetica} .wirename:hover {fill:blue} .gate {color:#000; fill:#ffc; fill-opacity: 1;stroke:#000; stroke-width:1; stroke-opacity:1} .gate:hover {fill:red !important; } .wire {fill:none; stroke:#000; stroke-width:1; stroke-opacity:1} .grid {fill:#fff; fill-opacity:1; stroke:none}"];
        }
        module2.exports = insertSVGTemplateAssign;
      }, {}], 46: [function(require2, module2, exports2) {
        "use strict";
        const render = require2("./render.js");
        const drawBoxes = require2("./draw_boxes.js");
        const insertSVGTemplateAssign = require2("./insert-svg-template-assign.js");
        function renderAssign(index, source2) {
          let state = { x: 0, y: 2, xmax: 0 };
          const tree = source2.assign;
          const ilen = tree.length;
          for (let i = 0; i < ilen; i++) {
            state = render(tree[i], state);
            state.x++;
          }
          const xmax = state.xmax + 3;
          const svg = ["g"];
          for (let i = 0; i < ilen; i++) {
            svg.push(drawBoxes(tree[i], xmax));
          }
          const width = 32 * (xmax + 1) + 1;
          const height = 8 * (state.y + 1) - 7;
          return [
            "svg",
            {
              id: "svgcontent_" + index,
              viewBox: "0 0 " + width + " " + height,
              width,
              height
            },
            insertSVGTemplateAssign(),
            ["g", { transform: "translate(0.5, 0.5)" }, svg]
          ];
        }
        module2.exports = renderAssign;
      }, { "./draw_boxes.js": 43, "./insert-svg-template-assign.js": 45, "./render.js": 47 }], 47: [function(require2, module2, exports2) {
        "use strict";
        function render(tree, state) {
          state.xmax = Math.max(state.xmax, state.x);
          const y = state.y;
          const ilen = tree.length;
          for (let i = 1; i < ilen; i++) {
            const branch = tree[i];
            if (Array.isArray(branch)) {
              state = render(branch, {
                x: state.x + 1,
                y: state.y,
                xmax: state.xmax
              });
            } else {
              tree[i] = {
                name: branch,
                x: state.x + 1,
                y: state.y
              };
              state.y += 2;
            }
          }
          tree[0] = {
            name: tree[0],
            x: state.x,
            y: Math.round((y + (state.y - 2)) / 2)
          };
          state.x--;
          return state;
        }
        module2.exports = render;
      }, {}], 48: [function(require2, module2, exports2) {
        "use strict";
        const w3 = {
          svg: "http://www.w3.org/2000/svg",
          xlink: "http://www.w3.org/1999/xlink",
          xmlns: "http://www.w3.org/XML/1998/namespace"
        };
        module2.exports = (w, h) => ["svg", {
          xmlns: w3.svg,
          "xmlns:xlink": w3.xlink,
          width: w,
          height: h,
          viewBox: "0 0 " + w + " " + h
        }];
      }, {}], 49: [function(require2, module2, exports2) {
        "use strict";
        const parse2 = require2("./parse.js");
        const stringify = require2("./stringify.js");
        const traverse = require2("./traverse.js");
        const renderer = require2("./renderer.js");
        const tt = require2("./tt.js");
        const genSvg = require2("./gen-svg.js");
        exports2.renderer = renderer;
        exports2.parse = parse2;
        exports2.stringify = stringify;
        exports2.traverse = traverse;
        exports2.tt = tt;
        exports2.gen = {
          svg: genSvg
        };
        exports2.p = parse2;
        exports2.s = stringify;
        exports2.t = traverse;
      }, { "./gen-svg.js": 48, "./parse.js": 50, "./renderer.js": 51, "./stringify.js": 52, "./traverse.js": 53, "./tt.js": 54 }], 50: [function(require2, module2, exports2) {
        "use strict";
        const parser = require2("sax").parser;
        function parse2(data, config) {
          const res = [];
          const stack = [];
          let pointer = res;
          let trim = true;
          let strict = true;
          if (config && config.strict !== void 0) {
            strict = config.strict;
          }
          if (config !== void 0) {
            if (config.trim !== void 0) {
              trim = config.trim;
            }
          }
          const p = parser(strict);
          p.ontext = function(e) {
            if (trim === false || e.trim() !== "") {
              pointer.push(e);
            }
          };
          p.onopentag = function(e) {
            const leaf = [e.name, e.attributes];
            stack.push(pointer);
            pointer.push(leaf);
            pointer = leaf;
          };
          p.onclosetag = function() {
            pointer = stack.pop();
          };
          p.oncdata = function(e) {
            if (trim === false || e.trim() !== "") {
              pointer.push("<![CDATA[" + e + "]]>");
            }
          };
          p.write(data).close();
          return res[0];
        }
        module2.exports = parse2;
      }, { "sax": 57 }], 51: [function(require2, module2, exports2) {
        "use strict";
        const stringify = require2("./stringify.js");
        const renderer = (root) => {
          const content = typeof root === "string" ? document.getElementById(root) : root;
          return (ml) => {
            let str;
            try {
              str = stringify(ml);
              content.innerHTML = str;
            } catch (err) {
              console.log(ml);
            }
          };
        };
        module2.exports = renderer;
      }, { "./stringify.js": 52 }], 52: [function(require2, module2, exports2) {
        "use strict";
        const isObject = (o) => o && Object.prototype.toString.call(o) === "[object Object]";
        function indenter(indentation) {
          if (!(indentation > 0)) {
            return (txt) => txt;
          }
          var space = " ".repeat(indentation);
          return (txt) => {
            if (typeof txt !== "string") {
              return txt;
            }
            const arr = txt.split("\n");
            if (arr.length === 1) {
              return space + txt;
            }
            return arr.map((e) => e.trim() === "" ? e : space + e).join("\n");
          };
        }
        const clean = (txt) => txt.split("\n").filter((e) => e.trim() !== "").join("\n");
        function stringify(a, indentation) {
          const cr = indentation > 0 ? "\n" : "";
          const indent = indenter(indentation);
          function rec(a2) {
            let body = "";
            let isFlat = true;
            let res;
            const isEmpty = a2.some((e, i, arr) => {
              if (i === 0) {
                res = "<" + e;
                return arr.length === 1;
              }
              if (i === 1) {
                if (isObject(e)) {
                  Object.keys(e).map((key) => {
                    let val = e[key];
                    if (Array.isArray(val)) {
                      val = val.join(" ");
                    }
                    res += " " + key + '="' + val + '"';
                  });
                  if (arr.length === 2) {
                    return true;
                  }
                  res += ">";
                  return;
                }
                res += ">";
              }
              switch (typeof e) {
                case "string":
                case "number":
                case "boolean":
                case "undefined":
                  body += e + cr;
                  return;
              }
              isFlat = false;
              body += rec(e);
            });
            if (isEmpty) {
              return res + "/>" + cr;
            }
            return isFlat ? res + clean(body) + "</" + a2[0] + ">" + cr : res + cr + indent(body) + "</" + a2[0] + ">" + cr;
          }
          return rec(a);
        }
        module2.exports = stringify;
      }, {}], 53: [function(require2, module2, exports2) {
        "use strict";
        function skipFn() {
          this._skip = true;
        }
        function removeFn() {
          this._remove = true;
        }
        function nameFn(name) {
          this._name = name;
        }
        function replaceFn(node) {
          this._replace = node;
        }
        function traverse(origin, callbacks) {
          const empty = function() {
          };
          const enter = callbacks && callbacks.enter || empty;
          const leave = callbacks && callbacks.leave || empty;
          function rec(tree, parent) {
            if (tree === void 0)
              return;
            if (tree === null)
              return;
            if (tree === true)
              return;
            if (tree === false)
              return;
            const node = {
              attr: {},
              full: tree
            };
            const cxt = {
              name: nameFn,
              skip: skipFn,
              remove: removeFn,
              replace: replaceFn,
              _name: void 0,
              _skip: false,
              _remove: false,
              _replace: void 0
            };
            let e1IsNotAnObject = true;
            switch (Object.prototype.toString.call(tree)) {
              case "[object String]":
              case "[object Number]":
                return;
              case "[object Array]":
                tree.some(function(e, i) {
                  if (i === 0) {
                    node.name = e;
                    return false;
                  }
                  if (i === 1) {
                    if (Object.prototype.toString.call(e) === "[object Object]") {
                      e1IsNotAnObject = false;
                      node.attr = e;
                    }
                    return true;
                  }
                });
                enter.call(cxt, node, parent);
                if (cxt._name) {
                  tree[0] = cxt._name;
                }
                if (cxt._replace) {
                  return cxt._replace;
                }
                if (cxt._remove) {
                  return null;
                }
                if (!cxt._skip) {
                  let index = 0;
                  let ilen = tree.length;
                  while (index < ilen) {
                    if (index > 1 || index === 1 && e1IsNotAnObject) {
                      const returnRes = rec(tree[index], node);
                      if (returnRes === null) {
                        tree.splice(index, 1);
                        ilen -= 1;
                        continue;
                      }
                      if (returnRes) {
                        tree[index] = returnRes;
                      }
                    }
                    index += 1;
                  }
                  leave.call(cxt, node, parent);
                  if (cxt._name) {
                    tree[0] = cxt._name;
                  }
                  if (cxt._replace) {
                    return cxt._replace;
                  }
                  if (cxt._remove) {
                    return null;
                  }
                }
            }
          }
          rec(origin, void 0);
        }
        module2.exports = traverse;
      }, {}], 54: [function(require2, module2, exports2) {
        "use strict";
        module2.exports = (x, y, obj) => {
          let objt = {};
          if (x || y) {
            const tt = [x || 0].concat(y ? [y] : []);
            objt = { transform: "translate(" + tt.join(",") + ")" };
          }
          obj = typeof obj === "object" ? obj : {};
          return Object.assign(objt, obj);
        };
      }, {}], 55: [function(require2, module2, exports2) {
        var process = module2.exports = {};
        var cachedSetTimeout;
        var cachedClearTimeout;
        function defaultSetTimout() {
          throw new Error("setTimeout has not been defined");
        }
        function defaultClearTimeout() {
          throw new Error("clearTimeout has not been defined");
        }
        (function() {
          try {
            if (typeof setTimeout === "function") {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }
          try {
            if (typeof clearTimeout === "function") {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        })();
        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            return setTimeout(fun, 0);
          }
          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }
          try {
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e2) {
              return cachedSetTimeout.call(this, fun, 0);
            }
          }
        }
        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            return clearTimeout(marker);
          }
          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }
          try {
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              return cachedClearTimeout.call(null, marker);
            } catch (e2) {
              return cachedClearTimeout.call(this, marker);
            }
          }
        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;
        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }
          draining = false;
          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }
          if (queue.length) {
            drainQueue();
          }
        }
        function drainQueue() {
          if (draining) {
            return;
          }
          var timeout = runTimeout(cleanUpNextTick);
          draining = true;
          var len = queue.length;
          while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }
            queueIndex = -1;
            len = queue.length;
          }
          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }
        process.nextTick = function(fun) {
          var args = new Array(arguments.length - 1);
          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }
          queue.push(new Item(fun, args));
          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        };
        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }
        Item.prototype.run = function() {
          this.fun.apply(null, this.array);
        };
        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = "";
        process.versions = {};
        function noop() {
        }
        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;
        process.listeners = function(name) {
          return [];
        };
        process.binding = function(name) {
          throw new Error("process.binding is not supported");
        };
        process.cwd = function() {
          return "/";
        };
        process.chdir = function(dir) {
          throw new Error("process.chdir is not supported");
        };
        process.umask = function() {
          return 0;
        };
      }, {}], 56: [function(require2, module2, exports2) {
        var buffer = require2("buffer");
        var Buffer2 = buffer.Buffer;
        function copyProps(src, dst) {
          for (var key in src) {
            dst[key] = src[key];
          }
        }
        if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
          module2.exports = buffer;
        } else {
          copyProps(buffer, exports2);
          exports2.Buffer = SafeBuffer;
        }
        function SafeBuffer(arg, encodingOrOffset, length) {
          return Buffer2(arg, encodingOrOffset, length);
        }
        SafeBuffer.prototype = Object.create(Buffer2.prototype);
        copyProps(Buffer2, SafeBuffer);
        SafeBuffer.from = function(arg, encodingOrOffset, length) {
          if (typeof arg === "number") {
            throw new TypeError("Argument must not be a number");
          }
          return Buffer2(arg, encodingOrOffset, length);
        };
        SafeBuffer.alloc = function(size, fill, encoding) {
          if (typeof size !== "number") {
            throw new TypeError("Argument must be a number");
          }
          var buf = Buffer2(size);
          if (fill !== void 0) {
            if (typeof encoding === "string") {
              buf.fill(fill, encoding);
            } else {
              buf.fill(fill);
            }
          } else {
            buf.fill(0);
          }
          return buf;
        };
        SafeBuffer.allocUnsafe = function(size) {
          if (typeof size !== "number") {
            throw new TypeError("Argument must be a number");
          }
          return Buffer2(size);
        };
        SafeBuffer.allocUnsafeSlow = function(size) {
          if (typeof size !== "number") {
            throw new TypeError("Argument must be a number");
          }
          return buffer.SlowBuffer(size);
        };
      }, { "buffer": 38 }], 57: [function(require2, module2, exports2) {
        (function(Buffer2) {
          (function() {
            ;
            (function(sax) {
              sax.parser = function(strict, opt) {
                return new SAXParser(strict, opt);
              };
              sax.SAXParser = SAXParser;
              sax.SAXStream = SAXStream;
              sax.createStream = createStream;
              sax.MAX_BUFFER_LENGTH = 64 * 1024;
              var buffers = [
                "comment",
                "sgmlDecl",
                "textNode",
                "tagName",
                "doctype",
                "procInstName",
                "procInstBody",
                "entity",
                "attribName",
                "attribValue",
                "cdata",
                "script"
              ];
              sax.EVENTS = [
                "text",
                "processinginstruction",
                "sgmldeclaration",
                "doctype",
                "comment",
                "opentagstart",
                "attribute",
                "opentag",
                "closetag",
                "opencdata",
                "cdata",
                "closecdata",
                "error",
                "end",
                "ready",
                "script",
                "opennamespace",
                "closenamespace"
              ];
              function SAXParser(strict, opt) {
                if (!(this instanceof SAXParser)) {
                  return new SAXParser(strict, opt);
                }
                var parser = this;
                clearBuffers(parser);
                parser.q = parser.c = "";
                parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
                parser.opt = opt || {};
                parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
                parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase";
                parser.tags = [];
                parser.closed = parser.closedRoot = parser.sawRoot = false;
                parser.tag = parser.error = null;
                parser.strict = !!strict;
                parser.noscript = !!(strict || parser.opt.noscript);
                parser.state = S.BEGIN;
                parser.strictEntities = parser.opt.strictEntities;
                parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
                parser.attribList = [];
                if (parser.opt.xmlns) {
                  parser.ns = Object.create(rootNS);
                }
                parser.trackPosition = parser.opt.position !== false;
                if (parser.trackPosition) {
                  parser.position = parser.line = parser.column = 0;
                }
                emit(parser, "onready");
              }
              if (!Object.create) {
                Object.create = function(o) {
                  function F() {
                  }
                  F.prototype = o;
                  var newf = new F();
                  return newf;
                };
              }
              if (!Object.keys) {
                Object.keys = function(o) {
                  var a = [];
                  for (var i in o)
                    if (o.hasOwnProperty(i))
                      a.push(i);
                  return a;
                };
              }
              function checkBufferLength(parser) {
                var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
                var maxActual = 0;
                for (var i = 0, l = buffers.length; i < l; i++) {
                  var len = parser[buffers[i]].length;
                  if (len > maxAllowed) {
                    switch (buffers[i]) {
                      case "textNode":
                        closeText(parser);
                        break;
                      case "cdata":
                        emitNode(parser, "oncdata", parser.cdata);
                        parser.cdata = "";
                        break;
                      case "script":
                        emitNode(parser, "onscript", parser.script);
                        parser.script = "";
                        break;
                      default:
                        error(parser, "Max buffer length exceeded: " + buffers[i]);
                    }
                  }
                  maxActual = Math.max(maxActual, len);
                }
                var m = sax.MAX_BUFFER_LENGTH - maxActual;
                parser.bufferCheckPosition = m + parser.position;
              }
              function clearBuffers(parser) {
                for (var i = 0, l = buffers.length; i < l; i++) {
                  parser[buffers[i]] = "";
                }
              }
              function flushBuffers(parser) {
                closeText(parser);
                if (parser.cdata !== "") {
                  emitNode(parser, "oncdata", parser.cdata);
                  parser.cdata = "";
                }
                if (parser.script !== "") {
                  emitNode(parser, "onscript", parser.script);
                  parser.script = "";
                }
              }
              SAXParser.prototype = {
                end: function() {
                  end(this);
                },
                write,
                resume: function() {
                  this.error = null;
                  return this;
                },
                close: function() {
                  return this.write(null);
                },
                flush: function() {
                  flushBuffers(this);
                }
              };
              var Stream;
              try {
                Stream = require2("stream").Stream;
              } catch (ex) {
                Stream = function() {
                };
              }
              var streamWraps = sax.EVENTS.filter(function(ev) {
                return ev !== "error" && ev !== "end";
              });
              function createStream(strict, opt) {
                return new SAXStream(strict, opt);
              }
              function SAXStream(strict, opt) {
                if (!(this instanceof SAXStream)) {
                  return new SAXStream(strict, opt);
                }
                Stream.apply(this);
                this._parser = new SAXParser(strict, opt);
                this.writable = true;
                this.readable = true;
                var me = this;
                this._parser.onend = function() {
                  me.emit("end");
                };
                this._parser.onerror = function(er) {
                  me.emit("error", er);
                  me._parser.error = null;
                };
                this._decoder = null;
                streamWraps.forEach(function(ev) {
                  Object.defineProperty(me, "on" + ev, {
                    get: function() {
                      return me._parser["on" + ev];
                    },
                    set: function(h) {
                      if (!h) {
                        me.removeAllListeners(ev);
                        me._parser["on" + ev] = h;
                        return h;
                      }
                      me.on(ev, h);
                    },
                    enumerable: true,
                    configurable: false
                  });
                });
              }
              SAXStream.prototype = Object.create(Stream.prototype, {
                constructor: {
                  value: SAXStream
                }
              });
              SAXStream.prototype.write = function(data) {
                if (typeof Buffer2 === "function" && typeof Buffer2.isBuffer === "function" && Buffer2.isBuffer(data)) {
                  if (!this._decoder) {
                    var SD = require2("string_decoder").StringDecoder;
                    this._decoder = new SD("utf8");
                  }
                  data = this._decoder.write(data);
                }
                this._parser.write(data.toString());
                this.emit("data", data);
                return true;
              };
              SAXStream.prototype.end = function(chunk) {
                if (chunk && chunk.length) {
                  this.write(chunk);
                }
                this._parser.end();
                return true;
              };
              SAXStream.prototype.on = function(ev, handler) {
                var me = this;
                if (!me._parser["on" + ev] && streamWraps.indexOf(ev) !== -1) {
                  me._parser["on" + ev] = function() {
                    var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
                    args.splice(0, 0, ev);
                    me.emit.apply(me, args);
                  };
                }
                return Stream.prototype.on.call(me, ev, handler);
              };
              var CDATA = "[CDATA[";
              var DOCTYPE = "DOCTYPE";
              var XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
              var XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
              var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };
              var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
              var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
              var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
              var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
              function isWhitespace(c) {
                return c === " " || c === "\n" || c === "\r" || c === "	";
              }
              function isQuote(c) {
                return c === '"' || c === "'";
              }
              function isAttribEnd(c) {
                return c === ">" || isWhitespace(c);
              }
              function isMatch(regex, c) {
                return regex.test(c);
              }
              function notMatch(regex, c) {
                return !isMatch(regex, c);
              }
              var S = 0;
              sax.STATE = {
                BEGIN: S++,
                BEGIN_WHITESPACE: S++,
                TEXT: S++,
                TEXT_ENTITY: S++,
                OPEN_WAKA: S++,
                SGML_DECL: S++,
                SGML_DECL_QUOTED: S++,
                DOCTYPE: S++,
                DOCTYPE_QUOTED: S++,
                DOCTYPE_DTD: S++,
                DOCTYPE_DTD_QUOTED: S++,
                COMMENT_STARTING: S++,
                COMMENT: S++,
                COMMENT_ENDING: S++,
                COMMENT_ENDED: S++,
                CDATA: S++,
                CDATA_ENDING: S++,
                CDATA_ENDING_2: S++,
                PROC_INST: S++,
                PROC_INST_BODY: S++,
                PROC_INST_ENDING: S++,
                OPEN_TAG: S++,
                OPEN_TAG_SLASH: S++,
                ATTRIB: S++,
                ATTRIB_NAME: S++,
                ATTRIB_NAME_SAW_WHITE: S++,
                ATTRIB_VALUE: S++,
                ATTRIB_VALUE_QUOTED: S++,
                ATTRIB_VALUE_CLOSED: S++,
                ATTRIB_VALUE_UNQUOTED: S++,
                ATTRIB_VALUE_ENTITY_Q: S++,
                ATTRIB_VALUE_ENTITY_U: S++,
                CLOSE_TAG: S++,
                CLOSE_TAG_SAW_WHITE: S++,
                SCRIPT: S++,
                SCRIPT_ENDING: S++
              };
              sax.XML_ENTITIES = {
                "amp": "&",
                "gt": ">",
                "lt": "<",
                "quot": '"',
                "apos": "'"
              };
              sax.ENTITIES = {
                "amp": "&",
                "gt": ">",
                "lt": "<",
                "quot": '"',
                "apos": "'",
                "AElig": 198,
                "Aacute": 193,
                "Acirc": 194,
                "Agrave": 192,
                "Aring": 197,
                "Atilde": 195,
                "Auml": 196,
                "Ccedil": 199,
                "ETH": 208,
                "Eacute": 201,
                "Ecirc": 202,
                "Egrave": 200,
                "Euml": 203,
                "Iacute": 205,
                "Icirc": 206,
                "Igrave": 204,
                "Iuml": 207,
                "Ntilde": 209,
                "Oacute": 211,
                "Ocirc": 212,
                "Ograve": 210,
                "Oslash": 216,
                "Otilde": 213,
                "Ouml": 214,
                "THORN": 222,
                "Uacute": 218,
                "Ucirc": 219,
                "Ugrave": 217,
                "Uuml": 220,
                "Yacute": 221,
                "aacute": 225,
                "acirc": 226,
                "aelig": 230,
                "agrave": 224,
                "aring": 229,
                "atilde": 227,
                "auml": 228,
                "ccedil": 231,
                "eacute": 233,
                "ecirc": 234,
                "egrave": 232,
                "eth": 240,
                "euml": 235,
                "iacute": 237,
                "icirc": 238,
                "igrave": 236,
                "iuml": 239,
                "ntilde": 241,
                "oacute": 243,
                "ocirc": 244,
                "ograve": 242,
                "oslash": 248,
                "otilde": 245,
                "ouml": 246,
                "szlig": 223,
                "thorn": 254,
                "uacute": 250,
                "ucirc": 251,
                "ugrave": 249,
                "uuml": 252,
                "yacute": 253,
                "yuml": 255,
                "copy": 169,
                "reg": 174,
                "nbsp": 160,
                "iexcl": 161,
                "cent": 162,
                "pound": 163,
                "curren": 164,
                "yen": 165,
                "brvbar": 166,
                "sect": 167,
                "uml": 168,
                "ordf": 170,
                "laquo": 171,
                "not": 172,
                "shy": 173,
                "macr": 175,
                "deg": 176,
                "plusmn": 177,
                "sup1": 185,
                "sup2": 178,
                "sup3": 179,
                "acute": 180,
                "micro": 181,
                "para": 182,
                "middot": 183,
                "cedil": 184,
                "ordm": 186,
                "raquo": 187,
                "frac14": 188,
                "frac12": 189,
                "frac34": 190,
                "iquest": 191,
                "times": 215,
                "divide": 247,
                "OElig": 338,
                "oelig": 339,
                "Scaron": 352,
                "scaron": 353,
                "Yuml": 376,
                "fnof": 402,
                "circ": 710,
                "tilde": 732,
                "Alpha": 913,
                "Beta": 914,
                "Gamma": 915,
                "Delta": 916,
                "Epsilon": 917,
                "Zeta": 918,
                "Eta": 919,
                "Theta": 920,
                "Iota": 921,
                "Kappa": 922,
                "Lambda": 923,
                "Mu": 924,
                "Nu": 925,
                "Xi": 926,
                "Omicron": 927,
                "Pi": 928,
                "Rho": 929,
                "Sigma": 931,
                "Tau": 932,
                "Upsilon": 933,
                "Phi": 934,
                "Chi": 935,
                "Psi": 936,
                "Omega": 937,
                "alpha": 945,
                "beta": 946,
                "gamma": 947,
                "delta": 948,
                "epsilon": 949,
                "zeta": 950,
                "eta": 951,
                "theta": 952,
                "iota": 953,
                "kappa": 954,
                "lambda": 955,
                "mu": 956,
                "nu": 957,
                "xi": 958,
                "omicron": 959,
                "pi": 960,
                "rho": 961,
                "sigmaf": 962,
                "sigma": 963,
                "tau": 964,
                "upsilon": 965,
                "phi": 966,
                "chi": 967,
                "psi": 968,
                "omega": 969,
                "thetasym": 977,
                "upsih": 978,
                "piv": 982,
                "ensp": 8194,
                "emsp": 8195,
                "thinsp": 8201,
                "zwnj": 8204,
                "zwj": 8205,
                "lrm": 8206,
                "rlm": 8207,
                "ndash": 8211,
                "mdash": 8212,
                "lsquo": 8216,
                "rsquo": 8217,
                "sbquo": 8218,
                "ldquo": 8220,
                "rdquo": 8221,
                "bdquo": 8222,
                "dagger": 8224,
                "Dagger": 8225,
                "bull": 8226,
                "hellip": 8230,
                "permil": 8240,
                "prime": 8242,
                "Prime": 8243,
                "lsaquo": 8249,
                "rsaquo": 8250,
                "oline": 8254,
                "frasl": 8260,
                "euro": 8364,
                "image": 8465,
                "weierp": 8472,
                "real": 8476,
                "trade": 8482,
                "alefsym": 8501,
                "larr": 8592,
                "uarr": 8593,
                "rarr": 8594,
                "darr": 8595,
                "harr": 8596,
                "crarr": 8629,
                "lArr": 8656,
                "uArr": 8657,
                "rArr": 8658,
                "dArr": 8659,
                "hArr": 8660,
                "forall": 8704,
                "part": 8706,
                "exist": 8707,
                "empty": 8709,
                "nabla": 8711,
                "isin": 8712,
                "notin": 8713,
                "ni": 8715,
                "prod": 8719,
                "sum": 8721,
                "minus": 8722,
                "lowast": 8727,
                "radic": 8730,
                "prop": 8733,
                "infin": 8734,
                "ang": 8736,
                "and": 8743,
                "or": 8744,
                "cap": 8745,
                "cup": 8746,
                "int": 8747,
                "there4": 8756,
                "sim": 8764,
                "cong": 8773,
                "asymp": 8776,
                "ne": 8800,
                "equiv": 8801,
                "le": 8804,
                "ge": 8805,
                "sub": 8834,
                "sup": 8835,
                "nsub": 8836,
                "sube": 8838,
                "supe": 8839,
                "oplus": 8853,
                "otimes": 8855,
                "perp": 8869,
                "sdot": 8901,
                "lceil": 8968,
                "rceil": 8969,
                "lfloor": 8970,
                "rfloor": 8971,
                "lang": 9001,
                "rang": 9002,
                "loz": 9674,
                "spades": 9824,
                "clubs": 9827,
                "hearts": 9829,
                "diams": 9830
              };
              Object.keys(sax.ENTITIES).forEach(function(key) {
                var e = sax.ENTITIES[key];
                var s2 = typeof e === "number" ? String.fromCharCode(e) : e;
                sax.ENTITIES[key] = s2;
              });
              for (var s in sax.STATE) {
                sax.STATE[sax.STATE[s]] = s;
              }
              S = sax.STATE;
              function emit(parser, event, data) {
                parser[event] && parser[event](data);
              }
              function emitNode(parser, nodeType, data) {
                if (parser.textNode)
                  closeText(parser);
                emit(parser, nodeType, data);
              }
              function closeText(parser) {
                parser.textNode = textopts(parser.opt, parser.textNode);
                if (parser.textNode)
                  emit(parser, "ontext", parser.textNode);
                parser.textNode = "";
              }
              function textopts(opt, text) {
                if (opt.trim)
                  text = text.trim();
                if (opt.normalize)
                  text = text.replace(/\s+/g, " ");
                return text;
              }
              function error(parser, er) {
                closeText(parser);
                if (parser.trackPosition) {
                  er += "\nLine: " + parser.line + "\nColumn: " + parser.column + "\nChar: " + parser.c;
                }
                er = new Error(er);
                parser.error = er;
                emit(parser, "onerror", er);
                return parser;
              }
              function end(parser) {
                if (parser.sawRoot && !parser.closedRoot)
                  strictFail(parser, "Unclosed root tag");
                if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {
                  error(parser, "Unexpected end");
                }
                closeText(parser);
                parser.c = "";
                parser.closed = true;
                emit(parser, "onend");
                SAXParser.call(parser, parser.strict, parser.opt);
                return parser;
              }
              function strictFail(parser, message) {
                if (typeof parser !== "object" || !(parser instanceof SAXParser)) {
                  throw new Error("bad call to strictFail");
                }
                if (parser.strict) {
                  error(parser, message);
                }
              }
              function newTag(parser) {
                if (!parser.strict)
                  parser.tagName = parser.tagName[parser.looseCase]();
                var parent = parser.tags[parser.tags.length - 1] || parser;
                var tag = parser.tag = { name: parser.tagName, attributes: {} };
                if (parser.opt.xmlns) {
                  tag.ns = parent.ns;
                }
                parser.attribList.length = 0;
                emitNode(parser, "onopentagstart", tag);
              }
              function qname(name, attribute) {
                var i = name.indexOf(":");
                var qualName = i < 0 ? ["", name] : name.split(":");
                var prefix = qualName[0];
                var local = qualName[1];
                if (attribute && name === "xmlns") {
                  prefix = "xmlns";
                  local = "";
                }
                return { prefix, local };
              }
              function attrib(parser) {
                if (!parser.strict) {
                  parser.attribName = parser.attribName[parser.looseCase]();
                }
                if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {
                  parser.attribName = parser.attribValue = "";
                  return;
                }
                if (parser.opt.xmlns) {
                  var qn = qname(parser.attribName, true);
                  var prefix = qn.prefix;
                  var local = qn.local;
                  if (prefix === "xmlns") {
                    if (local === "xml" && parser.attribValue !== XML_NAMESPACE) {
                      strictFail(
                        parser,
                        "xml: prefix must be bound to " + XML_NAMESPACE + "\nActual: " + parser.attribValue
                      );
                    } else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) {
                      strictFail(
                        parser,
                        "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\nActual: " + parser.attribValue
                      );
                    } else {
                      var tag = parser.tag;
                      var parent = parser.tags[parser.tags.length - 1] || parser;
                      if (tag.ns === parent.ns) {
                        tag.ns = Object.create(parent.ns);
                      }
                      tag.ns[local] = parser.attribValue;
                    }
                  }
                  parser.attribList.push([parser.attribName, parser.attribValue]);
                } else {
                  parser.tag.attributes[parser.attribName] = parser.attribValue;
                  emitNode(parser, "onattribute", {
                    name: parser.attribName,
                    value: parser.attribValue
                  });
                }
                parser.attribName = parser.attribValue = "";
              }
              function openTag(parser, selfClosing) {
                if (parser.opt.xmlns) {
                  var tag = parser.tag;
                  var qn = qname(parser.tagName);
                  tag.prefix = qn.prefix;
                  tag.local = qn.local;
                  tag.uri = tag.ns[qn.prefix] || "";
                  if (tag.prefix && !tag.uri) {
                    strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(parser.tagName));
                    tag.uri = qn.prefix;
                  }
                  var parent = parser.tags[parser.tags.length - 1] || parser;
                  if (tag.ns && parent.ns !== tag.ns) {
                    Object.keys(tag.ns).forEach(function(p) {
                      emitNode(parser, "onopennamespace", {
                        prefix: p,
                        uri: tag.ns[p]
                      });
                    });
                  }
                  for (var i = 0, l = parser.attribList.length; i < l; i++) {
                    var nv = parser.attribList[i];
                    var name = nv[0];
                    var value = nv[1];
                    var qualName = qname(name, true);
                    var prefix = qualName.prefix;
                    var local = qualName.local;
                    var uri = prefix === "" ? "" : tag.ns[prefix] || "";
                    var a = {
                      name,
                      value,
                      prefix,
                      local,
                      uri
                    };
                    if (prefix && prefix !== "xmlns" && !uri) {
                      strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(prefix));
                      a.uri = prefix;
                    }
                    parser.tag.attributes[name] = a;
                    emitNode(parser, "onattribute", a);
                  }
                  parser.attribList.length = 0;
                }
                parser.tag.isSelfClosing = !!selfClosing;
                parser.sawRoot = true;
                parser.tags.push(parser.tag);
                emitNode(parser, "onopentag", parser.tag);
                if (!selfClosing) {
                  if (!parser.noscript && parser.tagName.toLowerCase() === "script") {
                    parser.state = S.SCRIPT;
                  } else {
                    parser.state = S.TEXT;
                  }
                  parser.tag = null;
                  parser.tagName = "";
                }
                parser.attribName = parser.attribValue = "";
                parser.attribList.length = 0;
              }
              function closeTag(parser) {
                if (!parser.tagName) {
                  strictFail(parser, "Weird empty close tag.");
                  parser.textNode += "</>";
                  parser.state = S.TEXT;
                  return;
                }
                if (parser.script) {
                  if (parser.tagName !== "script") {
                    parser.script += "</" + parser.tagName + ">";
                    parser.tagName = "";
                    parser.state = S.SCRIPT;
                    return;
                  }
                  emitNode(parser, "onscript", parser.script);
                  parser.script = "";
                }
                var t = parser.tags.length;
                var tagName = parser.tagName;
                if (!parser.strict) {
                  tagName = tagName[parser.looseCase]();
                }
                var closeTo = tagName;
                while (t--) {
                  var close = parser.tags[t];
                  if (close.name !== closeTo) {
                    strictFail(parser, "Unexpected close tag");
                  } else {
                    break;
                  }
                }
                if (t < 0) {
                  strictFail(parser, "Unmatched closing tag: " + parser.tagName);
                  parser.textNode += "</" + parser.tagName + ">";
                  parser.state = S.TEXT;
                  return;
                }
                parser.tagName = tagName;
                var s2 = parser.tags.length;
                while (s2-- > t) {
                  var tag = parser.tag = parser.tags.pop();
                  parser.tagName = parser.tag.name;
                  emitNode(parser, "onclosetag", parser.tagName);
                  var x = {};
                  for (var i in tag.ns) {
                    x[i] = tag.ns[i];
                  }
                  var parent = parser.tags[parser.tags.length - 1] || parser;
                  if (parser.opt.xmlns && tag.ns !== parent.ns) {
                    Object.keys(tag.ns).forEach(function(p) {
                      var n = tag.ns[p];
                      emitNode(parser, "onclosenamespace", { prefix: p, uri: n });
                    });
                  }
                }
                if (t === 0)
                  parser.closedRoot = true;
                parser.tagName = parser.attribValue = parser.attribName = "";
                parser.attribList.length = 0;
                parser.state = S.TEXT;
              }
              function parseEntity(parser) {
                var entity = parser.entity;
                var entityLC = entity.toLowerCase();
                var num;
                var numStr = "";
                if (parser.ENTITIES[entity]) {
                  return parser.ENTITIES[entity];
                }
                if (parser.ENTITIES[entityLC]) {
                  return parser.ENTITIES[entityLC];
                }
                entity = entityLC;
                if (entity.charAt(0) === "#") {
                  if (entity.charAt(1) === "x") {
                    entity = entity.slice(2);
                    num = parseInt(entity, 16);
                    numStr = num.toString(16);
                  } else {
                    entity = entity.slice(1);
                    num = parseInt(entity, 10);
                    numStr = num.toString(10);
                  }
                }
                entity = entity.replace(/^0+/, "");
                if (isNaN(num) || numStr.toLowerCase() !== entity) {
                  strictFail(parser, "Invalid character entity");
                  return "&" + parser.entity + ";";
                }
                return String.fromCodePoint(num);
              }
              function beginWhiteSpace(parser, c) {
                if (c === "<") {
                  parser.state = S.OPEN_WAKA;
                  parser.startTagPosition = parser.position;
                } else if (!isWhitespace(c)) {
                  strictFail(parser, "Non-whitespace before first tag.");
                  parser.textNode = c;
                  parser.state = S.TEXT;
                }
              }
              function charAt(chunk, i) {
                var result = "";
                if (i < chunk.length) {
                  result = chunk.charAt(i);
                }
                return result;
              }
              function write(chunk) {
                var parser = this;
                if (this.error) {
                  throw this.error;
                }
                if (parser.closed) {
                  return error(
                    parser,
                    "Cannot write after close. Assign an onready handler."
                  );
                }
                if (chunk === null) {
                  return end(parser);
                }
                if (typeof chunk === "object") {
                  chunk = chunk.toString();
                }
                var i = 0;
                var c = "";
                while (true) {
                  c = charAt(chunk, i++);
                  parser.c = c;
                  if (!c) {
                    break;
                  }
                  if (parser.trackPosition) {
                    parser.position++;
                    if (c === "\n") {
                      parser.line++;
                      parser.column = 0;
                    } else {
                      parser.column++;
                    }
                  }
                  switch (parser.state) {
                    case S.BEGIN:
                      parser.state = S.BEGIN_WHITESPACE;
                      if (c === "\uFEFF") {
                        continue;
                      }
                      beginWhiteSpace(parser, c);
                      continue;
                    case S.BEGIN_WHITESPACE:
                      beginWhiteSpace(parser, c);
                      continue;
                    case S.TEXT:
                      if (parser.sawRoot && !parser.closedRoot) {
                        var starti = i - 1;
                        while (c && c !== "<" && c !== "&") {
                          c = charAt(chunk, i++);
                          if (c && parser.trackPosition) {
                            parser.position++;
                            if (c === "\n") {
                              parser.line++;
                              parser.column = 0;
                            } else {
                              parser.column++;
                            }
                          }
                        }
                        parser.textNode += chunk.substring(starti, i - 1);
                      }
                      if (c === "<" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
                        parser.state = S.OPEN_WAKA;
                        parser.startTagPosition = parser.position;
                      } else {
                        if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {
                          strictFail(parser, "Text data outside of root node.");
                        }
                        if (c === "&") {
                          parser.state = S.TEXT_ENTITY;
                        } else {
                          parser.textNode += c;
                        }
                      }
                      continue;
                    case S.SCRIPT:
                      if (c === "<") {
                        parser.state = S.SCRIPT_ENDING;
                      } else {
                        parser.script += c;
                      }
                      continue;
                    case S.SCRIPT_ENDING:
                      if (c === "/") {
                        parser.state = S.CLOSE_TAG;
                      } else {
                        parser.script += "<" + c;
                        parser.state = S.SCRIPT;
                      }
                      continue;
                    case S.OPEN_WAKA:
                      if (c === "!") {
                        parser.state = S.SGML_DECL;
                        parser.sgmlDecl = "";
                      } else if (isWhitespace(c)) {
                      } else if (isMatch(nameStart, c)) {
                        parser.state = S.OPEN_TAG;
                        parser.tagName = c;
                      } else if (c === "/") {
                        parser.state = S.CLOSE_TAG;
                        parser.tagName = "";
                      } else if (c === "?") {
                        parser.state = S.PROC_INST;
                        parser.procInstName = parser.procInstBody = "";
                      } else {
                        strictFail(parser, "Unencoded <");
                        if (parser.startTagPosition + 1 < parser.position) {
                          var pad = parser.position - parser.startTagPosition;
                          c = new Array(pad).join(" ") + c;
                        }
                        parser.textNode += "<" + c;
                        parser.state = S.TEXT;
                      }
                      continue;
                    case S.SGML_DECL:
                      if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
                        emitNode(parser, "onopencdata");
                        parser.state = S.CDATA;
                        parser.sgmlDecl = "";
                        parser.cdata = "";
                      } else if (parser.sgmlDecl + c === "--") {
                        parser.state = S.COMMENT;
                        parser.comment = "";
                        parser.sgmlDecl = "";
                      } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
                        parser.state = S.DOCTYPE;
                        if (parser.doctype || parser.sawRoot) {
                          strictFail(
                            parser,
                            "Inappropriately located doctype declaration"
                          );
                        }
                        parser.doctype = "";
                        parser.sgmlDecl = "";
                      } else if (c === ">") {
                        emitNode(parser, "onsgmldeclaration", parser.sgmlDecl);
                        parser.sgmlDecl = "";
                        parser.state = S.TEXT;
                      } else if (isQuote(c)) {
                        parser.state = S.SGML_DECL_QUOTED;
                        parser.sgmlDecl += c;
                      } else {
                        parser.sgmlDecl += c;
                      }
                      continue;
                    case S.SGML_DECL_QUOTED:
                      if (c === parser.q) {
                        parser.state = S.SGML_DECL;
                        parser.q = "";
                      }
                      parser.sgmlDecl += c;
                      continue;
                    case S.DOCTYPE:
                      if (c === ">") {
                        parser.state = S.TEXT;
                        emitNode(parser, "ondoctype", parser.doctype);
                        parser.doctype = true;
                      } else {
                        parser.doctype += c;
                        if (c === "[") {
                          parser.state = S.DOCTYPE_DTD;
                        } else if (isQuote(c)) {
                          parser.state = S.DOCTYPE_QUOTED;
                          parser.q = c;
                        }
                      }
                      continue;
                    case S.DOCTYPE_QUOTED:
                      parser.doctype += c;
                      if (c === parser.q) {
                        parser.q = "";
                        parser.state = S.DOCTYPE;
                      }
                      continue;
                    case S.DOCTYPE_DTD:
                      parser.doctype += c;
                      if (c === "]") {
                        parser.state = S.DOCTYPE;
                      } else if (isQuote(c)) {
                        parser.state = S.DOCTYPE_DTD_QUOTED;
                        parser.q = c;
                      }
                      continue;
                    case S.DOCTYPE_DTD_QUOTED:
                      parser.doctype += c;
                      if (c === parser.q) {
                        parser.state = S.DOCTYPE_DTD;
                        parser.q = "";
                      }
                      continue;
                    case S.COMMENT:
                      if (c === "-") {
                        parser.state = S.COMMENT_ENDING;
                      } else {
                        parser.comment += c;
                      }
                      continue;
                    case S.COMMENT_ENDING:
                      if (c === "-") {
                        parser.state = S.COMMENT_ENDED;
                        parser.comment = textopts(parser.opt, parser.comment);
                        if (parser.comment) {
                          emitNode(parser, "oncomment", parser.comment);
                        }
                        parser.comment = "";
                      } else {
                        parser.comment += "-" + c;
                        parser.state = S.COMMENT;
                      }
                      continue;
                    case S.COMMENT_ENDED:
                      if (c !== ">") {
                        strictFail(parser, "Malformed comment");
                        parser.comment += "--" + c;
                        parser.state = S.COMMENT;
                      } else {
                        parser.state = S.TEXT;
                      }
                      continue;
                    case S.CDATA:
                      if (c === "]") {
                        parser.state = S.CDATA_ENDING;
                      } else {
                        parser.cdata += c;
                      }
                      continue;
                    case S.CDATA_ENDING:
                      if (c === "]") {
                        parser.state = S.CDATA_ENDING_2;
                      } else {
                        parser.cdata += "]" + c;
                        parser.state = S.CDATA;
                      }
                      continue;
                    case S.CDATA_ENDING_2:
                      if (c === ">") {
                        if (parser.cdata) {
                          emitNode(parser, "oncdata", parser.cdata);
                        }
                        emitNode(parser, "onclosecdata");
                        parser.cdata = "";
                        parser.state = S.TEXT;
                      } else if (c === "]") {
                        parser.cdata += "]";
                      } else {
                        parser.cdata += "]]" + c;
                        parser.state = S.CDATA;
                      }
                      continue;
                    case S.PROC_INST:
                      if (c === "?") {
                        parser.state = S.PROC_INST_ENDING;
                      } else if (isWhitespace(c)) {
                        parser.state = S.PROC_INST_BODY;
                      } else {
                        parser.procInstName += c;
                      }
                      continue;
                    case S.PROC_INST_BODY:
                      if (!parser.procInstBody && isWhitespace(c)) {
                        continue;
                      } else if (c === "?") {
                        parser.state = S.PROC_INST_ENDING;
                      } else {
                        parser.procInstBody += c;
                      }
                      continue;
                    case S.PROC_INST_ENDING:
                      if (c === ">") {
                        emitNode(parser, "onprocessinginstruction", {
                          name: parser.procInstName,
                          body: parser.procInstBody
                        });
                        parser.procInstName = parser.procInstBody = "";
                        parser.state = S.TEXT;
                      } else {
                        parser.procInstBody += "?" + c;
                        parser.state = S.PROC_INST_BODY;
                      }
                      continue;
                    case S.OPEN_TAG:
                      if (isMatch(nameBody, c)) {
                        parser.tagName += c;
                      } else {
                        newTag(parser);
                        if (c === ">") {
                          openTag(parser);
                        } else if (c === "/") {
                          parser.state = S.OPEN_TAG_SLASH;
                        } else {
                          if (!isWhitespace(c)) {
                            strictFail(parser, "Invalid character in tag name");
                          }
                          parser.state = S.ATTRIB;
                        }
                      }
                      continue;
                    case S.OPEN_TAG_SLASH:
                      if (c === ">") {
                        openTag(parser, true);
                        closeTag(parser);
                      } else {
                        strictFail(parser, "Forward-slash in opening tag not followed by >");
                        parser.state = S.ATTRIB;
                      }
                      continue;
                    case S.ATTRIB:
                      if (isWhitespace(c)) {
                        continue;
                      } else if (c === ">") {
                        openTag(parser);
                      } else if (c === "/") {
                        parser.state = S.OPEN_TAG_SLASH;
                      } else if (isMatch(nameStart, c)) {
                        parser.attribName = c;
                        parser.attribValue = "";
                        parser.state = S.ATTRIB_NAME;
                      } else {
                        strictFail(parser, "Invalid attribute name");
                      }
                      continue;
                    case S.ATTRIB_NAME:
                      if (c === "=") {
                        parser.state = S.ATTRIB_VALUE;
                      } else if (c === ">") {
                        strictFail(parser, "Attribute without value");
                        parser.attribValue = parser.attribName;
                        attrib(parser);
                        openTag(parser);
                      } else if (isWhitespace(c)) {
                        parser.state = S.ATTRIB_NAME_SAW_WHITE;
                      } else if (isMatch(nameBody, c)) {
                        parser.attribName += c;
                      } else {
                        strictFail(parser, "Invalid attribute name");
                      }
                      continue;
                    case S.ATTRIB_NAME_SAW_WHITE:
                      if (c === "=") {
                        parser.state = S.ATTRIB_VALUE;
                      } else if (isWhitespace(c)) {
                        continue;
                      } else {
                        strictFail(parser, "Attribute without value");
                        parser.tag.attributes[parser.attribName] = "";
                        parser.attribValue = "";
                        emitNode(parser, "onattribute", {
                          name: parser.attribName,
                          value: ""
                        });
                        parser.attribName = "";
                        if (c === ">") {
                          openTag(parser);
                        } else if (isMatch(nameStart, c)) {
                          parser.attribName = c;
                          parser.state = S.ATTRIB_NAME;
                        } else {
                          strictFail(parser, "Invalid attribute name");
                          parser.state = S.ATTRIB;
                        }
                      }
                      continue;
                    case S.ATTRIB_VALUE:
                      if (isWhitespace(c)) {
                        continue;
                      } else if (isQuote(c)) {
                        parser.q = c;
                        parser.state = S.ATTRIB_VALUE_QUOTED;
                      } else {
                        strictFail(parser, "Unquoted attribute value");
                        parser.state = S.ATTRIB_VALUE_UNQUOTED;
                        parser.attribValue = c;
                      }
                      continue;
                    case S.ATTRIB_VALUE_QUOTED:
                      if (c !== parser.q) {
                        if (c === "&") {
                          parser.state = S.ATTRIB_VALUE_ENTITY_Q;
                        } else {
                          parser.attribValue += c;
                        }
                        continue;
                      }
                      attrib(parser);
                      parser.q = "";
                      parser.state = S.ATTRIB_VALUE_CLOSED;
                      continue;
                    case S.ATTRIB_VALUE_CLOSED:
                      if (isWhitespace(c)) {
                        parser.state = S.ATTRIB;
                      } else if (c === ">") {
                        openTag(parser);
                      } else if (c === "/") {
                        parser.state = S.OPEN_TAG_SLASH;
                      } else if (isMatch(nameStart, c)) {
                        strictFail(parser, "No whitespace between attributes");
                        parser.attribName = c;
                        parser.attribValue = "";
                        parser.state = S.ATTRIB_NAME;
                      } else {
                        strictFail(parser, "Invalid attribute name");
                      }
                      continue;
                    case S.ATTRIB_VALUE_UNQUOTED:
                      if (!isAttribEnd(c)) {
                        if (c === "&") {
                          parser.state = S.ATTRIB_VALUE_ENTITY_U;
                        } else {
                          parser.attribValue += c;
                        }
                        continue;
                      }
                      attrib(parser);
                      if (c === ">") {
                        openTag(parser);
                      } else {
                        parser.state = S.ATTRIB;
                      }
                      continue;
                    case S.CLOSE_TAG:
                      if (!parser.tagName) {
                        if (isWhitespace(c)) {
                          continue;
                        } else if (notMatch(nameStart, c)) {
                          if (parser.script) {
                            parser.script += "</" + c;
                            parser.state = S.SCRIPT;
                          } else {
                            strictFail(parser, "Invalid tagname in closing tag.");
                          }
                        } else {
                          parser.tagName = c;
                        }
                      } else if (c === ">") {
                        closeTag(parser);
                      } else if (isMatch(nameBody, c)) {
                        parser.tagName += c;
                      } else if (parser.script) {
                        parser.script += "</" + parser.tagName;
                        parser.tagName = "";
                        parser.state = S.SCRIPT;
                      } else {
                        if (!isWhitespace(c)) {
                          strictFail(parser, "Invalid tagname in closing tag");
                        }
                        parser.state = S.CLOSE_TAG_SAW_WHITE;
                      }
                      continue;
                    case S.CLOSE_TAG_SAW_WHITE:
                      if (isWhitespace(c)) {
                        continue;
                      }
                      if (c === ">") {
                        closeTag(parser);
                      } else {
                        strictFail(parser, "Invalid characters in closing tag");
                      }
                      continue;
                    case S.TEXT_ENTITY:
                    case S.ATTRIB_VALUE_ENTITY_Q:
                    case S.ATTRIB_VALUE_ENTITY_U:
                      var returnState;
                      var buffer;
                      switch (parser.state) {
                        case S.TEXT_ENTITY:
                          returnState = S.TEXT;
                          buffer = "textNode";
                          break;
                        case S.ATTRIB_VALUE_ENTITY_Q:
                          returnState = S.ATTRIB_VALUE_QUOTED;
                          buffer = "attribValue";
                          break;
                        case S.ATTRIB_VALUE_ENTITY_U:
                          returnState = S.ATTRIB_VALUE_UNQUOTED;
                          buffer = "attribValue";
                          break;
                      }
                      if (c === ";") {
                        parser[buffer] += parseEntity(parser);
                        parser.entity = "";
                        parser.state = returnState;
                      } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {
                        parser.entity += c;
                      } else {
                        strictFail(parser, "Invalid character in entity name");
                        parser[buffer] += "&" + parser.entity + c;
                        parser.entity = "";
                        parser.state = returnState;
                      }
                      continue;
                    default:
                      throw new Error(parser, "Unknown state: " + parser.state);
                  }
                }
                if (parser.position >= parser.bufferCheckPosition) {
                  checkBufferLength(parser);
                }
                return parser;
              }
              if (!String.fromCodePoint) {
                (function() {
                  var stringFromCharCode = String.fromCharCode;
                  var floor = Math.floor;
                  var fromCodePoint = function() {
                    var MAX_SIZE = 16384;
                    var codeUnits = [];
                    var highSurrogate;
                    var lowSurrogate;
                    var index = -1;
                    var length = arguments.length;
                    if (!length) {
                      return "";
                    }
                    var result = "";
                    while (++index < length) {
                      var codePoint = Number(arguments[index]);
                      if (!isFinite(codePoint) || codePoint < 0 || codePoint > 1114111 || floor(codePoint) !== codePoint) {
                        throw RangeError("Invalid code point: " + codePoint);
                      }
                      if (codePoint <= 65535) {
                        codeUnits.push(codePoint);
                      } else {
                        codePoint -= 65536;
                        highSurrogate = (codePoint >> 10) + 55296;
                        lowSurrogate = codePoint % 1024 + 56320;
                        codeUnits.push(highSurrogate, lowSurrogate);
                      }
                      if (index + 1 === length || codeUnits.length > MAX_SIZE) {
                        result += stringFromCharCode.apply(null, codeUnits);
                        codeUnits.length = 0;
                      }
                    }
                    return result;
                  };
                  if (Object.defineProperty) {
                    Object.defineProperty(String, "fromCodePoint", {
                      value: fromCodePoint,
                      configurable: true,
                      writable: true
                    });
                  } else {
                    String.fromCodePoint = fromCodePoint;
                  }
                })();
              }
            })(typeof exports2 === "undefined" ? this.sax = {} : exports2);
          }).call(this);
        }).call(this, require2("buffer").Buffer);
      }, { "buffer": 38, "stream": 58, "string_decoder": 73 }], 58: [function(require2, module2, exports2) {
        module2.exports = Stream;
        var EE = require2("events").EventEmitter;
        var inherits = require2("inherits");
        inherits(Stream, EE);
        Stream.Readable = require2("readable-stream/lib/_stream_readable.js");
        Stream.Writable = require2("readable-stream/lib/_stream_writable.js");
        Stream.Duplex = require2("readable-stream/lib/_stream_duplex.js");
        Stream.Transform = require2("readable-stream/lib/_stream_transform.js");
        Stream.PassThrough = require2("readable-stream/lib/_stream_passthrough.js");
        Stream.finished = require2("readable-stream/lib/internal/streams/end-of-stream.js");
        Stream.pipeline = require2("readable-stream/lib/internal/streams/pipeline.js");
        Stream.Stream = Stream;
        function Stream() {
          EE.call(this);
        }
        Stream.prototype.pipe = function(dest, options) {
          var source2 = this;
          function ondata(chunk) {
            if (dest.writable) {
              if (false === dest.write(chunk) && source2.pause) {
                source2.pause();
              }
            }
          }
          source2.on("data", ondata);
          function ondrain() {
            if (source2.readable && source2.resume) {
              source2.resume();
            }
          }
          dest.on("drain", ondrain);
          if (!dest._isStdio && (!options || options.end !== false)) {
            source2.on("end", onend);
            source2.on("close", onclose);
          }
          var didOnEnd = false;
          function onend() {
            if (didOnEnd)
              return;
            didOnEnd = true;
            dest.end();
          }
          function onclose() {
            if (didOnEnd)
              return;
            didOnEnd = true;
            if (typeof dest.destroy === "function")
              dest.destroy();
          }
          function onerror(er) {
            cleanup();
            if (EE.listenerCount(this, "error") === 0) {
              throw er;
            }
          }
          source2.on("error", onerror);
          dest.on("error", onerror);
          function cleanup() {
            source2.removeListener("data", ondata);
            dest.removeListener("drain", ondrain);
            source2.removeListener("end", onend);
            source2.removeListener("close", onclose);
            source2.removeListener("error", onerror);
            dest.removeListener("error", onerror);
            source2.removeListener("end", cleanup);
            source2.removeListener("close", cleanup);
            dest.removeListener("close", cleanup);
          }
          source2.on("end", cleanup);
          source2.on("close", cleanup);
          dest.on("close", cleanup);
          dest.emit("pipe", source2);
          return dest;
        };
      }, { "events": 39, "inherits": 41, "readable-stream/lib/_stream_duplex.js": 60, "readable-stream/lib/_stream_passthrough.js": 61, "readable-stream/lib/_stream_readable.js": 62, "readable-stream/lib/_stream_transform.js": 63, "readable-stream/lib/_stream_writable.js": 64, "readable-stream/lib/internal/streams/end-of-stream.js": 68, "readable-stream/lib/internal/streams/pipeline.js": 70 }], 59: [function(require2, module2, exports2) {
        "use strict";
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        var codes = {};
        function createErrorType(code, message, Base) {
          if (!Base) {
            Base = Error;
          }
          function getMessage(arg1, arg2, arg3) {
            if (typeof message === "string") {
              return message;
            } else {
              return message(arg1, arg2, arg3);
            }
          }
          var NodeError = /* @__PURE__ */ function(_Base) {
            _inheritsLoose(NodeError2, _Base);
            function NodeError2(arg1, arg2, arg3) {
              return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
            }
            return NodeError2;
          }(Base);
          NodeError.prototype.name = Base.name;
          NodeError.prototype.code = code;
          codes[code] = NodeError;
        }
        function oneOf(expected, thing) {
          if (Array.isArray(expected)) {
            var len = expected.length;
            expected = expected.map(function(i) {
              return String(i);
            });
            if (len > 2) {
              return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
            } else if (len === 2) {
              return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
            } else {
              return "of ".concat(thing, " ").concat(expected[0]);
            }
          } else {
            return "of ".concat(thing, " ").concat(String(expected));
          }
        }
        function startsWith(str, search, pos) {
          return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
        }
        function endsWith(str, search, this_len) {
          if (this_len === void 0 || this_len > str.length) {
            this_len = str.length;
          }
          return str.substring(this_len - search.length, this_len) === search;
        }
        function includes(str, search, start) {
          if (typeof start !== "number") {
            start = 0;
          }
          if (start + search.length > str.length) {
            return false;
          } else {
            return str.indexOf(search, start) !== -1;
          }
        }
        createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
          return 'The value "' + value + '" is invalid for option "' + name + '"';
        }, TypeError);
        createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
          var determiner;
          if (typeof expected === "string" && startsWith(expected, "not ")) {
            determiner = "must not be";
            expected = expected.replace(/^not /, "");
          } else {
            determiner = "must be";
          }
          var msg;
          if (endsWith(name, " argument")) {
            msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
          } else {
            var type = includes(name, ".") ? "property" : "argument";
            msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
          }
          msg += ". Received type ".concat(typeof actual);
          return msg;
        }, TypeError);
        createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
        createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
          return "The " + name + " method is not implemented";
        });
        createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
        createErrorType("ERR_STREAM_DESTROYED", function(name) {
          return "Cannot call " + name + " after a stream was destroyed";
        });
        createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
        createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
        createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
        createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
        createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
          return "Unknown encoding: " + arg;
        }, TypeError);
        createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
        module2.exports.codes = codes;
      }, {}], 60: [function(require2, module2, exports2) {
        (function(process) {
          (function() {
            "use strict";
            var objectKeys = Object.keys || function(obj) {
              var keys2 = [];
              for (var key in obj) {
                keys2.push(key);
              }
              return keys2;
            };
            module2.exports = Duplex;
            var Readable = require2("./_stream_readable");
            var Writable = require2("./_stream_writable");
            require2("inherits")(Duplex, Readable);
            {
              var keys = objectKeys(Writable.prototype);
              for (var v = 0; v < keys.length; v++) {
                var method = keys[v];
                if (!Duplex.prototype[method])
                  Duplex.prototype[method] = Writable.prototype[method];
              }
            }
            function Duplex(options) {
              if (!(this instanceof Duplex))
                return new Duplex(options);
              Readable.call(this, options);
              Writable.call(this, options);
              this.allowHalfOpen = true;
              if (options) {
                if (options.readable === false)
                  this.readable = false;
                if (options.writable === false)
                  this.writable = false;
                if (options.allowHalfOpen === false) {
                  this.allowHalfOpen = false;
                  this.once("end", onend);
                }
              }
            }
            Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
              enumerable: false,
              get: function get() {
                return this._writableState.highWaterMark;
              }
            });
            Object.defineProperty(Duplex.prototype, "writableBuffer", {
              enumerable: false,
              get: function get() {
                return this._writableState && this._writableState.getBuffer();
              }
            });
            Object.defineProperty(Duplex.prototype, "writableLength", {
              enumerable: false,
              get: function get() {
                return this._writableState.length;
              }
            });
            function onend() {
              if (this._writableState.ended)
                return;
              process.nextTick(onEndNT, this);
            }
            function onEndNT(self2) {
              self2.end();
            }
            Object.defineProperty(Duplex.prototype, "destroyed", {
              enumerable: false,
              get: function get() {
                if (this._readableState === void 0 || this._writableState === void 0) {
                  return false;
                }
                return this._readableState.destroyed && this._writableState.destroyed;
              },
              set: function set(value) {
                if (this._readableState === void 0 || this._writableState === void 0) {
                  return;
                }
                this._readableState.destroyed = value;
                this._writableState.destroyed = value;
              }
            });
          }).call(this);
        }).call(this, require2("_process"));
      }, { "./_stream_readable": 62, "./_stream_writable": 64, "_process": 55, "inherits": 41 }], 61: [function(require2, module2, exports2) {
        "use strict";
        module2.exports = PassThrough;
        var Transform = require2("./_stream_transform");
        require2("inherits")(PassThrough, Transform);
        function PassThrough(options) {
          if (!(this instanceof PassThrough))
            return new PassThrough(options);
          Transform.call(this, options);
        }
        PassThrough.prototype._transform = function(chunk, encoding, cb) {
          cb(null, chunk);
        };
      }, { "./_stream_transform": 63, "inherits": 41 }], 62: [function(require2, module2, exports2) {
        (function(process, global2) {
          (function() {
            "use strict";
            module2.exports = Readable;
            var Duplex;
            Readable.ReadableState = ReadableState;
            var EE = require2("events").EventEmitter;
            var EElistenerCount = function EElistenerCount2(emitter, type) {
              return emitter.listeners(type).length;
            };
            var Stream = require2("./internal/streams/stream");
            var Buffer2 = require2("buffer").Buffer;
            var OurUint8Array = global2.Uint8Array || function() {
            };
            function _uint8ArrayToBuffer(chunk) {
              return Buffer2.from(chunk);
            }
            function _isUint8Array(obj) {
              return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
            }
            var debugUtil = require2("util");
            var debug;
            if (debugUtil && debugUtil.debuglog) {
              debug = debugUtil.debuglog("stream");
            } else {
              debug = function debug2() {
              };
            }
            var BufferList = require2("./internal/streams/buffer_list");
            var destroyImpl = require2("./internal/streams/destroy");
            var _require = require2("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
            var _require$codes = require2("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
            var StringDecoder;
            var createReadableStreamAsyncIterator;
            var from;
            require2("inherits")(Readable, Stream);
            var errorOrDestroy = destroyImpl.errorOrDestroy;
            var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
            function prependListener(emitter, event, fn) {
              if (typeof emitter.prependListener === "function")
                return emitter.prependListener(event, fn);
              if (!emitter._events || !emitter._events[event])
                emitter.on(event, fn);
              else if (Array.isArray(emitter._events[event]))
                emitter._events[event].unshift(fn);
              else
                emitter._events[event] = [fn, emitter._events[event]];
            }
            function ReadableState(options, stream, isDuplex) {
              Duplex = Duplex || require2("./_stream_duplex");
              options = options || {};
              if (typeof isDuplex !== "boolean")
                isDuplex = stream instanceof Duplex;
              this.objectMode = !!options.objectMode;
              if (isDuplex)
                this.objectMode = this.objectMode || !!options.readableObjectMode;
              this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
              this.buffer = new BufferList();
              this.length = 0;
              this.pipes = null;
              this.pipesCount = 0;
              this.flowing = null;
              this.ended = false;
              this.endEmitted = false;
              this.reading = false;
              this.sync = true;
              this.needReadable = false;
              this.emittedReadable = false;
              this.readableListening = false;
              this.resumeScheduled = false;
              this.paused = true;
              this.emitClose = options.emitClose !== false;
              this.autoDestroy = !!options.autoDestroy;
              this.destroyed = false;
              this.defaultEncoding = options.defaultEncoding || "utf8";
              this.awaitDrain = 0;
              this.readingMore = false;
              this.decoder = null;
              this.encoding = null;
              if (options.encoding) {
                if (!StringDecoder)
                  StringDecoder = require2("string_decoder/").StringDecoder;
                this.decoder = new StringDecoder(options.encoding);
                this.encoding = options.encoding;
              }
            }
            function Readable(options) {
              Duplex = Duplex || require2("./_stream_duplex");
              if (!(this instanceof Readable))
                return new Readable(options);
              var isDuplex = this instanceof Duplex;
              this._readableState = new ReadableState(options, this, isDuplex);
              this.readable = true;
              if (options) {
                if (typeof options.read === "function")
                  this._read = options.read;
                if (typeof options.destroy === "function")
                  this._destroy = options.destroy;
              }
              Stream.call(this);
            }
            Object.defineProperty(Readable.prototype, "destroyed", {
              enumerable: false,
              get: function get() {
                if (this._readableState === void 0) {
                  return false;
                }
                return this._readableState.destroyed;
              },
              set: function set(value) {
                if (!this._readableState) {
                  return;
                }
                this._readableState.destroyed = value;
              }
            });
            Readable.prototype.destroy = destroyImpl.destroy;
            Readable.prototype._undestroy = destroyImpl.undestroy;
            Readable.prototype._destroy = function(err, cb) {
              cb(err);
            };
            Readable.prototype.push = function(chunk, encoding) {
              var state = this._readableState;
              var skipChunkCheck;
              if (!state.objectMode) {
                if (typeof chunk === "string") {
                  encoding = encoding || state.defaultEncoding;
                  if (encoding !== state.encoding) {
                    chunk = Buffer2.from(chunk, encoding);
                    encoding = "";
                  }
                  skipChunkCheck = true;
                }
              } else {
                skipChunkCheck = true;
              }
              return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
            };
            Readable.prototype.unshift = function(chunk) {
              return readableAddChunk(this, chunk, null, true, false);
            };
            function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
              debug("readableAddChunk", chunk);
              var state = stream._readableState;
              if (chunk === null) {
                state.reading = false;
                onEofChunk(stream, state);
              } else {
                var er;
                if (!skipChunkCheck)
                  er = chunkInvalid(state, chunk);
                if (er) {
                  errorOrDestroy(stream, er);
                } else if (state.objectMode || chunk && chunk.length > 0) {
                  if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
                    chunk = _uint8ArrayToBuffer(chunk);
                  }
                  if (addToFront) {
                    if (state.endEmitted)
                      errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                    else
                      addChunk(stream, state, chunk, true);
                  } else if (state.ended) {
                    errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
                  } else if (state.destroyed) {
                    return false;
                  } else {
                    state.reading = false;
                    if (state.decoder && !encoding) {
                      chunk = state.decoder.write(chunk);
                      if (state.objectMode || chunk.length !== 0)
                        addChunk(stream, state, chunk, false);
                      else
                        maybeReadMore(stream, state);
                    } else {
                      addChunk(stream, state, chunk, false);
                    }
                  }
                } else if (!addToFront) {
                  state.reading = false;
                  maybeReadMore(stream, state);
                }
              }
              return !state.ended && (state.length < state.highWaterMark || state.length === 0);
            }
            function addChunk(stream, state, chunk, addToFront) {
              if (state.flowing && state.length === 0 && !state.sync) {
                state.awaitDrain = 0;
                stream.emit("data", chunk);
              } else {
                state.length += state.objectMode ? 1 : chunk.length;
                if (addToFront)
                  state.buffer.unshift(chunk);
                else
                  state.buffer.push(chunk);
                if (state.needReadable)
                  emitReadable(stream);
              }
              maybeReadMore(stream, state);
            }
            function chunkInvalid(state, chunk) {
              var er;
              if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
                er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
              }
              return er;
            }
            Readable.prototype.isPaused = function() {
              return this._readableState.flowing === false;
            };
            Readable.prototype.setEncoding = function(enc) {
              if (!StringDecoder)
                StringDecoder = require2("string_decoder/").StringDecoder;
              var decoder = new StringDecoder(enc);
              this._readableState.decoder = decoder;
              this._readableState.encoding = this._readableState.decoder.encoding;
              var p = this._readableState.buffer.head;
              var content = "";
              while (p !== null) {
                content += decoder.write(p.data);
                p = p.next;
              }
              this._readableState.buffer.clear();
              if (content !== "")
                this._readableState.buffer.push(content);
              this._readableState.length = content.length;
              return this;
            };
            var MAX_HWM = 1073741824;
            function computeNewHighWaterMark(n) {
              if (n >= MAX_HWM) {
                n = MAX_HWM;
              } else {
                n--;
                n |= n >>> 1;
                n |= n >>> 2;
                n |= n >>> 4;
                n |= n >>> 8;
                n |= n >>> 16;
                n++;
              }
              return n;
            }
            function howMuchToRead(n, state) {
              if (n <= 0 || state.length === 0 && state.ended)
                return 0;
              if (state.objectMode)
                return 1;
              if (n !== n) {
                if (state.flowing && state.length)
                  return state.buffer.head.data.length;
                else
                  return state.length;
              }
              if (n > state.highWaterMark)
                state.highWaterMark = computeNewHighWaterMark(n);
              if (n <= state.length)
                return n;
              if (!state.ended) {
                state.needReadable = true;
                return 0;
              }
              return state.length;
            }
            Readable.prototype.read = function(n) {
              debug("read", n);
              n = parseInt(n, 10);
              var state = this._readableState;
              var nOrig = n;
              if (n !== 0)
                state.emittedReadable = false;
              if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
                debug("read: emitReadable", state.length, state.ended);
                if (state.length === 0 && state.ended)
                  endReadable(this);
                else
                  emitReadable(this);
                return null;
              }
              n = howMuchToRead(n, state);
              if (n === 0 && state.ended) {
                if (state.length === 0)
                  endReadable(this);
                return null;
              }
              var doRead = state.needReadable;
              debug("need readable", doRead);
              if (state.length === 0 || state.length - n < state.highWaterMark) {
                doRead = true;
                debug("length less than watermark", doRead);
              }
              if (state.ended || state.reading) {
                doRead = false;
                debug("reading or ended", doRead);
              } else if (doRead) {
                debug("do read");
                state.reading = true;
                state.sync = true;
                if (state.length === 0)
                  state.needReadable = true;
                this._read(state.highWaterMark);
                state.sync = false;
                if (!state.reading)
                  n = howMuchToRead(nOrig, state);
              }
              var ret;
              if (n > 0)
                ret = fromList(n, state);
              else
                ret = null;
              if (ret === null) {
                state.needReadable = state.length <= state.highWaterMark;
                n = 0;
              } else {
                state.length -= n;
                state.awaitDrain = 0;
              }
              if (state.length === 0) {
                if (!state.ended)
                  state.needReadable = true;
                if (nOrig !== n && state.ended)
                  endReadable(this);
              }
              if (ret !== null)
                this.emit("data", ret);
              return ret;
            };
            function onEofChunk(stream, state) {
              debug("onEofChunk");
              if (state.ended)
                return;
              if (state.decoder) {
                var chunk = state.decoder.end();
                if (chunk && chunk.length) {
                  state.buffer.push(chunk);
                  state.length += state.objectMode ? 1 : chunk.length;
                }
              }
              state.ended = true;
              if (state.sync) {
                emitReadable(stream);
              } else {
                state.needReadable = false;
                if (!state.emittedReadable) {
                  state.emittedReadable = true;
                  emitReadable_(stream);
                }
              }
            }
            function emitReadable(stream) {
              var state = stream._readableState;
              debug("emitReadable", state.needReadable, state.emittedReadable);
              state.needReadable = false;
              if (!state.emittedReadable) {
                debug("emitReadable", state.flowing);
                state.emittedReadable = true;
                process.nextTick(emitReadable_, stream);
              }
            }
            function emitReadable_(stream) {
              var state = stream._readableState;
              debug("emitReadable_", state.destroyed, state.length, state.ended);
              if (!state.destroyed && (state.length || state.ended)) {
                stream.emit("readable");
                state.emittedReadable = false;
              }
              state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
              flow(stream);
            }
            function maybeReadMore(stream, state) {
              if (!state.readingMore) {
                state.readingMore = true;
                process.nextTick(maybeReadMore_, stream, state);
              }
            }
            function maybeReadMore_(stream, state) {
              while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
                var len = state.length;
                debug("maybeReadMore read 0");
                stream.read(0);
                if (len === state.length)
                  break;
              }
              state.readingMore = false;
            }
            Readable.prototype._read = function(n) {
              errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
            };
            Readable.prototype.pipe = function(dest, pipeOpts) {
              var src = this;
              var state = this._readableState;
              switch (state.pipesCount) {
                case 0:
                  state.pipes = dest;
                  break;
                case 1:
                  state.pipes = [state.pipes, dest];
                  break;
                default:
                  state.pipes.push(dest);
                  break;
              }
              state.pipesCount += 1;
              debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
              var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
              var endFn = doEnd ? onend : unpipe;
              if (state.endEmitted)
                process.nextTick(endFn);
              else
                src.once("end", endFn);
              dest.on("unpipe", onunpipe);
              function onunpipe(readable, unpipeInfo) {
                debug("onunpipe");
                if (readable === src) {
                  if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                    unpipeInfo.hasUnpiped = true;
                    cleanup();
                  }
                }
              }
              function onend() {
                debug("onend");
                dest.end();
              }
              var ondrain = pipeOnDrain(src);
              dest.on("drain", ondrain);
              var cleanedUp = false;
              function cleanup() {
                debug("cleanup");
                dest.removeListener("close", onclose);
                dest.removeListener("finish", onfinish);
                dest.removeListener("drain", ondrain);
                dest.removeListener("error", onerror);
                dest.removeListener("unpipe", onunpipe);
                src.removeListener("end", onend);
                src.removeListener("end", unpipe);
                src.removeListener("data", ondata);
                cleanedUp = true;
                if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
                  ondrain();
              }
              src.on("data", ondata);
              function ondata(chunk) {
                debug("ondata");
                var ret = dest.write(chunk);
                debug("dest.write", ret);
                if (ret === false) {
                  if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                    debug("false write response, pause", state.awaitDrain);
                    state.awaitDrain++;
                  }
                  src.pause();
                }
              }
              function onerror(er) {
                debug("onerror", er);
                unpipe();
                dest.removeListener("error", onerror);
                if (EElistenerCount(dest, "error") === 0)
                  errorOrDestroy(dest, er);
              }
              prependListener(dest, "error", onerror);
              function onclose() {
                dest.removeListener("finish", onfinish);
                unpipe();
              }
              dest.once("close", onclose);
              function onfinish() {
                debug("onfinish");
                dest.removeListener("close", onclose);
                unpipe();
              }
              dest.once("finish", onfinish);
              function unpipe() {
                debug("unpipe");
                src.unpipe(dest);
              }
              dest.emit("pipe", src);
              if (!state.flowing) {
                debug("pipe resume");
                src.resume();
              }
              return dest;
            };
            function pipeOnDrain(src) {
              return function pipeOnDrainFunctionResult() {
                var state = src._readableState;
                debug("pipeOnDrain", state.awaitDrain);
                if (state.awaitDrain)
                  state.awaitDrain--;
                if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
                  state.flowing = true;
                  flow(src);
                }
              };
            }
            Readable.prototype.unpipe = function(dest) {
              var state = this._readableState;
              var unpipeInfo = {
                hasUnpiped: false
              };
              if (state.pipesCount === 0)
                return this;
              if (state.pipesCount === 1) {
                if (dest && dest !== state.pipes)
                  return this;
                if (!dest)
                  dest = state.pipes;
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;
                if (dest)
                  dest.emit("unpipe", this, unpipeInfo);
                return this;
              }
              if (!dest) {
                var dests = state.pipes;
                var len = state.pipesCount;
                state.pipes = null;
                state.pipesCount = 0;
                state.flowing = false;
                for (var i = 0; i < len; i++) {
                  dests[i].emit("unpipe", this, {
                    hasUnpiped: false
                  });
                }
                return this;
              }
              var index = indexOf(state.pipes, dest);
              if (index === -1)
                return this;
              state.pipes.splice(index, 1);
              state.pipesCount -= 1;
              if (state.pipesCount === 1)
                state.pipes = state.pipes[0];
              dest.emit("unpipe", this, unpipeInfo);
              return this;
            };
            Readable.prototype.on = function(ev, fn) {
              var res = Stream.prototype.on.call(this, ev, fn);
              var state = this._readableState;
              if (ev === "data") {
                state.readableListening = this.listenerCount("readable") > 0;
                if (state.flowing !== false)
                  this.resume();
              } else if (ev === "readable") {
                if (!state.endEmitted && !state.readableListening) {
                  state.readableListening = state.needReadable = true;
                  state.flowing = false;
                  state.emittedReadable = false;
                  debug("on readable", state.length, state.reading);
                  if (state.length) {
                    emitReadable(this);
                  } else if (!state.reading) {
                    process.nextTick(nReadingNextTick, this);
                  }
                }
              }
              return res;
            };
            Readable.prototype.addListener = Readable.prototype.on;
            Readable.prototype.removeListener = function(ev, fn) {
              var res = Stream.prototype.removeListener.call(this, ev, fn);
              if (ev === "readable") {
                process.nextTick(updateReadableListening, this);
              }
              return res;
            };
            Readable.prototype.removeAllListeners = function(ev) {
              var res = Stream.prototype.removeAllListeners.apply(this, arguments);
              if (ev === "readable" || ev === void 0) {
                process.nextTick(updateReadableListening, this);
              }
              return res;
            };
            function updateReadableListening(self2) {
              var state = self2._readableState;
              state.readableListening = self2.listenerCount("readable") > 0;
              if (state.resumeScheduled && !state.paused) {
                state.flowing = true;
              } else if (self2.listenerCount("data") > 0) {
                self2.resume();
              }
            }
            function nReadingNextTick(self2) {
              debug("readable nexttick read 0");
              self2.read(0);
            }
            Readable.prototype.resume = function() {
              var state = this._readableState;
              if (!state.flowing) {
                debug("resume");
                state.flowing = !state.readableListening;
                resume(this, state);
              }
              state.paused = false;
              return this;
            };
            function resume(stream, state) {
              if (!state.resumeScheduled) {
                state.resumeScheduled = true;
                process.nextTick(resume_, stream, state);
              }
            }
            function resume_(stream, state) {
              debug("resume", state.reading);
              if (!state.reading) {
                stream.read(0);
              }
              state.resumeScheduled = false;
              stream.emit("resume");
              flow(stream);
              if (state.flowing && !state.reading)
                stream.read(0);
            }
            Readable.prototype.pause = function() {
              debug("call pause flowing=%j", this._readableState.flowing);
              if (this._readableState.flowing !== false) {
                debug("pause");
                this._readableState.flowing = false;
                this.emit("pause");
              }
              this._readableState.paused = true;
              return this;
            };
            function flow(stream) {
              var state = stream._readableState;
              debug("flow", state.flowing);
              while (state.flowing && stream.read() !== null) {
                ;
              }
            }
            Readable.prototype.wrap = function(stream) {
              var _this = this;
              var state = this._readableState;
              var paused = false;
              stream.on("end", function() {
                debug("wrapped end");
                if (state.decoder && !state.ended) {
                  var chunk = state.decoder.end();
                  if (chunk && chunk.length)
                    _this.push(chunk);
                }
                _this.push(null);
              });
              stream.on("data", function(chunk) {
                debug("wrapped data");
                if (state.decoder)
                  chunk = state.decoder.write(chunk);
                if (state.objectMode && (chunk === null || chunk === void 0))
                  return;
                else if (!state.objectMode && (!chunk || !chunk.length))
                  return;
                var ret = _this.push(chunk);
                if (!ret) {
                  paused = true;
                  stream.pause();
                }
              });
              for (var i in stream) {
                if (this[i] === void 0 && typeof stream[i] === "function") {
                  this[i] = function methodWrap(method) {
                    return function methodWrapReturnFunction() {
                      return stream[method].apply(stream, arguments);
                    };
                  }(i);
                }
              }
              for (var n = 0; n < kProxyEvents.length; n++) {
                stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
              }
              this._read = function(n2) {
                debug("wrapped _read", n2);
                if (paused) {
                  paused = false;
                  stream.resume();
                }
              };
              return this;
            };
            if (typeof Symbol === "function") {
              Readable.prototype[Symbol.asyncIterator] = function() {
                if (createReadableStreamAsyncIterator === void 0) {
                  createReadableStreamAsyncIterator = require2("./internal/streams/async_iterator");
                }
                return createReadableStreamAsyncIterator(this);
              };
            }
            Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
              enumerable: false,
              get: function get() {
                return this._readableState.highWaterMark;
              }
            });
            Object.defineProperty(Readable.prototype, "readableBuffer", {
              enumerable: false,
              get: function get() {
                return this._readableState && this._readableState.buffer;
              }
            });
            Object.defineProperty(Readable.prototype, "readableFlowing", {
              enumerable: false,
              get: function get() {
                return this._readableState.flowing;
              },
              set: function set(state) {
                if (this._readableState) {
                  this._readableState.flowing = state;
                }
              }
            });
            Readable._fromList = fromList;
            Object.defineProperty(Readable.prototype, "readableLength", {
              enumerable: false,
              get: function get() {
                return this._readableState.length;
              }
            });
            function fromList(n, state) {
              if (state.length === 0)
                return null;
              var ret;
              if (state.objectMode)
                ret = state.buffer.shift();
              else if (!n || n >= state.length) {
                if (state.decoder)
                  ret = state.buffer.join("");
                else if (state.buffer.length === 1)
                  ret = state.buffer.first();
                else
                  ret = state.buffer.concat(state.length);
                state.buffer.clear();
              } else {
                ret = state.buffer.consume(n, state.decoder);
              }
              return ret;
            }
            function endReadable(stream) {
              var state = stream._readableState;
              debug("endReadable", state.endEmitted);
              if (!state.endEmitted) {
                state.ended = true;
                process.nextTick(endReadableNT, state, stream);
              }
            }
            function endReadableNT(state, stream) {
              debug("endReadableNT", state.endEmitted, state.length);
              if (!state.endEmitted && state.length === 0) {
                state.endEmitted = true;
                stream.readable = false;
                stream.emit("end");
                if (state.autoDestroy) {
                  var wState = stream._writableState;
                  if (!wState || wState.autoDestroy && wState.finished) {
                    stream.destroy();
                  }
                }
              }
            }
            if (typeof Symbol === "function") {
              Readable.from = function(iterable, opts) {
                if (from === void 0) {
                  from = require2("./internal/streams/from");
                }
                return from(Readable, iterable, opts);
              };
            }
            function indexOf(xs, x) {
              for (var i = 0, l = xs.length; i < l; i++) {
                if (xs[i] === x)
                  return i;
              }
              return -1;
            }
          }).call(this);
        }).call(this, require2("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "../errors": 59, "./_stream_duplex": 60, "./internal/streams/async_iterator": 65, "./internal/streams/buffer_list": 66, "./internal/streams/destroy": 67, "./internal/streams/from": 69, "./internal/streams/state": 71, "./internal/streams/stream": 72, "_process": 55, "buffer": 38, "events": 39, "inherits": 41, "string_decoder/": 73, "util": 37 }], 63: [function(require2, module2, exports2) {
        "use strict";
        module2.exports = Transform;
        var _require$codes = require2("../errors").codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
        var Duplex = require2("./_stream_duplex");
        require2("inherits")(Transform, Duplex);
        function afterTransform(er, data) {
          var ts = this._transformState;
          ts.transforming = false;
          var cb = ts.writecb;
          if (cb === null) {
            return this.emit("error", new ERR_MULTIPLE_CALLBACK());
          }
          ts.writechunk = null;
          ts.writecb = null;
          if (data != null)
            this.push(data);
          cb(er);
          var rs = this._readableState;
          rs.reading = false;
          if (rs.needReadable || rs.length < rs.highWaterMark) {
            this._read(rs.highWaterMark);
          }
        }
        function Transform(options) {
          if (!(this instanceof Transform))
            return new Transform(options);
          Duplex.call(this, options);
          this._transformState = {
            afterTransform: afterTransform.bind(this),
            needTransform: false,
            transforming: false,
            writecb: null,
            writechunk: null,
            writeencoding: null
          };
          this._readableState.needReadable = true;
          this._readableState.sync = false;
          if (options) {
            if (typeof options.transform === "function")
              this._transform = options.transform;
            if (typeof options.flush === "function")
              this._flush = options.flush;
          }
          this.on("prefinish", prefinish);
        }
        function prefinish() {
          var _this = this;
          if (typeof this._flush === "function" && !this._readableState.destroyed) {
            this._flush(function(er, data) {
              done(_this, er, data);
            });
          } else {
            done(this, null, null);
          }
        }
        Transform.prototype.push = function(chunk, encoding) {
          this._transformState.needTransform = false;
          return Duplex.prototype.push.call(this, chunk, encoding);
        };
        Transform.prototype._transform = function(chunk, encoding, cb) {
          cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
        };
        Transform.prototype._write = function(chunk, encoding, cb) {
          var ts = this._transformState;
          ts.writecb = cb;
          ts.writechunk = chunk;
          ts.writeencoding = encoding;
          if (!ts.transforming) {
            var rs = this._readableState;
            if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
              this._read(rs.highWaterMark);
          }
        };
        Transform.prototype._read = function(n) {
          var ts = this._transformState;
          if (ts.writechunk !== null && !ts.transforming) {
            ts.transforming = true;
            this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
          } else {
            ts.needTransform = true;
          }
        };
        Transform.prototype._destroy = function(err, cb) {
          Duplex.prototype._destroy.call(this, err, function(err2) {
            cb(err2);
          });
        };
        function done(stream, er, data) {
          if (er)
            return stream.emit("error", er);
          if (data != null)
            stream.push(data);
          if (stream._writableState.length)
            throw new ERR_TRANSFORM_WITH_LENGTH_0();
          if (stream._transformState.transforming)
            throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
          return stream.push(null);
        }
      }, { "../errors": 59, "./_stream_duplex": 60, "inherits": 41 }], 64: [function(require2, module2, exports2) {
        (function(process, global2) {
          (function() {
            "use strict";
            module2.exports = Writable;
            function WriteReq(chunk, encoding, cb) {
              this.chunk = chunk;
              this.encoding = encoding;
              this.callback = cb;
              this.next = null;
            }
            function CorkedRequest(state) {
              var _this = this;
              this.next = null;
              this.entry = null;
              this.finish = function() {
                onCorkedFinish(_this, state);
              };
            }
            var Duplex;
            Writable.WritableState = WritableState;
            var internalUtil = {
              deprecate: require2("util-deprecate")
            };
            var Stream = require2("./internal/streams/stream");
            var Buffer2 = require2("buffer").Buffer;
            var OurUint8Array = global2.Uint8Array || function() {
            };
            function _uint8ArrayToBuffer(chunk) {
              return Buffer2.from(chunk);
            }
            function _isUint8Array(obj) {
              return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
            }
            var destroyImpl = require2("./internal/streams/destroy");
            var _require = require2("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
            var _require$codes = require2("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
            var errorOrDestroy = destroyImpl.errorOrDestroy;
            require2("inherits")(Writable, Stream);
            function nop() {
            }
            function WritableState(options, stream, isDuplex) {
              Duplex = Duplex || require2("./_stream_duplex");
              options = options || {};
              if (typeof isDuplex !== "boolean")
                isDuplex = stream instanceof Duplex;
              this.objectMode = !!options.objectMode;
              if (isDuplex)
                this.objectMode = this.objectMode || !!options.writableObjectMode;
              this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
              this.finalCalled = false;
              this.needDrain = false;
              this.ending = false;
              this.ended = false;
              this.finished = false;
              this.destroyed = false;
              var noDecode = options.decodeStrings === false;
              this.decodeStrings = !noDecode;
              this.defaultEncoding = options.defaultEncoding || "utf8";
              this.length = 0;
              this.writing = false;
              this.corked = 0;
              this.sync = true;
              this.bufferProcessing = false;
              this.onwrite = function(er) {
                onwrite(stream, er);
              };
              this.writecb = null;
              this.writelen = 0;
              this.bufferedRequest = null;
              this.lastBufferedRequest = null;
              this.pendingcb = 0;
              this.prefinished = false;
              this.errorEmitted = false;
              this.emitClose = options.emitClose !== false;
              this.autoDestroy = !!options.autoDestroy;
              this.bufferedRequestCount = 0;
              this.corkedRequestsFree = new CorkedRequest(this);
            }
            WritableState.prototype.getBuffer = function getBuffer() {
              var current = this.bufferedRequest;
              var out = [];
              while (current) {
                out.push(current);
                current = current.next;
              }
              return out;
            };
            (function() {
              try {
                Object.defineProperty(WritableState.prototype, "buffer", {
                  get: internalUtil.deprecate(function writableStateBufferGetter() {
                    return this.getBuffer();
                  }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
                });
              } catch (_) {
              }
            })();
            var realHasInstance;
            if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
              realHasInstance = Function.prototype[Symbol.hasInstance];
              Object.defineProperty(Writable, Symbol.hasInstance, {
                value: function value(object) {
                  if (realHasInstance.call(this, object))
                    return true;
                  if (this !== Writable)
                    return false;
                  return object && object._writableState instanceof WritableState;
                }
              });
            } else {
              realHasInstance = function realHasInstance2(object) {
                return object instanceof this;
              };
            }
            function Writable(options) {
              Duplex = Duplex || require2("./_stream_duplex");
              var isDuplex = this instanceof Duplex;
              if (!isDuplex && !realHasInstance.call(Writable, this))
                return new Writable(options);
              this._writableState = new WritableState(options, this, isDuplex);
              this.writable = true;
              if (options) {
                if (typeof options.write === "function")
                  this._write = options.write;
                if (typeof options.writev === "function")
                  this._writev = options.writev;
                if (typeof options.destroy === "function")
                  this._destroy = options.destroy;
                if (typeof options.final === "function")
                  this._final = options.final;
              }
              Stream.call(this);
            }
            Writable.prototype.pipe = function() {
              errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
            };
            function writeAfterEnd(stream, cb) {
              var er = new ERR_STREAM_WRITE_AFTER_END();
              errorOrDestroy(stream, er);
              process.nextTick(cb, er);
            }
            function validChunk(stream, state, chunk, cb) {
              var er;
              if (chunk === null) {
                er = new ERR_STREAM_NULL_VALUES();
              } else if (typeof chunk !== "string" && !state.objectMode) {
                er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
              }
              if (er) {
                errorOrDestroy(stream, er);
                process.nextTick(cb, er);
                return false;
              }
              return true;
            }
            Writable.prototype.write = function(chunk, encoding, cb) {
              var state = this._writableState;
              var ret = false;
              var isBuf = !state.objectMode && _isUint8Array(chunk);
              if (isBuf && !Buffer2.isBuffer(chunk)) {
                chunk = _uint8ArrayToBuffer(chunk);
              }
              if (typeof encoding === "function") {
                cb = encoding;
                encoding = null;
              }
              if (isBuf)
                encoding = "buffer";
              else if (!encoding)
                encoding = state.defaultEncoding;
              if (typeof cb !== "function")
                cb = nop;
              if (state.ending)
                writeAfterEnd(this, cb);
              else if (isBuf || validChunk(this, state, chunk, cb)) {
                state.pendingcb++;
                ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
              }
              return ret;
            };
            Writable.prototype.cork = function() {
              this._writableState.corked++;
            };
            Writable.prototype.uncork = function() {
              var state = this._writableState;
              if (state.corked) {
                state.corked--;
                if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
                  clearBuffer(this, state);
              }
            };
            Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
              if (typeof encoding === "string")
                encoding = encoding.toLowerCase();
              if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
                throw new ERR_UNKNOWN_ENCODING(encoding);
              this._writableState.defaultEncoding = encoding;
              return this;
            };
            Object.defineProperty(Writable.prototype, "writableBuffer", {
              enumerable: false,
              get: function get() {
                return this._writableState && this._writableState.getBuffer();
              }
            });
            function decodeChunk(state, chunk, encoding) {
              if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
                chunk = Buffer2.from(chunk, encoding);
              }
              return chunk;
            }
            Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
              enumerable: false,
              get: function get() {
                return this._writableState.highWaterMark;
              }
            });
            function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
              if (!isBuf) {
                var newChunk = decodeChunk(state, chunk, encoding);
                if (chunk !== newChunk) {
                  isBuf = true;
                  encoding = "buffer";
                  chunk = newChunk;
                }
              }
              var len = state.objectMode ? 1 : chunk.length;
              state.length += len;
              var ret = state.length < state.highWaterMark;
              if (!ret)
                state.needDrain = true;
              if (state.writing || state.corked) {
                var last = state.lastBufferedRequest;
                state.lastBufferedRequest = {
                  chunk,
                  encoding,
                  isBuf,
                  callback: cb,
                  next: null
                };
                if (last) {
                  last.next = state.lastBufferedRequest;
                } else {
                  state.bufferedRequest = state.lastBufferedRequest;
                }
                state.bufferedRequestCount += 1;
              } else {
                doWrite(stream, state, false, len, chunk, encoding, cb);
              }
              return ret;
            }
            function doWrite(stream, state, writev, len, chunk, encoding, cb) {
              state.writelen = len;
              state.writecb = cb;
              state.writing = true;
              state.sync = true;
              if (state.destroyed)
                state.onwrite(new ERR_STREAM_DESTROYED("write"));
              else if (writev)
                stream._writev(chunk, state.onwrite);
              else
                stream._write(chunk, encoding, state.onwrite);
              state.sync = false;
            }
            function onwriteError(stream, state, sync, er, cb) {
              --state.pendingcb;
              if (sync) {
                process.nextTick(cb, er);
                process.nextTick(finishMaybe, stream, state);
                stream._writableState.errorEmitted = true;
                errorOrDestroy(stream, er);
              } else {
                cb(er);
                stream._writableState.errorEmitted = true;
                errorOrDestroy(stream, er);
                finishMaybe(stream, state);
              }
            }
            function onwriteStateUpdate(state) {
              state.writing = false;
              state.writecb = null;
              state.length -= state.writelen;
              state.writelen = 0;
            }
            function onwrite(stream, er) {
              var state = stream._writableState;
              var sync = state.sync;
              var cb = state.writecb;
              if (typeof cb !== "function")
                throw new ERR_MULTIPLE_CALLBACK();
              onwriteStateUpdate(state);
              if (er)
                onwriteError(stream, state, sync, er, cb);
              else {
                var finished = needFinish(state) || stream.destroyed;
                if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                  clearBuffer(stream, state);
                }
                if (sync) {
                  process.nextTick(afterWrite, stream, state, finished, cb);
                } else {
                  afterWrite(stream, state, finished, cb);
                }
              }
            }
            function afterWrite(stream, state, finished, cb) {
              if (!finished)
                onwriteDrain(stream, state);
              state.pendingcb--;
              cb();
              finishMaybe(stream, state);
            }
            function onwriteDrain(stream, state) {
              if (state.length === 0 && state.needDrain) {
                state.needDrain = false;
                stream.emit("drain");
              }
            }
            function clearBuffer(stream, state) {
              state.bufferProcessing = true;
              var entry = state.bufferedRequest;
              if (stream._writev && entry && entry.next) {
                var l = state.bufferedRequestCount;
                var buffer = new Array(l);
                var holder = state.corkedRequestsFree;
                holder.entry = entry;
                var count = 0;
                var allBuffers = true;
                while (entry) {
                  buffer[count] = entry;
                  if (!entry.isBuf)
                    allBuffers = false;
                  entry = entry.next;
                  count += 1;
                }
                buffer.allBuffers = allBuffers;
                doWrite(stream, state, true, state.length, buffer, "", holder.finish);
                state.pendingcb++;
                state.lastBufferedRequest = null;
                if (holder.next) {
                  state.corkedRequestsFree = holder.next;
                  holder.next = null;
                } else {
                  state.corkedRequestsFree = new CorkedRequest(state);
                }
                state.bufferedRequestCount = 0;
              } else {
                while (entry) {
                  var chunk = entry.chunk;
                  var encoding = entry.encoding;
                  var cb = entry.callback;
                  var len = state.objectMode ? 1 : chunk.length;
                  doWrite(stream, state, false, len, chunk, encoding, cb);
                  entry = entry.next;
                  state.bufferedRequestCount--;
                  if (state.writing) {
                    break;
                  }
                }
                if (entry === null)
                  state.lastBufferedRequest = null;
              }
              state.bufferedRequest = entry;
              state.bufferProcessing = false;
            }
            Writable.prototype._write = function(chunk, encoding, cb) {
              cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
            };
            Writable.prototype._writev = null;
            Writable.prototype.end = function(chunk, encoding, cb) {
              var state = this._writableState;
              if (typeof chunk === "function") {
                cb = chunk;
                chunk = null;
                encoding = null;
              } else if (typeof encoding === "function") {
                cb = encoding;
                encoding = null;
              }
              if (chunk !== null && chunk !== void 0)
                this.write(chunk, encoding);
              if (state.corked) {
                state.corked = 1;
                this.uncork();
              }
              if (!state.ending)
                endWritable(this, state, cb);
              return this;
            };
            Object.defineProperty(Writable.prototype, "writableLength", {
              enumerable: false,
              get: function get() {
                return this._writableState.length;
              }
            });
            function needFinish(state) {
              return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
            }
            function callFinal(stream, state) {
              stream._final(function(err) {
                state.pendingcb--;
                if (err) {
                  errorOrDestroy(stream, err);
                }
                state.prefinished = true;
                stream.emit("prefinish");
                finishMaybe(stream, state);
              });
            }
            function prefinish(stream, state) {
              if (!state.prefinished && !state.finalCalled) {
                if (typeof stream._final === "function" && !state.destroyed) {
                  state.pendingcb++;
                  state.finalCalled = true;
                  process.nextTick(callFinal, stream, state);
                } else {
                  state.prefinished = true;
                  stream.emit("prefinish");
                }
              }
            }
            function finishMaybe(stream, state) {
              var need = needFinish(state);
              if (need) {
                prefinish(stream, state);
                if (state.pendingcb === 0) {
                  state.finished = true;
                  stream.emit("finish");
                  if (state.autoDestroy) {
                    var rState = stream._readableState;
                    if (!rState || rState.autoDestroy && rState.endEmitted) {
                      stream.destroy();
                    }
                  }
                }
              }
              return need;
            }
            function endWritable(stream, state, cb) {
              state.ending = true;
              finishMaybe(stream, state);
              if (cb) {
                if (state.finished)
                  process.nextTick(cb);
                else
                  stream.once("finish", cb);
              }
              state.ended = true;
              stream.writable = false;
            }
            function onCorkedFinish(corkReq, state, err) {
              var entry = corkReq.entry;
              corkReq.entry = null;
              while (entry) {
                var cb = entry.callback;
                state.pendingcb--;
                cb(err);
                entry = entry.next;
              }
              state.corkedRequestsFree.next = corkReq;
            }
            Object.defineProperty(Writable.prototype, "destroyed", {
              enumerable: false,
              get: function get() {
                if (this._writableState === void 0) {
                  return false;
                }
                return this._writableState.destroyed;
              },
              set: function set(value) {
                if (!this._writableState) {
                  return;
                }
                this._writableState.destroyed = value;
              }
            });
            Writable.prototype.destroy = destroyImpl.destroy;
            Writable.prototype._undestroy = destroyImpl.undestroy;
            Writable.prototype._destroy = function(err, cb) {
              cb(err);
            };
          }).call(this);
        }).call(this, require2("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, { "../errors": 59, "./_stream_duplex": 60, "./internal/streams/destroy": 67, "./internal/streams/state": 71, "./internal/streams/stream": 72, "_process": 55, "buffer": 38, "inherits": 41, "util-deprecate": 77 }], 65: [function(require2, module2, exports2) {
        (function(process) {
          (function() {
            "use strict";
            var _Object$setPrototypeO;
            function _defineProperty(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            var finished = require2("./end-of-stream");
            var kLastResolve = Symbol("lastResolve");
            var kLastReject = Symbol("lastReject");
            var kError = Symbol("error");
            var kEnded = Symbol("ended");
            var kLastPromise = Symbol("lastPromise");
            var kHandlePromise = Symbol("handlePromise");
            var kStream = Symbol("stream");
            function createIterResult(value, done) {
              return {
                value,
                done
              };
            }
            function readAndResolve(iter) {
              var resolve = iter[kLastResolve];
              if (resolve !== null) {
                var data = iter[kStream].read();
                if (data !== null) {
                  iter[kLastPromise] = null;
                  iter[kLastResolve] = null;
                  iter[kLastReject] = null;
                  resolve(createIterResult(data, false));
                }
              }
            }
            function onReadable(iter) {
              process.nextTick(readAndResolve, iter);
            }
            function wrapForNext(lastPromise, iter) {
              return function(resolve, reject) {
                lastPromise.then(function() {
                  if (iter[kEnded]) {
                    resolve(createIterResult(void 0, true));
                    return;
                  }
                  iter[kHandlePromise](resolve, reject);
                }, reject);
              };
            }
            var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
            });
            var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
              get stream() {
                return this[kStream];
              },
              next: function next() {
                var _this = this;
                var error = this[kError];
                if (error !== null) {
                  return Promise.reject(error);
                }
                if (this[kEnded]) {
                  return Promise.resolve(createIterResult(void 0, true));
                }
                if (this[kStream].destroyed) {
                  return new Promise(function(resolve, reject) {
                    process.nextTick(function() {
                      if (_this[kError]) {
                        reject(_this[kError]);
                      } else {
                        resolve(createIterResult(void 0, true));
                      }
                    });
                  });
                }
                var lastPromise = this[kLastPromise];
                var promise;
                if (lastPromise) {
                  promise = new Promise(wrapForNext(lastPromise, this));
                } else {
                  var data = this[kStream].read();
                  if (data !== null) {
                    return Promise.resolve(createIterResult(data, false));
                  }
                  promise = new Promise(this[kHandlePromise]);
                }
                this[kLastPromise] = promise;
                return promise;
              }
            }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
              return this;
            }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
              var _this2 = this;
              return new Promise(function(resolve, reject) {
                _this2[kStream].destroy(null, function(err) {
                  if (err) {
                    reject(err);
                    return;
                  }
                  resolve(createIterResult(void 0, true));
                });
              });
            }), _Object$setPrototypeO), AsyncIteratorPrototype);
            var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
              var _Object$create;
              var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
                value: stream,
                writable: true
              }), _defineProperty(_Object$create, kLastResolve, {
                value: null,
                writable: true
              }), _defineProperty(_Object$create, kLastReject, {
                value: null,
                writable: true
              }), _defineProperty(_Object$create, kError, {
                value: null,
                writable: true
              }), _defineProperty(_Object$create, kEnded, {
                value: stream._readableState.endEmitted,
                writable: true
              }), _defineProperty(_Object$create, kHandlePromise, {
                value: function value(resolve, reject) {
                  var data = iterator[kStream].read();
                  if (data) {
                    iterator[kLastPromise] = null;
                    iterator[kLastResolve] = null;
                    iterator[kLastReject] = null;
                    resolve(createIterResult(data, false));
                  } else {
                    iterator[kLastResolve] = resolve;
                    iterator[kLastReject] = reject;
                  }
                },
                writable: true
              }), _Object$create));
              iterator[kLastPromise] = null;
              finished(stream, function(err) {
                if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
                  var reject = iterator[kLastReject];
                  if (reject !== null) {
                    iterator[kLastPromise] = null;
                    iterator[kLastResolve] = null;
                    iterator[kLastReject] = null;
                    reject(err);
                  }
                  iterator[kError] = err;
                  return;
                }
                var resolve = iterator[kLastResolve];
                if (resolve !== null) {
                  iterator[kLastPromise] = null;
                  iterator[kLastResolve] = null;
                  iterator[kLastReject] = null;
                  resolve(createIterResult(void 0, true));
                }
                iterator[kEnded] = true;
              });
              stream.on("readable", onReadable.bind(null, iterator));
              return iterator;
            };
            module2.exports = createReadableStreamAsyncIterator;
          }).call(this);
        }).call(this, require2("_process"));
      }, { "./end-of-stream": 68, "_process": 55 }], 66: [function(require2, module2, exports2) {
        "use strict";
        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly)
              symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            keys.push.apply(keys, symbols);
          }
          return keys;
        }
        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source2 = arguments[i] != null ? arguments[i] : {};
            if (i % 2) {
              ownKeys(Object(source2), true).forEach(function(key) {
                _defineProperty(target, key, source2[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2));
            } else {
              ownKeys(Object(source2)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
              });
            }
          }
          return target;
        }
        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps)
            _defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            _defineProperties(Constructor, staticProps);
          return Constructor;
        }
        var _require = require2("buffer"), Buffer2 = _require.Buffer;
        var _require2 = require2("util"), inspect = _require2.inspect;
        var custom = inspect && inspect.custom || "inspect";
        function copyBuffer(src, target, offset) {
          Buffer2.prototype.copy.call(src, target, offset);
        }
        module2.exports = /* @__PURE__ */ function() {
          function BufferList() {
            _classCallCheck(this, BufferList);
            this.head = null;
            this.tail = null;
            this.length = 0;
          }
          _createClass(BufferList, [{
            key: "push",
            value: function push(v) {
              var entry = {
                data: v,
                next: null
              };
              if (this.length > 0)
                this.tail.next = entry;
              else
                this.head = entry;
              this.tail = entry;
              ++this.length;
            }
          }, {
            key: "unshift",
            value: function unshift(v) {
              var entry = {
                data: v,
                next: this.head
              };
              if (this.length === 0)
                this.tail = entry;
              this.head = entry;
              ++this.length;
            }
          }, {
            key: "shift",
            value: function shift() {
              if (this.length === 0)
                return;
              var ret = this.head.data;
              if (this.length === 1)
                this.head = this.tail = null;
              else
                this.head = this.head.next;
              --this.length;
              return ret;
            }
          }, {
            key: "clear",
            value: function clear() {
              this.head = this.tail = null;
              this.length = 0;
            }
          }, {
            key: "join",
            value: function join(s) {
              if (this.length === 0)
                return "";
              var p = this.head;
              var ret = "" + p.data;
              while (p = p.next) {
                ret += s + p.data;
              }
              return ret;
            }
          }, {
            key: "concat",
            value: function concat(n) {
              if (this.length === 0)
                return Buffer2.alloc(0);
              var ret = Buffer2.allocUnsafe(n >>> 0);
              var p = this.head;
              var i = 0;
              while (p) {
                copyBuffer(p.data, ret, i);
                i += p.data.length;
                p = p.next;
              }
              return ret;
            }
          }, {
            key: "consume",
            value: function consume(n, hasStrings) {
              var ret;
              if (n < this.head.data.length) {
                ret = this.head.data.slice(0, n);
                this.head.data = this.head.data.slice(n);
              } else if (n === this.head.data.length) {
                ret = this.shift();
              } else {
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
              }
              return ret;
            }
          }, {
            key: "first",
            value: function first() {
              return this.head.data;
            }
          }, {
            key: "_getString",
            value: function _getString(n) {
              var p = this.head;
              var c = 1;
              var ret = p.data;
              n -= ret.length;
              while (p = p.next) {
                var str = p.data;
                var nb = n > str.length ? str.length : n;
                if (nb === str.length)
                  ret += str;
                else
                  ret += str.slice(0, n);
                n -= nb;
                if (n === 0) {
                  if (nb === str.length) {
                    ++c;
                    if (p.next)
                      this.head = p.next;
                    else
                      this.head = this.tail = null;
                  } else {
                    this.head = p;
                    p.data = str.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              this.length -= c;
              return ret;
            }
          }, {
            key: "_getBuffer",
            value: function _getBuffer(n) {
              var ret = Buffer2.allocUnsafe(n);
              var p = this.head;
              var c = 1;
              p.data.copy(ret);
              n -= p.data.length;
              while (p = p.next) {
                var buf = p.data;
                var nb = n > buf.length ? buf.length : n;
                buf.copy(ret, ret.length - n, 0, nb);
                n -= nb;
                if (n === 0) {
                  if (nb === buf.length) {
                    ++c;
                    if (p.next)
                      this.head = p.next;
                    else
                      this.head = this.tail = null;
                  } else {
                    this.head = p;
                    p.data = buf.slice(nb);
                  }
                  break;
                }
                ++c;
              }
              this.length -= c;
              return ret;
            }
          }, {
            key: custom,
            value: function value(_, options) {
              return inspect(this, _objectSpread({}, options, {
                depth: 0,
                customInspect: false
              }));
            }
          }]);
          return BufferList;
        }();
      }, { "buffer": 38, "util": 37 }], 67: [function(require2, module2, exports2) {
        (function(process) {
          (function() {
            "use strict";
            function destroy(err, cb) {
              var _this = this;
              var readableDestroyed = this._readableState && this._readableState.destroyed;
              var writableDestroyed = this._writableState && this._writableState.destroyed;
              if (readableDestroyed || writableDestroyed) {
                if (cb) {
                  cb(err);
                } else if (err) {
                  if (!this._writableState) {
                    process.nextTick(emitErrorNT, this, err);
                  } else if (!this._writableState.errorEmitted) {
                    this._writableState.errorEmitted = true;
                    process.nextTick(emitErrorNT, this, err);
                  }
                }
                return this;
              }
              if (this._readableState) {
                this._readableState.destroyed = true;
              }
              if (this._writableState) {
                this._writableState.destroyed = true;
              }
              this._destroy(err || null, function(err2) {
                if (!cb && err2) {
                  if (!_this._writableState) {
                    process.nextTick(emitErrorAndCloseNT, _this, err2);
                  } else if (!_this._writableState.errorEmitted) {
                    _this._writableState.errorEmitted = true;
                    process.nextTick(emitErrorAndCloseNT, _this, err2);
                  } else {
                    process.nextTick(emitCloseNT, _this);
                  }
                } else if (cb) {
                  process.nextTick(emitCloseNT, _this);
                  cb(err2);
                } else {
                  process.nextTick(emitCloseNT, _this);
                }
              });
              return this;
            }
            function emitErrorAndCloseNT(self2, err) {
              emitErrorNT(self2, err);
              emitCloseNT(self2);
            }
            function emitCloseNT(self2) {
              if (self2._writableState && !self2._writableState.emitClose)
                return;
              if (self2._readableState && !self2._readableState.emitClose)
                return;
              self2.emit("close");
            }
            function undestroy() {
              if (this._readableState) {
                this._readableState.destroyed = false;
                this._readableState.reading = false;
                this._readableState.ended = false;
                this._readableState.endEmitted = false;
              }
              if (this._writableState) {
                this._writableState.destroyed = false;
                this._writableState.ended = false;
                this._writableState.ending = false;
                this._writableState.finalCalled = false;
                this._writableState.prefinished = false;
                this._writableState.finished = false;
                this._writableState.errorEmitted = false;
              }
            }
            function emitErrorNT(self2, err) {
              self2.emit("error", err);
            }
            function errorOrDestroy(stream, err) {
              var rState = stream._readableState;
              var wState = stream._writableState;
              if (rState && rState.autoDestroy || wState && wState.autoDestroy)
                stream.destroy(err);
              else
                stream.emit("error", err);
            }
            module2.exports = {
              destroy,
              undestroy,
              errorOrDestroy
            };
          }).call(this);
        }).call(this, require2("_process"));
      }, { "_process": 55 }], 68: [function(require2, module2, exports2) {
        "use strict";
        var ERR_STREAM_PREMATURE_CLOSE = require2("../../../errors").codes.ERR_STREAM_PREMATURE_CLOSE;
        function once(callback) {
          var called = false;
          return function() {
            if (called)
              return;
            called = true;
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            callback.apply(this, args);
          };
        }
        function noop() {
        }
        function isRequest(stream) {
          return stream.setHeader && typeof stream.abort === "function";
        }
        function eos(stream, opts, callback) {
          if (typeof opts === "function")
            return eos(stream, null, opts);
          if (!opts)
            opts = {};
          callback = once(callback || noop);
          var readable = opts.readable || opts.readable !== false && stream.readable;
          var writable = opts.writable || opts.writable !== false && stream.writable;
          var onlegacyfinish = function onlegacyfinish2() {
            if (!stream.writable)
              onfinish();
          };
          var writableEnded = stream._writableState && stream._writableState.finished;
          var onfinish = function onfinish2() {
            writable = false;
            writableEnded = true;
            if (!readable)
              callback.call(stream);
          };
          var readableEnded = stream._readableState && stream._readableState.endEmitted;
          var onend = function onend2() {
            readable = false;
            readableEnded = true;
            if (!writable)
              callback.call(stream);
          };
          var onerror = function onerror2(err) {
            callback.call(stream, err);
          };
          var onclose = function onclose2() {
            var err;
            if (readable && !readableEnded) {
              if (!stream._readableState || !stream._readableState.ended)
                err = new ERR_STREAM_PREMATURE_CLOSE();
              return callback.call(stream, err);
            }
            if (writable && !writableEnded) {
              if (!stream._writableState || !stream._writableState.ended)
                err = new ERR_STREAM_PREMATURE_CLOSE();
              return callback.call(stream, err);
            }
          };
          var onrequest = function onrequest2() {
            stream.req.on("finish", onfinish);
          };
          if (isRequest(stream)) {
            stream.on("complete", onfinish);
            stream.on("abort", onclose);
            if (stream.req)
              onrequest();
            else
              stream.on("request", onrequest);
          } else if (writable && !stream._writableState) {
            stream.on("end", onlegacyfinish);
            stream.on("close", onlegacyfinish);
          }
          stream.on("end", onend);
          stream.on("finish", onfinish);
          if (opts.error !== false)
            stream.on("error", onerror);
          stream.on("close", onclose);
          return function() {
            stream.removeListener("complete", onfinish);
            stream.removeListener("abort", onclose);
            stream.removeListener("request", onrequest);
            if (stream.req)
              stream.req.removeListener("finish", onfinish);
            stream.removeListener("end", onlegacyfinish);
            stream.removeListener("close", onlegacyfinish);
            stream.removeListener("finish", onfinish);
            stream.removeListener("end", onend);
            stream.removeListener("error", onerror);
            stream.removeListener("close", onclose);
          };
        }
        module2.exports = eos;
      }, { "../../../errors": 59 }], 69: [function(require2, module2, exports2) {
        module2.exports = function() {
          throw new Error("Readable.from is not available in the browser");
        };
      }, {}], 70: [function(require2, module2, exports2) {
        "use strict";
        var eos;
        function once(callback) {
          var called = false;
          return function() {
            if (called)
              return;
            called = true;
            callback.apply(void 0, arguments);
          };
        }
        var _require$codes = require2("../../../errors").codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
        function noop(err) {
          if (err)
            throw err;
        }
        function isRequest(stream) {
          return stream.setHeader && typeof stream.abort === "function";
        }
        function destroyer(stream, reading, writing, callback) {
          callback = once(callback);
          var closed = false;
          stream.on("close", function() {
            closed = true;
          });
          if (eos === void 0)
            eos = require2("./end-of-stream");
          eos(stream, {
            readable: reading,
            writable: writing
          }, function(err) {
            if (err)
              return callback(err);
            closed = true;
            callback();
          });
          var destroyed = false;
          return function(err) {
            if (closed)
              return;
            if (destroyed)
              return;
            destroyed = true;
            if (isRequest(stream))
              return stream.abort();
            if (typeof stream.destroy === "function")
              return stream.destroy();
            callback(err || new ERR_STREAM_DESTROYED("pipe"));
          };
        }
        function call(fn) {
          fn();
        }
        function pipe(from, to) {
          return from.pipe(to);
        }
        function popCallback(streams) {
          if (!streams.length)
            return noop;
          if (typeof streams[streams.length - 1] !== "function")
            return noop;
          return streams.pop();
        }
        function pipeline() {
          for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
            streams[_key] = arguments[_key];
          }
          var callback = popCallback(streams);
          if (Array.isArray(streams[0]))
            streams = streams[0];
          if (streams.length < 2) {
            throw new ERR_MISSING_ARGS("streams");
          }
          var error;
          var destroys = streams.map(function(stream, i) {
            var reading = i < streams.length - 1;
            var writing = i > 0;
            return destroyer(stream, reading, writing, function(err) {
              if (!error)
                error = err;
              if (err)
                destroys.forEach(call);
              if (reading)
                return;
              destroys.forEach(call);
              callback(error);
            });
          });
          return streams.reduce(pipe);
        }
        module2.exports = pipeline;
      }, { "../../../errors": 59, "./end-of-stream": 68 }], 71: [function(require2, module2, exports2) {
        "use strict";
        var ERR_INVALID_OPT_VALUE = require2("../../../errors").codes.ERR_INVALID_OPT_VALUE;
        function highWaterMarkFrom(options, isDuplex, duplexKey) {
          return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
        }
        function getHighWaterMark(state, options, duplexKey, isDuplex) {
          var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
          if (hwm != null) {
            if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
              var name = isDuplex ? duplexKey : "highWaterMark";
              throw new ERR_INVALID_OPT_VALUE(name, hwm);
            }
            return Math.floor(hwm);
          }
          return state.objectMode ? 16 : 16 * 1024;
        }
        module2.exports = {
          getHighWaterMark
        };
      }, { "../../../errors": 59 }], 72: [function(require2, module2, exports2) {
        module2.exports = require2("events").EventEmitter;
      }, { "events": 39 }], 73: [function(require2, module2, exports2) {
        "use strict";
        var Buffer2 = require2("safe-buffer").Buffer;
        var isEncoding = Buffer2.isEncoding || function(encoding) {
          encoding = "" + encoding;
          switch (encoding && encoding.toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
            case "raw":
              return true;
            default:
              return false;
          }
        };
        function _normalizeEncoding(enc) {
          if (!enc)
            return "utf8";
          var retried;
          while (true) {
            switch (enc) {
              case "utf8":
              case "utf-8":
                return "utf8";
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return "utf16le";
              case "latin1":
              case "binary":
                return "latin1";
              case "base64":
              case "ascii":
              case "hex":
                return enc;
              default:
                if (retried)
                  return;
                enc = ("" + enc).toLowerCase();
                retried = true;
            }
          }
        }
        ;
        function normalizeEncoding(enc) {
          var nenc = _normalizeEncoding(enc);
          if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
            throw new Error("Unknown encoding: " + enc);
          return nenc || enc;
        }
        exports2.StringDecoder = StringDecoder;
        function StringDecoder(encoding) {
          this.encoding = normalizeEncoding(encoding);
          var nb;
          switch (this.encoding) {
            case "utf16le":
              this.text = utf16Text;
              this.end = utf16End;
              nb = 4;
              break;
            case "utf8":
              this.fillLast = utf8FillLast;
              nb = 4;
              break;
            case "base64":
              this.text = base64Text;
              this.end = base64End;
              nb = 3;
              break;
            default:
              this.write = simpleWrite;
              this.end = simpleEnd;
              return;
          }
          this.lastNeed = 0;
          this.lastTotal = 0;
          this.lastChar = Buffer2.allocUnsafe(nb);
        }
        StringDecoder.prototype.write = function(buf) {
          if (buf.length === 0)
            return "";
          var r;
          var i;
          if (this.lastNeed) {
            r = this.fillLast(buf);
            if (r === void 0)
              return "";
            i = this.lastNeed;
            this.lastNeed = 0;
          } else {
            i = 0;
          }
          if (i < buf.length)
            return r ? r + this.text(buf, i) : this.text(buf, i);
          return r || "";
        };
        StringDecoder.prototype.end = utf8End;
        StringDecoder.prototype.text = utf8Text;
        StringDecoder.prototype.fillLast = function(buf) {
          if (this.lastNeed <= buf.length) {
            buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
            return this.lastChar.toString(this.encoding, 0, this.lastTotal);
          }
          buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
          this.lastNeed -= buf.length;
        };
        function utf8CheckByte(byte) {
          if (byte <= 127)
            return 0;
          else if (byte >> 5 === 6)
            return 2;
          else if (byte >> 4 === 14)
            return 3;
          else if (byte >> 3 === 30)
            return 4;
          return byte >> 6 === 2 ? -1 : -2;
        }
        function utf8CheckIncomplete(self2, buf, i) {
          var j = buf.length - 1;
          if (j < i)
            return 0;
          var nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0)
              self2.lastNeed = nb - 1;
            return nb;
          }
          if (--j < i || nb === -2)
            return 0;
          nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0)
              self2.lastNeed = nb - 2;
            return nb;
          }
          if (--j < i || nb === -2)
            return 0;
          nb = utf8CheckByte(buf[j]);
          if (nb >= 0) {
            if (nb > 0) {
              if (nb === 2)
                nb = 0;
              else
                self2.lastNeed = nb - 3;
            }
            return nb;
          }
          return 0;
        }
        function utf8CheckExtraBytes(self2, buf, p) {
          if ((buf[0] & 192) !== 128) {
            self2.lastNeed = 0;
            return "\uFFFD";
          }
          if (self2.lastNeed > 1 && buf.length > 1) {
            if ((buf[1] & 192) !== 128) {
              self2.lastNeed = 1;
              return "\uFFFD";
            }
            if (self2.lastNeed > 2 && buf.length > 2) {
              if ((buf[2] & 192) !== 128) {
                self2.lastNeed = 2;
                return "\uFFFD";
              }
            }
          }
        }
        function utf8FillLast(buf) {
          var p = this.lastTotal - this.lastNeed;
          var r = utf8CheckExtraBytes(this, buf, p);
          if (r !== void 0)
            return r;
          if (this.lastNeed <= buf.length) {
            buf.copy(this.lastChar, p, 0, this.lastNeed);
            return this.lastChar.toString(this.encoding, 0, this.lastTotal);
          }
          buf.copy(this.lastChar, p, 0, buf.length);
          this.lastNeed -= buf.length;
        }
        function utf8Text(buf, i) {
          var total = utf8CheckIncomplete(this, buf, i);
          if (!this.lastNeed)
            return buf.toString("utf8", i);
          this.lastTotal = total;
          var end = buf.length - (total - this.lastNeed);
          buf.copy(this.lastChar, 0, end);
          return buf.toString("utf8", i, end);
        }
        function utf8End(buf) {
          var r = buf && buf.length ? this.write(buf) : "";
          if (this.lastNeed)
            return r + "\uFFFD";
          return r;
        }
        function utf16Text(buf, i) {
          if ((buf.length - i) % 2 === 0) {
            var r = buf.toString("utf16le", i);
            if (r) {
              var c = r.charCodeAt(r.length - 1);
              if (c >= 55296 && c <= 56319) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
              }
            }
            return r;
          }
          this.lastNeed = 1;
          this.lastTotal = 2;
          this.lastChar[0] = buf[buf.length - 1];
          return buf.toString("utf16le", i, buf.length - 1);
        }
        function utf16End(buf) {
          var r = buf && buf.length ? this.write(buf) : "";
          if (this.lastNeed) {
            var end = this.lastTotal - this.lastNeed;
            return r + this.lastChar.toString("utf16le", 0, end);
          }
          return r;
        }
        function base64Text(buf, i) {
          var n = (buf.length - i) % 3;
          if (n === 0)
            return buf.toString("base64", i);
          this.lastNeed = 3 - n;
          this.lastTotal = 3;
          if (n === 1) {
            this.lastChar[0] = buf[buf.length - 1];
          } else {
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
          }
          return buf.toString("base64", i, buf.length - n);
        }
        function base64End(buf) {
          var r = buf && buf.length ? this.write(buf) : "";
          if (this.lastNeed)
            return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
          return r;
        }
        function simpleWrite(buf) {
          return buf.toString(this.encoding);
        }
        function simpleEnd(buf) {
          return buf && buf.length ? this.write(buf) : "";
        }
      }, { "safe-buffer": 56 }], 74: [function(require2, module2, exports2) {
        "use strict";
        var parse2 = require2("./parse"), reparse = require2("./reparse");
        exports2.parse = parse2;
        exports2.reparse = reparse;
      }, { "./parse": 75, "./reparse": 76 }], 75: [function(require2, module2, exports2) {
        "use strict";
        var escapeMap = {
          "&": "&amp;",
          '"': "&quot;",
          "<": "&lt;",
          ">": "&gt;"
        };
        function xscape(val) {
          if (typeof val !== "string") {
            return val;
          }
          return val.replace(
            /([&"<>])/g,
            function(_, e) {
              return escapeMap[e];
            }
          );
        }
        var token = /<o>|<ins>|<s>|<sub>|<sup>|<b>|<i>|<tt>|<\/o>|<\/ins>|<\/s>|<\/sub>|<\/sup>|<\/b>|<\/i>|<\/tt>/;
        function update(s, cmd) {
          if (cmd.add) {
            cmd.add.split(";").forEach(function(e) {
              var arr = e.split(" ");
              s[arr[0]][arr[1]] = true;
            });
          }
          if (cmd.del) {
            cmd.del.split(";").forEach(function(e) {
              var arr = e.split(" ");
              delete s[arr[0]][arr[1]];
            });
          }
        }
        var trans = {
          "<o>": { add: "text-decoration overline" },
          "</o>": { del: "text-decoration overline" },
          "<ins>": { add: "text-decoration underline" },
          "</ins>": { del: "text-decoration underline" },
          "<s>": { add: "text-decoration line-through" },
          "</s>": { del: "text-decoration line-through" },
          "<b>": { add: "font-weight bold" },
          "</b>": { del: "font-weight bold" },
          "<i>": { add: "font-style italic" },
          "</i>": { del: "font-style italic" },
          "<sub>": { add: "baseline-shift sub;font-size .7em" },
          "</sub>": { del: "baseline-shift sub;font-size .7em" },
          "<sup>": { add: "baseline-shift super;font-size .7em" },
          "</sup>": { del: "baseline-shift super;font-size .7em" },
          "<tt>": { add: "font-family monospace" },
          "</tt>": { del: "font-family monospace" }
        };
        function dump(s) {
          return Object.keys(s).reduce(function(pre, cur) {
            var keys = Object.keys(s[cur]);
            if (keys.length > 0) {
              pre[cur] = keys.join(" ");
            }
            return pre;
          }, {});
        }
        function parse2(str) {
          var state, res, i, m, a;
          if (str === void 0) {
            return [];
          }
          if (typeof str === "number") {
            return [str + ""];
          }
          if (typeof str !== "string") {
            return [str];
          }
          res = [];
          state = {
            "text-decoration": {},
            "font-weight": {},
            "font-style": {},
            "baseline-shift": {},
            "font-size": {},
            "font-family": {}
          };
          while (true) {
            i = str.search(token);
            if (i === -1) {
              res.push(["tspan", dump(state), xscape(str)]);
              return res;
            }
            if (i > 0) {
              a = str.slice(0, i);
              res.push(["tspan", dump(state), xscape(a)]);
            }
            m = str.match(token)[0];
            update(state, trans[m]);
            str = str.slice(i + m.length);
            if (str.length === 0) {
              return res;
            }
          }
        }
        module2.exports = parse2;
      }, {}], 76: [function(require2, module2, exports2) {
        "use strict";
        var parse2 = require2("./parse");
        function deDash(str) {
          var m = str.match(/(\w+)-(\w)(\w+)/);
          if (m === null) {
            return str;
          }
          var newStr = m[1] + m[2].toUpperCase() + m[3];
          return newStr;
        }
        function reparse(React) {
          var $ = React.createElement;
          function reTspan(e, i) {
            var tag = e[0];
            var attr = e[1];
            var newAttr = Object.keys(attr).reduce(function(res, key) {
              var newKey = deDash(key);
              res[newKey] = attr[key];
              return res;
            }, {});
            var body = e[2];
            newAttr.key = i;
            return $(tag, newAttr, body);
          }
          return function(str) {
            return parse2(str).map(reTspan);
          };
        }
        module2.exports = reparse;
      }, { "./parse": 75 }], 77: [function(require2, module2, exports2) {
        (function(global2) {
          (function() {
            module2.exports = deprecate;
            function deprecate(fn, msg) {
              if (config("noDeprecation")) {
                return fn;
              }
              var warned = false;
              function deprecated() {
                if (!warned) {
                  if (config("throwDeprecation")) {
                    throw new Error(msg);
                  } else if (config("traceDeprecation")) {
                    console.trace(msg);
                  } else {
                    console.warn(msg);
                  }
                  warned = true;
                }
                return fn.apply(this, arguments);
              }
              return deprecated;
            }
            function config(name) {
              try {
                if (!global2.localStorage)
                  return false;
              } catch (_) {
                return false;
              }
              var val = global2.localStorage[name];
              if (null == val)
                return false;
              return String(val).toLowerCase() === "true";
            }
          }).call(this);
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
      }, {}], 78: [function(require2, module2, exports2) {
        module2.exports = {
          "name": "wavedrom",
          "version": "2.9.1",
          "description": "Digital timing diagram in your browser",
          "homepage": "http://wavedrom.com",
          "author": "alex.drom@gmail.com",
          "license": "MIT",
          "repository": {
            "type": "git",
            "url": "https://github.com/wavedrom/wavedrom.git"
          },
          "bugs": {
            "url": "https://github.com/wavedrom/wavedrom/issues"
          },
          "main": "./lib",
          "unpkg": "wavedrom.unpkg.min.js",
          "files": [
            "bin/cli.js",
            "wavedrom.js",
            "wavedrom.min.js",
            "wavedrom.unpkg.js",
            "wavedrom.unpkg.min.js",
            "LICENSE",
            "lib/**",
            "skins/**"
          ],
          "scripts": {
            "test": "npm-run-all eslint nyc",
            "eslint": "eslint lib/*.js",
            "nyc": "nyc -r=lcov -r=text mocha test",
            "dist": "browserify ./lib/wave-drom.js > wavedrom.js",
            "watch.dist": "watchify ./lib/wave-drom.js -o wavedrom.js -v",
            "dist.min": "terser --compress --mengle -- wavedrom.js | node ./bin/header.js > wavedrom.min.js",
            "unpkg": "browserify --standalone wavedrom lib/index.js > wavedrom.unpkg.js",
            "unpkg.min": "terser --compress --mengle -- wavedrom.unpkg.js | node ./bin/header.js > wavedrom.unpkg.min.js",
            "cli": "{ echo '#!/usr/bin/env node' ; browserify --node bin/cli.js ; } > bin/wavedrom.js ; chmod +x bin/wavedrom.js",
            "prepare": "npm-run-all test dist dist.min unpkg unpkg.min",
            "coverage": "nyc report -r=text-lcov | coveralls",
            "clean": "rm -rf wavedrom.js wavedrom.*.js coverage .nyc_output",
            "skins": "for S in default narrow dark lowkey ; do node bin/svg2js.js -i unpacked/skins/$S.svg > skins/$S.js ; done"
          },
          "keywords": [
            "waveform",
            "verilog",
            "RTL"
          ],
          "devDependencies": {
            "@drom/eslint-config": "^0.10.0",
            "browserify": "^17.0.0",
            "chai": "^4.3",
            "coveralls": "^3.1.1",
            "eslint": "^8.9",
            "fs-extra": "^10",
            "json5": "^2.2.0",
            "mocha": "^9.2",
            "npm-run-all": "^4.1.5",
            "nyc": "^15.1.0",
            "terser": "^5.10",
            "watchify": "^4.0.0",
            "yargs": "^17.3"
          },
          "dependencies": {
            "bit-field": "^1.5.3",
            "logidrom": "^0.3.1",
            "onml": "^2.1.0",
            "tspan": "^0.4.0"
          },
          "eslintConfig": {
            "extends": "@drom/eslint-config/eslint4/node4",
            "rules": {
              "camelcase": 0
            }
          }
        };
      }, {}], 79: [function(require2, module2, exports2) {
        var WaveSkin = WaveSkin || {};
        WaveSkin.default = ["svg", { id: "svg", xmlns: "http://www.w3.org/2000/svg", "xmlns:xlink": "http://www.w3.org/1999/xlink", height: "0" }, ["style", { type: "text/css" }, "text{font-size:11pt;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:center;fill-opacity:1;font-family:Helvetica}.h1{font-size:33pt;font-weight:bold}.h2{font-size:27pt;font-weight:bold}.h3{font-size:20pt;font-weight:bold}.h4{font-size:14pt;font-weight:bold}.h5{font-size:11pt;font-weight:bold}.h6{font-size:8pt;font-weight:bold}.muted{fill:#aaa}.warning{fill:#f6b900}.error{fill:#f60000}.info{fill:#0041c4}.success{fill:#00ab00}.s1{fill:none;stroke:#000;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none}.s2{fill:none;stroke:#000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none}.s3{color:#000;fill:none;stroke:#000;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:1, 3;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible}.s4{color:#000;fill:none;stroke:#000;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none;stroke-dashoffset:0;marker:none;visibility:visible;display:inline;overflow:visible}.s5{fill:#fff;stroke:none}.s6{fill:#000;fill-opacity:1;stroke:none}.s7{color:#000;fill:#fff;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s8{color:#000;fill:#ffffb4;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s9{color:#000;fill:#ffe0b9;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s10{color:#000;fill:#b9e0ff;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s11{color:#000;fill:#ccfdfe;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s12{color:#000;fill:#cdfdc5;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s13{color:#000;fill:#f0c1fb;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s14{color:#000;fill:#f5c2c0;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:1px;marker:none;visibility:visible;display:inline;overflow:visible}.s15{fill:#0041c4;fill-opacity:1;stroke:none}.s16{fill:none;stroke:#0041c4;stroke-width:1;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none}"], ["defs", ["g", { id: "socket" }, ["rect", { y: "15", x: "6", height: "20", width: "20" }]], ["g", { id: "pclk" }, ["path", { d: "M0,20 0,0 20,0", class: "s1" }]], ["g", { id: "nclk" }, ["path", { d: "m0,0 0,20 20,0", class: "s1" }]], ["g", { id: "000" }, ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "0m0" }, ["path", { d: "m0,20 3,0 3,-10 3,10 11,0", class: "s1" }]], ["g", { id: "0m1" }, ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "0mx" }, ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 5,20", class: "s2" }], ["path", { d: "M20,0 4,16", class: "s2" }], ["path", { d: "M15,0 6,9", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "0md" }, ["path", { d: "m8,20 10,0", class: "s3" }], ["path", { d: "m0,20 5,0", class: "s1" }]], ["g", { id: "0mu" }, ["path", { d: "m0,20 3,0 C 7,10 10.107603,0 20,0", class: "s1" }]], ["g", { id: "0mz" }, ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "111" }, ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "1m0" }, ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }]], ["g", { id: "1m1" }, ["path", { d: "M0,0 3,0 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "1mx" }, ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 6,9", class: "s2" }], ["path", { d: "M10,0 5,5", class: "s2" }], ["path", { d: "M3.5,1.5 5,0", class: "s2" }]], ["g", { id: "1md" }, ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }]], ["g", { id: "1mu" }, ["path", { d: "M0,0 5,0", class: "s1" }], ["path", { d: "M8,0 18,0", class: "s3" }]], ["g", { id: "1mz" }, ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s1" }]], ["g", { id: "xxx" }, ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,5 5,0", class: "s2" }], ["path", { d: "M0,10 10,0", class: "s2" }], ["path", { d: "M0,15 15,0", class: "s2" }], ["path", { d: "M0,20 20,0", class: "s2" }], ["path", { d: "M5,20 20,5", class: "s2" }], ["path", { d: "M10,20 20,10", class: "s2" }], ["path", { d: "m15,20 5,-5", class: "s2" }]], ["g", { id: "xm0" }, ["path", { d: "M0,0 4,0 9,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,5 4,1", class: "s2" }], ["path", { d: "M0,10 5,5", class: "s2" }], ["path", { d: "M0,15 6,9", class: "s2" }], ["path", { d: "M0,20 7,13", class: "s2" }], ["path", { d: "M5,20 8,17", class: "s2" }]], ["g", { id: "xm1" }, ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,20 4,20 9,0", class: "s1" }], ["path", { d: "M0,5 5,0", class: "s2" }], ["path", { d: "M0,10 9,1", class: "s2" }], ["path", { d: "M0,15 7,8", class: "s2" }], ["path", { d: "M0,20 5,15", class: "s2" }]], ["g", { id: "xmx" }, ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,5 5,0", class: "s2" }], ["path", { d: "M0,10 10,0", class: "s2" }], ["path", { d: "M0,15 15,0", class: "s2" }], ["path", { d: "M0,20 20,0", class: "s2" }], ["path", { d: "M5,20 20,5", class: "s2" }], ["path", { d: "M10,20 20,10", class: "s2" }], ["path", { d: "m15,20 5,-5", class: "s2" }]], ["g", { id: "xmd" }, ["path", { d: "m0,0 4,0 c 3,10 6,20 16,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,5 4,1", class: "s2" }], ["path", { d: "M0,10 5.5,4.5", class: "s2" }], ["path", { d: "M0,15 6.5,8.5", class: "s2" }], ["path", { d: "M0,20 8,12", class: "s2" }], ["path", { d: "m5,20 5,-5", class: "s2" }], ["path", { d: "m10,20 2.5,-2.5", class: "s2" }]], ["g", { id: "xmu" }, ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "m0,20 4,0 C 7,10 10,0 20,0", class: "s1" }], ["path", { d: "M0,5 5,0", class: "s2" }], ["path", { d: "M0,10 10,0", class: "s2" }], ["path", { d: "M0,15 10,5", class: "s2" }], ["path", { d: "M0,20 6,14", class: "s2" }]], ["g", { id: "xmz" }, ["path", { d: "m0,0 4,0 c 6,10 11,10 16,10", class: "s1" }], ["path", { d: "m0,20 4,0 C 10,10 15,10 20,10", class: "s1" }], ["path", { d: "M0,5 4.5,0.5", class: "s2" }], ["path", { d: "M0,10 6.5,3.5", class: "s2" }], ["path", { d: "M0,15 8.5,6.5", class: "s2" }], ["path", { d: "M0,20 11.5,8.5", class: "s2" }]], ["g", { id: "ddd" }, ["path", { d: "m0,20 20,0", class: "s3" }]], ["g", { id: "dm0" }, ["path", { d: "m0,20 10,0", class: "s3" }], ["path", { d: "m12,20 8,0", class: "s1" }]], ["g", { id: "dm1" }, ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "dmx" }, ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 5,20", class: "s2" }], ["path", { d: "M20,0 4,16", class: "s2" }], ["path", { d: "M15,0 6,9", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "dmd" }, ["path", { d: "m0,20 20,0", class: "s3" }]], ["g", { id: "dmu" }, ["path", { d: "m0,20 3,0 C 7,10 10.107603,0 20,0", class: "s1" }]], ["g", { id: "dmz" }, ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "uuu" }, ["path", { d: "M0,0 20,0", class: "s3" }]], ["g", { id: "um0" }, ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }]], ["g", { id: "um1" }, ["path", { d: "M0,0 10,0", class: "s3" }], ["path", { d: "m12,0 8,0", class: "s1" }]], ["g", { id: "umx" }, ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 6,9", class: "s2" }], ["path", { d: "M10,0 5,5", class: "s2" }], ["path", { d: "M3.5,1.5 5,0", class: "s2" }]], ["g", { id: "umd" }, ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }]], ["g", { id: "umu" }, ["path", { d: "M0,0 20,0", class: "s3" }]], ["g", { id: "umz" }, ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s4" }]], ["g", { id: "zzz" }, ["path", { d: "m0,10 20,0", class: "s1" }]], ["g", { id: "zm0" }, ["path", { d: "m0,10 6,0 3,10 11,0", class: "s1" }]], ["g", { id: "zm1" }, ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "zmx" }, ["path", { d: "m6,10 3,10 11,0", class: "s1" }], ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 6.5,8.5", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }]], ["g", { id: "zmd" }, ["path", { d: "m0,10 7,0 c 3,5 8,10 13,10", class: "s1" }]], ["g", { id: "zmu" }, ["path", { d: "m0,10 7,0 C 10,5 15,0 20,0", class: "s1" }]], ["g", { id: "zmz" }, ["path", { d: "m0,10 20,0", class: "s1" }]], ["g", { id: "gap" }, ["path", { d: "m7,-2 -4,0 c -5,0 -5,24 -10,24 l 4,0 C 2,22 2,-2 7,-2 z", class: "s5" }], ["path", { d: "M-7,22 C -2,22 -2,-2 3,-2", class: "s1" }], ["path", { d: "M-3,22 C 2,22 2,-2 7,-2", class: "s1" }]], ["g", { id: "Pclk" }, ["path", { d: "M-3,12 0,3 3,12 C 1,11 -1,11 -3,12 z", class: "s6" }], ["path", { d: "M0,20 0,0 20,0", class: "s1" }]], ["g", { id: "Nclk" }, ["path", { d: "M-3,8 0,17 3,8 C 1,9 -1,9 -3,8 z", class: "s6" }], ["path", { d: "m0,0 0,20 20,0", class: "s1" }]], ["g", { id: "0mv-2" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s7" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "1mv-2" }, ["path", { d: "M2.875,0 20,0 20,20 9,20 z", class: "s7" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "xmv-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,5 3.5,1.5", class: "s2" }], ["path", { d: "M0,10 4.5,5.5", class: "s2" }], ["path", { d: "M0,15 6,9", class: "s2" }], ["path", { d: "M0,20 4,16", class: "s2" }]], ["g", { id: "dmv-2" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s7" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "umv-2" }, ["path", { d: "M3,0 20,0 20,20 9,20 z", class: "s7" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "zmv-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "m6,10 3,10 11,0", class: "s1" }], ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "vvv-2" }, ["path", { d: "M20,20 0,20 0,0 20,0", class: "s7" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vm0-2" }, ["path", { d: "M0,20 0,0 3,0 9,20", class: "s7" }], ["path", { d: "M0,0 3,0 9,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vm1-2" }, ["path", { d: "M0,0 0,20 3,20 9,0", class: "s7" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0", class: "s1" }]], ["g", { id: "vmx-2" }, ["path", { d: "M0,0 0,20 3,20 6,10 3,0", class: "s7" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 7,8", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }]], ["g", { id: "vmd-2" }, ["path", { d: "m0,0 0,20 20,0 C 10,20 7,10 3,0", class: "s7" }], ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vmu-2" }, ["path", { d: "m0,0 0,20 3,0 C 7,10 10,0 20,0", class: "s7" }], ["path", { d: "m0,20 3,0 C 7,10 10,0 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vmz-2" }, ["path", { d: "M0,0 3,0 C 10,10 15,10 20,10 15,10 10,10 3,20 L 0,20", class: "s7" }], ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s1" }], ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "0mv-3" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s8" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "1mv-3" }, ["path", { d: "M2.875,0 20,0 20,20 9,20 z", class: "s8" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "xmv-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,5 3.5,1.5", class: "s2" }], ["path", { d: "M0,10 4.5,5.5", class: "s2" }], ["path", { d: "M0,15 6,9", class: "s2" }], ["path", { d: "M0,20 4,16", class: "s2" }]], ["g", { id: "dmv-3" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s8" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "umv-3" }, ["path", { d: "M3,0 20,0 20,20 9,20 z", class: "s8" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "zmv-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "m6,10 3,10 11,0", class: "s1" }], ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "vvv-3" }, ["path", { d: "M20,20 0,20 0,0 20,0", class: "s8" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vm0-3" }, ["path", { d: "M0,20 0,0 3,0 9,20", class: "s8" }], ["path", { d: "M0,0 3,0 9,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vm1-3" }, ["path", { d: "M0,0 0,20 3,20 9,0", class: "s8" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0", class: "s1" }]], ["g", { id: "vmx-3" }, ["path", { d: "M0,0 0,20 3,20 6,10 3,0", class: "s8" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 7,8", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }]], ["g", { id: "vmd-3" }, ["path", { d: "m0,0 0,20 20,0 C 10,20 7,10 3,0", class: "s8" }], ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vmu-3" }, ["path", { d: "m0,0 0,20 3,0 C 7,10 10,0 20,0", class: "s8" }], ["path", { d: "m0,20 3,0 C 7,10 10,0 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vmz-3" }, ["path", { d: "M0,0 3,0 C 10,10 15,10 20,10 15,10 10,10 3,20 L 0,20", class: "s8" }], ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s1" }], ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "0mv-4" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s9" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "1mv-4" }, ["path", { d: "M2.875,0 20,0 20,20 9,20 z", class: "s9" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "xmv-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,5 3.5,1.5", class: "s2" }], ["path", { d: "M0,10 4.5,5.5", class: "s2" }], ["path", { d: "M0,15 6,9", class: "s2" }], ["path", { d: "M0,20 4,16", class: "s2" }]], ["g", { id: "dmv-4" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s9" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "umv-4" }, ["path", { d: "M3,0 20,0 20,20 9,20 z", class: "s9" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "zmv-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "m6,10 3,10 11,0", class: "s1" }], ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "vvv-4" }, ["path", { d: "M20,20 0,20 0,0 20,0", class: "s9" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vm0-4" }, ["path", { d: "M0,20 0,0 3,0 9,20", class: "s9" }], ["path", { d: "M0,0 3,0 9,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vm1-4" }, ["path", { d: "M0,0 0,20 3,20 9,0", class: "s9" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0", class: "s1" }]], ["g", { id: "vmx-4" }, ["path", { d: "M0,0 0,20 3,20 6,10 3,0", class: "s9" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 7,8", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }]], ["g", { id: "vmd-4" }, ["path", { d: "m0,0 0,20 20,0 C 10,20 7,10 3,0", class: "s9" }], ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vmu-4" }, ["path", { d: "m0,0 0,20 3,0 C 7,10 10,0 20,0", class: "s9" }], ["path", { d: "m0,20 3,0 C 7,10 10,0 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vmz-4" }, ["path", { d: "M0,0 3,0 C 10,10 15,10 20,10 15,10 10,10 3,20 L 0,20", class: "s9" }], ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s1" }], ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "0mv-5" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s10" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "1mv-5" }, ["path", { d: "M2.875,0 20,0 20,20 9,20 z", class: "s10" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "xmv-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,5 3.5,1.5", class: "s2" }], ["path", { d: "M0,10 4.5,5.5", class: "s2" }], ["path", { d: "M0,15 6,9", class: "s2" }], ["path", { d: "M0,20 4,16", class: "s2" }]], ["g", { id: "dmv-5" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s10" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "umv-5" }, ["path", { d: "M3,0 20,0 20,20 9,20 z", class: "s10" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "zmv-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "m6,10 3,10 11,0", class: "s1" }], ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "vvv-5" }, ["path", { d: "M20,20 0,20 0,0 20,0", class: "s10" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vm0-5" }, ["path", { d: "M0,20 0,0 3,0 9,20", class: "s10" }], ["path", { d: "M0,0 3,0 9,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vm1-5" }, ["path", { d: "M0,0 0,20 3,20 9,0", class: "s10" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0", class: "s1" }]], ["g", { id: "vmx-5" }, ["path", { d: "M0,0 0,20 3,20 6,10 3,0", class: "s10" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 7,8", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }]], ["g", { id: "vmd-5" }, ["path", { d: "m0,0 0,20 20,0 C 10,20 7,10 3,0", class: "s10" }], ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vmu-5" }, ["path", { d: "m0,0 0,20 3,0 C 7,10 10,0 20,0", class: "s10" }], ["path", { d: "m0,20 3,0 C 7,10 10,0 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vmz-5" }, ["path", { d: "M0,0 3,0 C 10,10 15,10 20,10 15,10 10,10 3,20 L 0,20", class: "s10" }], ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s1" }], ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "0mv-6" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s11" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "1mv-6" }, ["path", { d: "M2.875,0 20,0 20,20 9,20 z", class: "s11" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "xmv-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,5 3.5,1.5", class: "s2" }], ["path", { d: "M0,10 4.5,5.5", class: "s2" }], ["path", { d: "M0,15 6,9", class: "s2" }], ["path", { d: "M0,20 4,16", class: "s2" }]], ["g", { id: "dmv-6" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s11" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "umv-6" }, ["path", { d: "M3,0 20,0 20,20 9,20 z", class: "s11" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "zmv-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "m6,10 3,10 11,0", class: "s1" }], ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "vvv-6" }, ["path", { d: "M20,20 0,20 0,0 20,0", class: "s11" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vm0-6" }, ["path", { d: "M0,20 0,0 3,0 9,20", class: "s11" }], ["path", { d: "M0,0 3,0 9,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vm1-6" }, ["path", { d: "M0,0 0,20 3,20 9,0", class: "s11" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0", class: "s1" }]], ["g", { id: "vmx-6" }, ["path", { d: "M0,0 0,20 3,20 6,10 3,0", class: "s11" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 7,8", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }]], ["g", { id: "vmd-6" }, ["path", { d: "m0,0 0,20 20,0 C 10,20 7,10 3,0", class: "s11" }], ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vmu-6" }, ["path", { d: "m0,0 0,20 3,0 C 7,10 10,0 20,0", class: "s11" }], ["path", { d: "m0,20 3,0 C 7,10 10,0 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vmz-6" }, ["path", { d: "M0,0 3,0 C 10,10 15,10 20,10 15,10 10,10 3,20 L 0,20", class: "s11" }], ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s1" }], ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "0mv-7" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s12" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "1mv-7" }, ["path", { d: "M2.875,0 20,0 20,20 9,20 z", class: "s12" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "xmv-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,5 3.5,1.5", class: "s2" }], ["path", { d: "M0,10 4.5,5.5", class: "s2" }], ["path", { d: "M0,15 6,9", class: "s2" }], ["path", { d: "M0,20 4,16", class: "s2" }]], ["g", { id: "dmv-7" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s12" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "umv-7" }, ["path", { d: "M3,0 20,0 20,20 9,20 z", class: "s12" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "zmv-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "m6,10 3,10 11,0", class: "s1" }], ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "vvv-7" }, ["path", { d: "M20,20 0,20 0,0 20,0", class: "s12" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vm0-7" }, ["path", { d: "M0,20 0,0 3,0 9,20", class: "s12" }], ["path", { d: "M0,0 3,0 9,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vm1-7" }, ["path", { d: "M0,0 0,20 3,20 9,0", class: "s12" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0", class: "s1" }]], ["g", { id: "vmx-7" }, ["path", { d: "M0,0 0,20 3,20 6,10 3,0", class: "s12" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 7,8", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }]], ["g", { id: "vmd-7" }, ["path", { d: "m0,0 0,20 20,0 C 10,20 7,10 3,0", class: "s12" }], ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vmu-7" }, ["path", { d: "m0,0 0,20 3,0 C 7,10 10,0 20,0", class: "s12" }], ["path", { d: "m0,20 3,0 C 7,10 10,0 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vmz-7" }, ["path", { d: "M0,0 3,0 C 10,10 15,10 20,10 15,10 10,10 3,20 L 0,20", class: "s12" }], ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s1" }], ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "0mv-8" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s13" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "1mv-8" }, ["path", { d: "M2.875,0 20,0 20,20 9,20 z", class: "s13" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "xmv-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,5 3.5,1.5", class: "s2" }], ["path", { d: "M0,10 4.5,5.5", class: "s2" }], ["path", { d: "M0,15 6,9", class: "s2" }], ["path", { d: "M0,20 4,16", class: "s2" }]], ["g", { id: "dmv-8" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s13" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "umv-8" }, ["path", { d: "M3,0 20,0 20,20 9,20 z", class: "s13" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "zmv-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "m6,10 3,10 11,0", class: "s1" }], ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "vvv-8" }, ["path", { d: "M20,20 0,20 0,0 20,0", class: "s13" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vm0-8" }, ["path", { d: "M0,20 0,0 3,0 9,20", class: "s13" }], ["path", { d: "M0,0 3,0 9,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vm1-8" }, ["path", { d: "M0,0 0,20 3,20 9,0", class: "s13" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0", class: "s1" }]], ["g", { id: "vmx-8" }, ["path", { d: "M0,0 0,20 3,20 6,10 3,0", class: "s13" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 7,8", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }]], ["g", { id: "vmd-8" }, ["path", { d: "m0,0 0,20 20,0 C 10,20 7,10 3,0", class: "s13" }], ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vmu-8" }, ["path", { d: "m0,0 0,20 3,0 C 7,10 10,0 20,0", class: "s13" }], ["path", { d: "m0,20 3,0 C 7,10 10,0 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vmz-8" }, ["path", { d: "M0,0 3,0 C 10,10 15,10 20,10 15,10 10,10 3,20 L 0,20", class: "s13" }], ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s1" }], ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "0mv-9" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s14" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "1mv-9" }, ["path", { d: "M2.875,0 20,0 20,20 9,20 z", class: "s14" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "xmv-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,5 3.5,1.5", class: "s2" }], ["path", { d: "M0,10 4.5,5.5", class: "s2" }], ["path", { d: "M0,15 6,9", class: "s2" }], ["path", { d: "M0,20 4,16", class: "s2" }]], ["g", { id: "dmv-9" }, ["path", { d: "M9,0 20,0 20,20 3,20 z", class: "s14" }], ["path", { d: "M3,20 9,0 20,0", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "umv-9" }, ["path", { d: "M3,0 20,0 20,20 9,20 z", class: "s14" }], ["path", { d: "m3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "zmv-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "m6,10 3,10 11,0", class: "s1" }], ["path", { d: "M0,10 6,10 9,0 20,0", class: "s1" }]], ["g", { id: "vvv-9" }, ["path", { d: "M20,20 0,20 0,0 20,0", class: "s14" }], ["path", { d: "m0,20 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vm0-9" }, ["path", { d: "M0,20 0,0 3,0 9,20", class: "s14" }], ["path", { d: "M0,0 3,0 9,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vm1-9" }, ["path", { d: "M0,0 0,20 3,20 9,0", class: "s14" }], ["path", { d: "M0,0 20,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0", class: "s1" }]], ["g", { id: "vmx-9" }, ["path", { d: "M0,0 0,20 3,20 6,10 3,0", class: "s14" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }], ["path", { d: "m20,15 -5,5", class: "s2" }], ["path", { d: "M20,10 10,20", class: "s2" }], ["path", { d: "M20,5 8,17", class: "s2" }], ["path", { d: "M20,0 7,13", class: "s2" }], ["path", { d: "M15,0 7,8", class: "s2" }], ["path", { d: "M10,0 9,1", class: "s2" }]], ["g", { id: "vmd-9" }, ["path", { d: "m0,0 0,20 20,0 C 10,20 7,10 3,0", class: "s14" }], ["path", { d: "m0,0 3,0 c 4,10 7,20 17,20", class: "s1" }], ["path", { d: "m0,20 20,0", class: "s1" }]], ["g", { id: "vmu-9" }, ["path", { d: "m0,0 0,20 3,0 C 7,10 10,0 20,0", class: "s14" }], ["path", { d: "m0,20 3,0 C 7,10 10,0 20,0", class: "s1" }], ["path", { d: "M0,0 20,0", class: "s1" }]], ["g", { id: "vmz-9" }, ["path", { d: "M0,0 3,0 C 10,10 15,10 20,10 15,10 10,10 3,20 L 0,20", class: "s14" }], ["path", { d: "m0,0 3,0 c 7,10 12,10 17,10", class: "s1" }], ["path", { d: "m0,20 3,0 C 10,10 15,10 20,10", class: "s1" }]], ["g", { id: "vmv-2-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s7" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-3-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s8" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-4-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s9" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-5-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s10" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-6-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s11" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-7-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s12" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-8-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s13" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-9-2" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s7" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s14" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-2-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s7" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-3-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s8" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-4-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s9" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-5-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s10" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-6-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s11" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-7-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s12" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-8-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s13" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-9-3" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s8" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s14" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-2-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s7" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-3-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s8" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-4-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s9" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-5-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s10" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-6-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s11" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-7-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s12" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-8-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s13" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-9-4" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s9" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s14" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-2-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s7" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-3-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s8" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-4-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s9" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-5-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s10" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-6-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s11" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-7-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s12" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-8-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s13" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-9-5" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s10" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s14" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-2-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s7" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-3-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s8" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-4-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s9" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-5-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s10" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-6-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s11" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-7-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s12" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-8-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s13" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-9-6" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s11" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s14" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-2-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s7" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-3-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s8" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-4-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s9" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-5-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s10" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-6-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s11" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-7-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s12" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-8-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s13" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-9-7" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s12" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s14" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-2-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s7" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-3-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s8" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-4-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s9" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-5-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s10" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-6-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s11" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-7-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s12" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-8-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s13" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-9-8" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s13" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s14" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-2-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s7" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-3-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s8" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-4-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s9" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-5-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s10" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-6-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s11" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-7-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s12" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-8-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s13" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "vmv-9-9" }, ["path", { d: "M9,0 20,0 20,20 9,20 6,10 z", class: "s14" }], ["path", { d: "M3,0 0,0 0,20 3,20 6,10 z", class: "s14" }], ["path", { d: "m0,0 3,0 6,20 11,0", class: "s1" }], ["path", { d: "M0,20 3,20 9,0 20,0", class: "s1" }]], ["g", { id: "arrow0" }, ["path", { d: "m-12,-3 9,3 -9,3 c 1,-2 1,-4 0,-6 z", class: "s15" }], ["path", { d: "M0,0 -15,0", class: "s16" }]], ["marker", { id: "arrowhead", style: "fill:#0041c4", markerHeight: 7, markerWidth: 10, markerUnits: "strokeWidth", viewBox: "0 -4 11 8", refX: 15, refY: 0, orient: "auto" }, ["path", { d: "M0 -4 11 0 0 4z" }]], ["marker", { id: "arrowtail", style: "fill:#0041c4", markerHeight: 7, markerWidth: 10, markerUnits: "strokeWidth", viewBox: "-11 -4 11 8", refX: -15, refY: 0, orient: "auto" }, ["path", { d: "M0 -4 -11 0 0 4z" }]], ["marker", { id: "tee", style: "fill:#0041c4", markerHeight: 6, markerWidth: 1, markerUnits: "strokeWidth", viewBox: "0 0 1 6", refX: 0, refY: 3, orient: "auto" }, ["path", { d: "M 0 0 L 0 6", style: "stroke:#0041c4;stroke-width:2" }]]], ["g", { id: "waves" }, ["g", { id: "lanes" }], ["g", { id: "groups" }]]];
        try {
          module2.exports = WaveSkin;
        } catch (err) {
        }
      }, {}] }, {}, [11])(11);
    });
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianWaveDrom
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_default = __toESM(require_default());
var import_json5 = __toESM(require_dist());

// node_modules/nanoid/index.browser.js
var random = (bytes) => crypto.getRandomValues(new Uint8Array(bytes));
var customRandom = (alphabet, defaultSize, getRandom) => {
  let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;
  let step = -~(1.6 * mask * defaultSize / alphabet.length);
  return (size = defaultSize) => {
    let id2 = "";
    while (true) {
      let bytes = getRandom(step);
      let j = step;
      while (j--) {
        id2 += alphabet[bytes[j] & mask] || "";
        if (id2.length === size)
          return id2;
      }
    }
  };
};
var customAlphabet = (alphabet, size = 21) => customRandom(alphabet, size, random);

// main.ts
var nanoid = customAlphabet("1234567890", 12);
var nanoidNum = () => parseInt(nanoid());
var Wavedrom;
var ObsidianWaveDrom = class extends import_obsidian.Plugin {
  async onload() {
    this.postProcessors = /* @__PURE__ */ new Map();
    Wavedrom = (await Promise.resolve().then(() => __toESM(require_wavedrom_unpkg()))).default;
    this.registerWaveDromBlock("wavedrom");
    console.log("Obsidian wavedrom loaded");
  }
  registerWaveDromBlock(prefix) {
    this.postProcessors.set(
      prefix,
      this.registerMarkdownCodeBlockProcessor(
        prefix,
        (src, el, ctx) => this.postProcessor(prefix, src, el, ctx)
      )
    );
  }
  postProcessor(_prefix, src, el, _) {
    const source2 = (0, import_json5.parse)(src);
    Wavedrom.renderWaveElement(nanoidNum(), source2, el, import_default.default);
  }
  unregister() {
    this.postProcessors.forEach((value) => {
      import_obsidian.MarkdownPreviewRenderer.unregisterPostProcessor(value);
    });
    this.postProcessors.clear();
  }
  onunload() {
    this.unregister();
    console.log("Obsidian wavedrom unloaded");
  }
};
